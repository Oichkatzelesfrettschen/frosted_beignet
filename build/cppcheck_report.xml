<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.13.0"/>
    <errors>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_context.h" line="23" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_ext.h&quot; not found." verbose="Include file: &quot;CL/cl_ext.h&quot; not found.">
            <location file="../src/cl_context.h" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_ext.h&quot; not found." verbose="Include file: &quot;CL/cl_ext.h&quot; not found.">
            <location file="../src/cl_driver.h" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_mem.h" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_utils.h" line="22" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_base_object.h" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_accelerator_intel.h" line="5" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_ext.h&quot; not found." verbose="Include file: &quot;CL/cl_ext.h&quot; not found.">
            <location file="../src/cl_accelerator_intel.h" line="6" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;program.h&quot; not found." verbose="Include file: &quot;program.h&quot; not found.">
            <location file="../src/cl_gbe_loader.h" line="22" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_kernel.h" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_ext.h&quot; not found." verbose="Include file: &quot;CL/cl_ext.h&quot; not found.">
            <location file="../src/cl_kernel.h" line="28" column="0"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;v&apos; can be declared as pointer to const" verbose="Parameter &apos;v&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_accelerator_intel.c">
            <location file="../src/cl_utils.h" line="355" column="41" info="Parameter &apos;v&apos; can be declared as pointer to const"/>
            <symbol>v</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;EGL/egl.h&quot; not found." verbose="Include file: &quot;EGL/egl.h&quot; not found.">
            <location file="../src/cl_mem.h" line="30" column="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="../src/cl_alloc.c">
            <location file="../src/cl_alloc.c" line="74" column="3"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_platform_id.h" line="23" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;src/OCLConfig.h&quot; not found." verbose="Include file: &quot;src/OCLConfig.h&quot; not found.">
            <location file="../src/cl_platform_id.h" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;src/git_sha1.h&quot; not found." verbose="Include file: &quot;src/git_sha1.h&quot; not found.">
            <location file="../src/cl_platform_id.h" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_command_queue.h" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_enqueue.h" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_event.h" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_program.h" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_image.h" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_sampler.h" line="23" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_api.c" line="36" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_ext.h&quot; not found." verbose="Include file: &quot;CL/cl_ext.h&quot; not found.">
            <location file="../src/cl_api.c" line="37" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_intel.h&quot; not found." verbose="Include file: &quot;CL/cl_intel.h&quot; not found.">
            <location file="../src/cl_api.c" line="38" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/performance.h" line="3" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;data&apos; can be reduced." verbose="The scope of the variable &apos;data&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_api.c">
            <location file="../src/cl_api.c" line="232" column="17"/>
            <symbol>data</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;data&apos; can be reduced." verbose="The scope of the variable &apos;data&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_api.c">
            <location file="../src/cl_api.c" line="374" column="17"/>
            <symbol>data</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;data&apos; can be reduced." verbose="The scope of the variable &apos;data&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_api.c">
            <location file="../src/cl_api.c" line="469" column="17"/>
            <symbol>data</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;svm_ptr&apos; can be declared as pointer to const" verbose="Parameter &apos;svm_ptr&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_api.c">
            <location file="../src/cl_api.c" line="314" column="24" info="Parameter &apos;svm_ptr&apos; can be declared as pointer to const"/>
            <symbol>svm_ptr</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_api.c">
            <location file="../src/cl_api.c" line="228" column="12"/>
            <symbol>i</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_api_command_queue.c" line="20" column="0"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;out_devices&apos; can be declared as pointer to const" verbose="Parameter &apos;out_devices&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_api_device_id.c">
            <location file="../src/cl_api_device_id.c" line="79" column="34" info="Parameter &apos;out_devices&apos; can be declared as pointer to const"/>
            <symbol>out_devices</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_api_event.c" line="21" column="0"/>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;src_ptr&apos; can be declared as pointer to const" verbose="Variable &apos;src_ptr&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_api_event.c">
            <location file="../src/cl_api_event.c" line="257" column="9" info="Variable &apos;src_ptr&apos; can be declared as pointer to const"/>
            <symbol>src_ptr</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_api_kernel.c" line="26" column="0"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="../src/cl_api_kernel.c">
            <location file="../src/cl_api_kernel.c" line="204" column="9" info="err is overwritten"/>
            <location file="../src/cl_api_kernel.c" line="133" column="15" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563" file0="../src/cl_api_kernel.c">
            <location file="../src/cl_api_kernel.c" line="368" column="9" info="err is overwritten"/>
            <location file="../src/cl_api_kernel.c" line="360" column="15" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" file0="../src/cl_api_kernel.c">
            <location file="../src/cl_api_kernel.c" line="210" column="9" info="Shadow variable"/>
            <location file="../src/cl_api_kernel.c" line="92" column="11" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;new_args&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;new_args&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467" file0="../src/cl_api_kernel.c">
            <location file="../src/cl_api_kernel.c" line="364" column="40"/>
            <symbol>new_args</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_api_mem.c" line="23" column="0"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &apos;!&apos; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="1436" column="16"/>
        </error>
        <error id="duplicateAssignExpression" severity="style" msg="Same expression used in consecutive assignments of &apos;src_height&apos; and &apos;dst_height&apos;." verbose="Finding variables &apos;src_height&apos; and &apos;dst_height&apos; that are assigned the same expression is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="1169" column="14"/>
            <location file="../src/cl_api_mem.c" line="1170" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;total_size&apos; can be reduced." verbose="The scope of the variable &apos;total_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="727" column="10"/>
            <symbol>total_size</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;total_size&apos; can be reduced." verbose="The scope of the variable &apos;total_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="879" column="10"/>
            <symbol>total_size</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;total_size&apos; can be reduced." verbose="The scope of the variable &apos;total_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="1201" column="10"/>
            <symbol>total_size</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;buf&apos; can be declared as pointer to const" verbose="Variable &apos;buf&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="78" column="30" info="Variable &apos;buf&apos; can be declared as pointer to const"/>
            <symbol>buf</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;image_buffer&apos; can be declared as pointer to const" verbose="Variable &apos;image_buffer&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="112" column="38" info="Variable &apos;image_buffer&apos; can be declared as pointer to const"/>
            <symbol>image_buffer</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;buf&apos; can be declared as pointer to const" verbose="Variable &apos;buf&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="123" column="30" info="Variable &apos;buf&apos; can be declared as pointer to const"/>
            <symbol>buf</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;mapped_ptr&apos; can be declared as pointer to const" verbose="Parameter &apos;mapped_ptr&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="351" column="31" info="Parameter &apos;mapped_ptr&apos; can be declared as pointer to const"/>
            <symbol>mapped_ptr</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;src_b&apos; can be declared as pointer to const" verbose="Variable &apos;src_b&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="1073" column="30" info="Variable &apos;src_b&apos; can be declared as pointer to const"/>
            <symbol>src_b</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;dst_b&apos; can be declared as pointer to const" verbose="Variable &apos;dst_b&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="1074" column="30" info="Variable &apos;dst_b&apos; can be declared as pointer to const"/>
            <symbol>dst_b</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;image&apos; can be declared as pointer to const" verbose="Parameter &apos;image&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="1508" column="42" info="Parameter &apos;image&apos; can be declared as pointer to const"/>
            <symbol>image</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;image&apos; can be declared as pointer to const" verbose="Parameter &apos;image&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="1532" column="42" info="Parameter &apos;image&apos; can be declared as pointer to const"/>
            <symbol>image</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;total_size&apos; is assigned a value that is never used." verbose="Variable &apos;total_size&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="727" column="21"/>
            <symbol>total_size</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;total_size&apos; is assigned a value that is never used." verbose="Variable &apos;total_size&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="879" column="21"/>
            <symbol>total_size</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;total_size&apos; is assigned a value that is never used." verbose="Variable &apos;total_size&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="1201" column="21"/>
            <symbol>total_size</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="1333" column="9"/>
            <symbol>i</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="1433" column="13"/>
            <symbol>i</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;offset&apos; is assigned a value that is never used." verbose="Variable &apos;offset&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="1676" column="17"/>
            <symbol>offset</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_api_mem.c">
            <location file="../src/cl_api_mem.c" line="2282" column="12"/>
            <symbol>i</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_ext.h&quot; not found." verbose="Include file: &quot;CL/cl_ext.h&quot; not found.">
            <location file="../src/cl_api_platform_id.c" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cm_rt.h&quot; not found." verbose="Include file: &quot;cm_rt.h&quot; not found.">
            <location file="../src/cl_cmrt.cpp" line="6" column="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="47" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="51" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="60" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="69" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="91" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="92" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="100" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="108" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="110" column="42"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="119" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="120" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="128" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="129" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="164" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="207" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="212" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="226" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="232" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="248" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="258" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="259" column="11"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="265" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="268" column="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="284" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="286" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="289" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="297" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="298" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="308" column="25"/>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;olde&apos; can be declared as pointer to const" verbose="Variable &apos;olde&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="164" column="13" info="Variable &apos;olde&apos; can be declared as pointer to const"/>
            <symbol>olde</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;image&apos; can be declared as pointer to const" verbose="Parameter &apos;image&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_cmrt.cpp">
            <location file="../src/cl_cmrt.cpp" line="173" column="50" info="Parameter &apos;image&apos; can be declared as pointer to const"/>
            <symbol>image</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;program.h&quot; not found." verbose="Include file: &quot;program.h&quot; not found.">
            <location file="../src/cl_command_queue.c" line="20" column="0"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;image_info&apos; can be declared as pointer to const" verbose="Parameter &apos;image_info&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_command_queue.c">
            <location file="../src/cl_command_queue.c" line="108" column="35" info="Parameter &apos;image_info&apos; can be declared as pointer to const"/>
            <symbol>image_info</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;buffer&apos; can be declared as pointer to const" verbose="Variable &apos;buffer&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_command_queue.c">
            <location file="../src/cl_command_queue.c" line="191" column="30" info="Variable &apos;buffer&apos; can be declared as pointer to const"/>
            <symbol>buffer</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_device_enqueue.h" line="25" column="0"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="69" column="5"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="71" column="5"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="73" column="5"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="74" column="3"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="76" column="5"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="470" column="5"/>
            <symbol>alloca</symbol>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses." cwe="398" file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="398" column="6"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses." cwe="398" file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="444" column="6"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="413" column="7"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;%&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a%b?c:d&apos;&apos; should be written as either &apos;&apos;(a%b)?c:d&apos;&apos; or &apos;&apos;a%(b?c:d)&apos;&apos;." cwe="783" file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="244" column="3"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;%&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a%b?c:d&apos;&apos; should be written as either &apos;&apos;(a%b)?c:d&apos;&apos; or &apos;&apos;a%(b?c:d)&apos;&apos;." cwe="783" file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="245" column="3"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;%&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a%b?c:d&apos;&apos; should be written as either &apos;&apos;(a%b)?c:d&apos;&apos; or &apos;&apos;a%(b?c:d)&apos;&apos;." cwe="783" file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="246" column="3"/>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;addr&apos; can be declared as pointer to const" verbose="Variable &apos;addr&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="208" column="14" info="Variable &apos;addr&apos; can be declared as pointer to const"/>
            <symbol>addr</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;curbe_offset&apos; is assigned a value that is never used." verbose="Variable &apos;curbe_offset&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_command_queue_gen7.c">
            <location file="../src/cl_command_queue_gen7.c" line="195" column="24"/>
            <symbol>curbe_offset</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_context.c" line="34" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_gl.h&quot; not found." verbose="Include file: &quot;CL/cl_gl.h&quot; not found.">
            <location file="../src/cl_context.c" line="35" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;type&apos; can be reduced." verbose="The scope of the variable &apos;type&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_device_enqueue.c">
            <location file="../src/cl_device_enqueue.c" line="114" column="13"/>
            <symbol>type</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dim&apos; can be reduced." verbose="The scope of the variable &apos;dim&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_device_enqueue.c">
            <location file="../src/cl_device_enqueue.c" line="114" column="19"/>
            <symbol>dim</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;kernel_name&apos; can be reduced." verbose="The scope of the variable &apos;kernel_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_device_enqueue.c">
            <location file="../src/cl_device_enqueue.c" line="115" column="16"/>
            <symbol>kernel_name</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;slm_sizes&apos; can be declared as pointer to const" verbose="Variable &apos;slm_sizes&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_device_enqueue.c">
            <location file="../src/cl_device_enqueue.c" line="159" column="10" info="Variable &apos;slm_sizes&apos; can be declared as pointer to const"/>
            <symbol>slm_sizes</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Block_descriptor_1::copy_helper&apos; is never used." verbose="struct member &apos;Block_descriptor_1::copy_helper&apos; is never used." cwe="563" file0="../src/cl_device_enqueue.c">
            <location file="../src/cl_device_enqueue.c" line="102" column="11"/>
            <symbol>Block_descriptor_1::copy_helper</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Block_descriptor_1::dispose_helper&apos; is never used." verbose="struct member &apos;Block_descriptor_1::dispose_helper&apos; is never used." cwe="563" file0="../src/cl_device_enqueue.c">
            <location file="../src/cl_device_enqueue.c" line="103" column="11"/>
            <symbol>Block_descriptor_1::dispose_helper</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Block_descriptor_1::signature&apos; is never used." verbose="struct member &apos;Block_descriptor_1::signature&apos; is never used." cwe="563" file0="../src/cl_device_enqueue.c">
            <location file="../src/cl_device_enqueue.c" line="105" column="17"/>
            <symbol>Block_descriptor_1::signature</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_device_id.c" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_ext.h&quot; not found." verbose="Include file: &quot;CL/cl_ext.h&quot; not found.">
            <location file="../src/cl_device_id.c" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_intel.h&quot; not found." verbose="Include file: &quot;CL/cl_intel.h&quot; not found.">
            <location file="../src/cl_device_id.c" line="29" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="failed to expand &apos;DECL_INFO_STRING&apos;, it is invalid to use a preprocessor directive as macro parameter" verbose="failed to expand &apos;DECL_INFO_STRING&apos;, it is invalid to use a preprocessor directive as macro parameter">
            <location file="../src/cl_gt_device.h" line="156" column="0"/>
        </error>
        <error id="noValidConfiguration" severity="information" msg="This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details." verbose="This file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:\012&apos;&apos; : [../src/cl_gt_device.h:156] failed to expand &apos;DECL_INFO_STRING&apos;, it is invalid to use a preprocessor directive as macro parameter\012BEIGNET_GIT_SHA1 : [../src/cl_gt_device.h:156] failed to expand &apos;DECL_INFO_STRING&apos;, it is invalid to use a preprocessor directive as macro parameter\012ENABLE_FP64 : [../src/cl_gt_device.h:156] failed to expand &apos;DECL_INFO_STRING&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAS_GL_EGL : [../src/cl_gt_device.h:156] failed to expand &apos;DECL_INFO_STRING&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAS_OCLIcd : [../src/cl_gt_device.h:156] failed to expand &apos;DECL_INFO_STRING&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAS_USERPTR : [../src/cl_gt_device.h:156] failed to expand &apos;DECL_INFO_STRING&apos;, it is invalid to use a preprocessor directive as macro parameter\012LIBCL_DRIVER_VERSION_PATCH : [../src/cl_gt_device.h:156] failed to expand &apos;DECL_INFO_STRING&apos;, it is invalid to use a preprocessor directive as macro parameter\012NDEBUG : [../src/cl_gt_device.h:156] failed to expand &apos;DECL_INFO_STRING&apos;, it is invalid to use a preprocessor directive as macro parameter\012__compiler_offsetof : [../src/cl_gt_device.h:156] failed to expand &apos;DECL_INFO_STRING&apos;, it is invalid to use a preprocessor directive as macro parameter" file0="../src/cl_device_id.c">
            <location file="../src/cl_device_id.c" line="0" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_device_data.h&quot; not found." verbose="Include file: &quot;cl_device_data.h&quot; not found.">
            <location file="../src/intel/intel_driver.h" line="47" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_enqueue.c">
            <location file="../src/cl_enqueue.c" line="495" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;j&apos; shadows outer variable" verbose="Local variable &apos;j&apos; shadows outer variable" cwe="398" file0="../src/cl_enqueue.c">
            <location file="../src/cl_enqueue.c" line="441" column="9" info="Shadow variable"/>
            <location file="../src/cl_enqueue.c" line="378" column="10" info="Shadowed declaration"/>
            <symbol>j</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;buffer&apos; can be declared as pointer to const" verbose="Variable &apos;buffer&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_enqueue.c">
            <location file="../src/cl_enqueue.c" line="44" column="26" info="Variable &apos;buffer&apos; can be declared as pointer to const"/>
            <symbol>buffer</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;buffer&apos; can be declared as pointer to const" verbose="Variable &apos;buffer&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_enqueue.c">
            <location file="../src/cl_enqueue.c" line="85" column="26" info="Variable &apos;buffer&apos; can be declared as pointer to const"/>
            <symbol>buffer</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;buffer&apos; can be declared as pointer to const" verbose="Variable &apos;buffer&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_enqueue.c">
            <location file="../src/cl_enqueue.c" line="165" column="26" info="Variable &apos;buffer&apos; can be declared as pointer to const"/>
            <symbol>buffer</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;image&apos; can be declared as pointer to const" verbose="Variable &apos;image&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_enqueue.c">
            <location file="../src/cl_enqueue.c" line="212" column="3" info="Variable &apos;image&apos; can be declared as pointer to const"/>
            <symbol>image</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;data&apos; can be declared as pointer to const" verbose="Parameter &apos;data&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_enqueue.c">
            <location file="../src/cl_enqueue.c" line="252" column="38" info="Parameter &apos;data&apos; can be declared as pointer to const"/>
            <symbol>data</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;image&apos; can be declared as pointer to const" verbose="Variable &apos;image&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_enqueue.c">
            <location file="../src/cl_enqueue.c" line="334" column="3" info="Variable &apos;image&apos; can be declared as pointer to const"/>
            <symbol>image</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;image&apos; can be declared as pointer to const" verbose="Variable &apos;image&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_enqueue.c">
            <location file="../src/cl_enqueue.c" line="421" column="7" info="Variable &apos;image&apos; can be declared as pointer to const"/>
            <symbol>image</symbol>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;dst_ptr&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;dst_ptr&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467" file0="../src/cl_enqueue.c">
            <location file="../src/cl_enqueue.c" line="269" column="36"/>
            <symbol>dst_ptr</symbol>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;mapped_ptr&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;mapped_ptr&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467" file0="../src/cl_enqueue.c">
            <location file="../src/cl_enqueue.c" line="416" column="25"/>
            <symbol>mapped_ptr</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;depend_events&apos; is always false" verbose="Condition &apos;depend_events&apos; is always false" cwe="570" file0="../src/cl_event.c">
            <location file="../src/cl_event.c" line="294" column="11" info="Condition &apos;depend_events&apos; is always false"/>
            <location file="../src/cl_event.c" line="243" column="29" info="Assignment &apos;depend_events=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: depend_events" verbose="Null pointer dereference: depend_events" cwe="476" file0="../src/cl_event.c">
            <location file="../src/cl_event.c" line="281" column="9" info="Null pointer dereference"/>
            <location file="../src/cl_event.c" line="243" column="29" info="Assignment &apos;depend_events=NULL&apos;, assigned value is 0"/>
            <symbol>depend_events</symbol>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: depend_events" verbose="Null pointer dereference: depend_events" cwe="476" file0="../src/cl_event.c">
            <location file="../src/cl_event.c" line="291" column="9" info="Null pointer dereference"/>
            <location file="../src/cl_event.c" line="243" column="29" info="Assignment &apos;depend_events=NULL&apos;, assigned value is 0"/>
            <symbol>depend_events</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_event.c">
            <location file="../src/cl_event.c" line="81" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;status&apos; can be reduced." verbose="The scope of the variable &apos;status&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_event.c">
            <location file="../src/cl_event.c" line="624" column="7"/>
            <symbol>status</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;event&apos; can be declared as pointer to const" verbose="Parameter &apos;event&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_event.c">
            <location file="../src/cl_event.c" line="512" column="35" info="Parameter &apos;event&apos; can be declared as pointer to const"/>
            <symbol>event</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563" file0="../src/cl_event.c">
            <location file="../src/cl_event.c" line="208" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_event.c">
            <location file="../src/cl_event.c" line="580" column="9"/>
            <symbol>ret</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Config/llvm-config.h&quot; not found." verbose="Include file: &quot;llvm/Config/llvm-config.h&quot; not found.">
            <location file="../src/cl_extensions.c" line="1" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_extensions.c" line="10" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;id==cl_khr_image2d_from_buffer_ext_id&apos; is always false" verbose="Condition &apos;id==cl_khr_image2d_from_buffer_ext_id&apos; is always false" cwe="570" file0="../src/cl_extensions.c">
            <location file="../src/cl_extensions.c" line="49" column="12" info="Condition &apos;id==cl_khr_image2d_from_buffer_ext_id&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;id==cl_khr_3d_image_writes_ext_id&apos; is always false" verbose="Condition &apos;id==cl_khr_3d_image_writes_ext_id&apos; is always false" cwe="570" file0="../src/cl_extensions.c">
            <location file="../src/cl_extensions.c" line="51" column="12" info="Condition &apos;id==cl_khr_3d_image_writes_ext_id&apos; is always false"/>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;ext_name&apos; can be declared as pointer to const" verbose="Variable &apos;ext_name&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_extensions.c">
            <location file="../src/cl_extensions.c" line="97" column="13" info="Variable &apos;ext_name&apos; can be declared as pointer to const"/>
            <symbol>ext_name</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;ext_str&apos; can be declared as pointer to const" verbose="Variable &apos;ext_str&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_extensions.c">
            <location file="../src/cl_extensions.c" line="125" column="9" info="Variable &apos;ext_str&apos; can be declared as pointer to const"/>
            <symbol>ext_str</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;EGL/egl.h&quot; not found." verbose="Include file: &quot;EGL/egl.h&quot; not found.">
            <location file="../src/cl_extensions.c" line="3" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;EGL/eglext.h&quot; not found." verbose="Include file: &quot;EGL/eglext.h&quot; not found.">
            <location file="../src/cl_extensions.c" line="4" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/src/GBEConfig.h&quot; not found." verbose="Include file: &quot;backend/src/GBEConfig.h&quot; not found.">
            <location file="../src/cl_gbe_loader.cpp" line="23" column="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="107" column="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="111" column="48"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="115" column="48"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="119" column="46"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="123" column="46"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="127" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="131" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="135" column="42"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="139" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="143" column="54"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="147" column="31"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="151" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="155" column="31"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="159" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="163" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="167" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="171" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="175" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="179" column="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="183" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="187" column="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="191" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="195" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="199" column="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="203" column="51"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="207" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="211" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="215" column="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="219" column="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="223" column="42"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="227" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="231" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="235" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="239" column="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="243" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="247" column="29"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="251" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="255" column="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="259" column="29"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="263" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="267" column="29"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="271" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="275" column="41"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="298" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="302" column="46"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="306" column="47"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="310" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="314" column="40"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="318" column="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="322" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="326" column="48"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="330" column="47"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="334" column="41"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../src/cl_gbe_loader.cpp">
            <location file="../src/cl_gbe_loader.cpp" line="338" column="47"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_gl_api.c" line="41" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_gl.h&quot; not found." verbose="Include file: &quot;CL/cl_gl.h&quot; not found.">
            <location file="../src/cl_gl_api.c" line="42" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_intel.h&quot; not found." verbose="Include file: &quot;CL/cl_intel.h&quot; not found.">
            <location file="../src/cl_gl_api.c" line="43" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_ext.h&quot; not found." verbose="Include file: &quot;CL/cl_ext.h&quot; not found.">
            <location file="../src/cl_image.c" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_kernel.c" line="28" column="0"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer." cwe="758" file0="../src/cl_kernel.c">
            <location file="../src/cl_kernel.c" line="108" column="3"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer." cwe="758" file0="../src/cl_kernel.c">
            <location file="../src/cl_kernel.c" line="115" column="3"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: arg_type==GBE_ARG_SAMPLER. &apos;A || (!A &amp;&amp; B)&apos; is equivalent to &apos;A || B&apos;" verbose="The condition &apos;arg_type!=GBE_ARG_SAMPLER || arg_type==GBE_ARG_SAMPLER &amp;&amp; sz!=sizeof(cl_sampler)&apos; is equivalent to &apos;arg_type!=GBE_ARG_SAMPLER || sz!=sizeof(cl_sampler)&apos;." cwe="398" file0="../src/cl_kernel.c">
            <location file="../src/cl_kernel.c" line="150" column="39"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;offset&apos; shadows outer variable" verbose="Local variable &apos;offset&apos; shadows outer variable" cwe="398" file0="../src/cl_kernel.c">
            <location file="../src/cl_kernel.c" line="252" column="13" info="Shadow variable"/>
            <location file="../src/cl_kernel.c" line="127" column="11" info="Shadowed declaration"/>
            <symbol>offset</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;accel&apos; can be declared as pointer to const" verbose="Variable &apos;accel&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_kernel.c">
            <location file="../src/cl_kernel.c" line="145" column="27" info="Variable &apos;accel&apos; can be declared as pointer to const"/>
            <symbol>accel</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;pipe&apos; can be declared as pointer to const" verbose="Variable &apos;pipe&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_kernel.c">
            <location file="../src/cl_kernel.c" line="179" column="21" info="Variable &apos;pipe&apos; can be declared as pointer to const"/>
            <symbol>pipe</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_intel.h&quot; not found." verbose="Include file: &quot;CL/cl_intel.h&quot; not found.">
            <location file="../src/cl_khr_icd.c" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_mem.c" line="33" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_intel.h&quot; not found." verbose="Include file: &quot;CL/cl_intel.h&quot; not found.">
            <location file="../src/cl_mem.c" line="34" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;dst_offset%4&gt;src_offset%4&apos; is always true" verbose="Condition &apos;dst_offset%4&gt;src_offset%4&apos; is always true" cwe="571" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="1693" column="22" info="Condition &apos;dst_offset%4&gt;src_offset%4&apos; is always true"/>
            <location file="../src/cl_mem.c" line="1662" column="22" info="Assuming condition is false"/>
            <location file="../src/cl_mem.c" line="1635" column="22" info="Assuming that condition &apos;src_offset%4==dst_offset%4&apos; is not redundant"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;|&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="600" column="56"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;|&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="1304" column="33"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;|&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="1305" column="40"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;|&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="1306" column="47"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pbase_object&apos; can be reduced." verbose="The scope of the variable &apos;pbase_object&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="280" column="18"/>
            <symbol>pbase_object</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;buffer&apos; shadows outer argument" verbose="Local variable &apos;buffer&apos; shadows outer argument" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="140" column="28" info="Shadow variable"/>
            <location file="../src/cl_mem.c" line="112" column="24" info="Shadowed declaration"/>
            <symbol>buffer</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;pipe&apos; can be declared as pointer to const" verbose="Variable &apos;pipe&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="78" column="17" info="Variable &apos;pipe&apos; can be declared as pointer to const"/>
            <symbol>pipe</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;info&apos; can be declared as pointer to const" verbose="Variable &apos;info&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="439" column="21" info="Variable &apos;info&apos; can be declared as pointer to const"/>
            <symbol>info</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;origin&apos; can be declared as const array" verbose="Variable &apos;origin&apos; can be declared as const array" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="721" column="10" info="Variable &apos;origin&apos; can be declared as const array"/>
            <symbol>origin</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;region&apos; can be declared as const array" verbose="Variable &apos;region&apos; can be declared as const array" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="722" column="10" info="Variable &apos;region&apos; can be declared as const array"/>
            <symbol>region</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;host_ptr&apos; can be declared as pointer to const" verbose="Parameter &apos;host_ptr&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="718" column="11" info="Parameter &apos;host_ptr&apos; can be declared as pointer to const"/>
            <symbol>host_ptr</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;tilingStr&apos; can be declared as pointer to const" verbose="Variable &apos;tilingStr&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="739" column="11" info="Variable &apos;tilingStr&apos; can be declared as pointer to const"/>
            <symbol>tilingStr</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;src&apos; can be declared as pointer to const" verbose="Variable &apos;src&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="1350" column="11" info="Variable &apos;src&apos; can be declared as pointer to const"/>
            <symbol>src</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;svm_pointer&apos; can be declared as pointer to const" verbose="Parameter &apos;svm_pointer&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="1431" column="41" info="Parameter &apos;svm_pointer&apos; can be declared as pointer to const"/>
            <symbol>svm_pointer</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;global_off&apos; can be declared as const array" verbose="Variable &apos;global_off&apos; can be declared as const array" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="1565" column="10" info="Variable &apos;global_off&apos; can be declared as const array"/>
            <symbol>global_off</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;global_off&apos; can be declared as const array" verbose="Variable &apos;global_off&apos; can be declared as const array" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="1737" column="10" info="Variable &apos;global_off&apos; can be declared as const array"/>
            <symbol>global_off</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;global_off&apos; can be declared as const array" verbose="Variable &apos;global_off&apos; can be declared as const array" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="1825" column="10" info="Variable &apos;global_off&apos; can be declared as const array"/>
            <symbol>global_off</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;global_off&apos; can be declared as const array" verbose="Variable &apos;global_off&apos; can be declared as const array" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="1930" column="10" info="Variable &apos;global_off&apos; can be declared as const array"/>
            <symbol>global_off</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;global_off&apos; can be declared as const array" verbose="Variable &apos;global_off&apos; can be declared as const array" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="2003" column="10" info="Variable &apos;global_off&apos; can be declared as const array"/>
            <symbol>global_off</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;image&apos; can be declared as pointer to const" verbose="Parameter &apos;image&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="2161" column="54" info="Parameter &apos;image&apos; can be declared as pointer to const"/>
            <symbol>image</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;global_off&apos; can be declared as const array" verbose="Variable &apos;global_off&apos; can be declared as const array" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="2190" column="10" info="Variable &apos;global_off&apos; can be declared as const array"/>
            <symbol>global_off</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;global_off&apos; can be declared as const array" verbose="Variable &apos;global_off&apos; can be declared as const array" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="2307" column="10" info="Variable &apos;global_off&apos; can be declared as const array"/>
            <symbol>global_off</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;buffer&apos; can be declared as pointer to const" verbose="Variable &apos;buffer&apos; can be declared as pointer to const" cwe="398" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="2792" column="28" info="Variable &apos;buffer&apos; can be declared as pointer to const"/>
            <symbol>buffer</symbol>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;pattern&apos; is of type &apos;const void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;pattern&apos; is of type &apos;const void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="1848" column="24"/>
            <symbol>pattern</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_mem.c">
            <location file="../src/cl_mem.c" line="585" column="12"/>
            <symbol>err</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_mem_gl.c" line="36" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_intel.h&quot; not found." verbose="Include file: &quot;CL/cl_intel.h&quot; not found.">
            <location file="../src/cl_mem_gl.c" line="37" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_gl.h&quot; not found." verbose="Include file: &quot;CL/cl_gl.h&quot; not found.">
            <location file="../src/cl_mem_gl.c" line="38" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_platform_id.c" line="23" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_ext.h&quot; not found." verbose="Include file: &quot;CL/cl_ext.h&quot; not found.">
            <location file="../src/cl_platform_id.c" line="24" column="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="../src/cl_platform_id.c">
            <location file="../src/cl_platform_id.c" line="35" column="3"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl.h&quot; not found." verbose="Include file: &quot;CL/cl.h&quot; not found.">
            <location file="../src/cl_program.c" line="29" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_intel.h&quot; not found." verbose="Include file: &quot;CL/cl_intel.h&quot; not found.">
            <location file="../src/cl_program.c" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;CL/cl_ext.h&quot; not found." verbose="Include file: &quot;CL/cl_ext.h&quot; not found.">
            <location file="../src/cl_program.c" line="31" column="0"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: The condition &apos;lengths[0] == 0&apos; is redundant since &apos;lengths[0] &lt; 4&apos; is sufficient." verbose="Redundant condition: The condition &apos;lengths[0] == 0&apos; is redundant since &apos;lengths[0] &lt; 4&apos; is sufficient." cwe="398" file0="../src/cl_program.c">
            <location file="../src/cl_program.c" line="283" column="23"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="../src/cl_program.c">
            <location file="../src/cl_program.c" line="765" column="6" info="Second condition"/>
            <location file="../src/cl_program.c" line="764" column="6" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ver1&apos; can be reduced." verbose="The scope of the variable &apos;ver1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_program.c">
            <location file="../src/cl_program.c" line="512" column="7"/>
            <symbol>ver1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ver2&apos; can be reduced." verbose="The scope of the variable &apos;ver2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/cl_program.c">
            <location file="../src/cl_program.c" line="513" column="7"/>
            <symbol>ver2</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ref&apos; is assigned a value that is never used." verbose="Variable &apos;ref&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_program.c">
            <location file="../src/cl_program.c" line="69" column="12"/>
            <symbol>ref</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ver1&apos; is assigned a value that is never used." verbose="Variable &apos;ver1&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_program.c">
            <location file="../src/cl_program.c" line="512" column="12"/>
            <symbol>ver1</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ver2&apos; is assigned a value that is never used." verbose="Variable &apos;ver2&apos; is assigned a value that is never used." cwe="563" file0="../src/cl_program.c">
            <location file="../src/cl_program.c" line="513" column="12"/>
            <symbol>ver2</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;intel/intel_batchbuffer.h&quot; not found." verbose="Include file: &quot;intel/intel_batchbuffer.h&quot; not found.">
            <location file="../src/intel/intel_batchbuffer.c" line="47" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;intel/intel_driver.h&quot; not found." verbose="Include file: &quot;intel/intel_driver.h&quot; not found.">
            <location file="../src/intel/intel_batchbuffer.c" line="48" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_alloc.h&quot; not found." verbose="Include file: &quot;cl_alloc.h&quot; not found.">
            <location file="../src/intel/intel_batchbuffer.c" line="49" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_utils.h&quot; not found." verbose="Include file: &quot;cl_utils.h&quot; not found.">
            <location file="../src/intel/intel_batchbuffer.c" line="50" column="0"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;error&apos; is not used." verbose="Label &apos;error&apos; is not used." cwe="398" file0="../src/intel/intel_batchbuffer.c">
            <location file="../src/intel/intel_batchbuffer.c" line="174" column="1"/>
            <symbol>error</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_utils.h&quot; not found." verbose="Include file: &quot;cl_utils.h&quot; not found.">
            <location file="../src/intel/intel_gpgpu.h" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_driver.h&quot; not found." verbose="Include file: &quot;cl_driver.h&quot; not found.">
            <location file="../src/intel/intel_gpgpu.h" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;intel/intel_batchbuffer.h&quot; not found." verbose="Include file: &quot;intel/intel_batchbuffer.h&quot; not found.">
            <location file="../src/intel/intel_gpgpu.h" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;intel/intel_driver.h&quot; not found." verbose="Include file: &quot;intel/intel_driver.h&quot; not found.">
            <location file="../src/intel/intel_gpgpu.h" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_utils.h&quot; not found." verbose="Include file: &quot;cl_utils.h&quot; not found.">
            <location file="../src/intel/intel_batchbuffer.h" line="50" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;intel_bufmgr.h&quot; not found." verbose="Include file: &quot;intel_bufmgr.h&quot; not found.">
            <location file="../src/intel/intel_driver.c" line="64" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_mem.h&quot; not found." verbose="Include file: &quot;cl_mem.h&quot; not found.">
            <location file="../src/intel/intel_driver.c" line="65" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_utils.h&quot; not found." verbose="Include file: &quot;cl_utils.h&quot; not found.">
            <location file="../src/intel/intel_driver.c" line="76" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_alloc.h&quot; not found." verbose="Include file: &quot;cl_alloc.h&quot; not found.">
            <location file="../src/intel/intel_driver.c" line="77" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_context.h&quot; not found." verbose="Include file: &quot;cl_context.h&quot; not found.">
            <location file="../src/intel/intel_driver.c" line="78" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_driver.h&quot; not found." verbose="Include file: &quot;cl_driver.h&quot; not found.">
            <location file="../src/intel/intel_driver.c" line="79" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_device_id.h&quot; not found." verbose="Include file: &quot;cl_device_id.h&quot; not found.">
            <location file="../src/intel/intel_driver.c" line="80" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_platform_id.h&quot; not found." verbose="Include file: &quot;cl_platform_id.h&quot; not found.">
            <location file="../src/intel/intel_driver.c" line="81" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_gbe_loader.h&quot; not found." verbose="Include file: &quot;cl_gbe_loader.h&quot; not found.">
            <location file="../src/intel/intel_driver.c" line="490" column="0"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="../src/intel/intel_driver.c">
            <location file="../src/intel/intel_driver.c" line="431" column="3"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;error&apos; is not used." verbose="Label &apos;error&apos; is not used." cwe="398" file0="../src/intel/intel_driver.c">
            <location file="../src/intel/intel_driver.c" line="102" column="1"/>
            <symbol>error</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;batch&apos; can be declared as pointer to const" verbose="Parameter &apos;batch&apos; can be declared as pointer to const" cwe="398" file0="../src/intel/intel_driver.c">
            <location file="../src/intel/intel_batchbuffer.h" line="120" column="54" info="Parameter &apos;batch&apos; can be declared as pointer to const"/>
            <symbol>batch</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;val&apos; can be declared as pointer to const" verbose="Variable &apos;val&apos; can be declared as pointer to const" cwe="398" file0="../src/intel/intel_driver.c">
            <location file="../src/intel/intel_driver.c" line="115" column="7" info="Variable &apos;val&apos; can be declared as pointer to const"/>
            <symbol>val</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;driver&apos; can be declared as pointer to const" verbose="Parameter &apos;driver&apos; can be declared as pointer to const" cwe="398" file0="../src/intel/intel_driver.c">
            <location file="../src/intel/intel_driver.c" line="297" column="40" info="Parameter &apos;driver&apos; can be declared as pointer to const"/>
            <symbol>driver</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;drv&apos; can be declared as pointer to const. However it seems that &apos;intel_driver_get_bufmgr&apos; is a callback function, if &apos;drv&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;drv&apos; can be declared as pointer to const. However it seems that &apos;intel_driver_get_bufmgr&apos; is a callback function, if &apos;drv&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="../src/intel/intel_driver.c">
            <location file="../src/intel/intel_driver.c" line="506" column="41" info="Parameter &apos;drv&apos; can be declared as pointer to const"/>
            <location file="../src/intel/intel_driver.c" line="1043" column="52" info="You might need to cast the function pointer here"/>
            <symbol>drv</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;drv&apos; can be declared as pointer to const. However it seems that &apos;intel_driver_get_ver&apos; is a callback function, if &apos;drv&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;drv&apos; can be declared as pointer to const. However it seems that &apos;intel_driver_get_ver&apos; is a callback function, if &apos;drv&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="../src/intel/intel_driver.c">
            <location file="../src/intel/intel_driver.c" line="512" column="43" info="Parameter &apos;drv&apos; can be declared as pointer to const"/>
            <location file="../src/intel/intel_driver.c" line="1040" column="46" info="You might need to cast the function pointer here"/>
            <symbol>drv</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;bo&apos; can be declared as pointer to const. However it seems that &apos;drm_intel_bo_get_size&apos; is a callback function, if &apos;bo&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;bo&apos; can be declared as pointer to const. However it seems that &apos;drm_intel_bo_get_size&apos; is a callback function, if &apos;bo&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="../src/intel/intel_driver.c">
            <location file="../src/intel/intel_driver.c" line="533" column="51" info="Parameter &apos;bo&apos; can be declared as pointer to const"/>
            <location file="../src/intel/intel_driver.c" line="1068" column="50" info="You might need to cast the function pointer here"/>
            <symbol>bo</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;bo&apos; can be declared as pointer to const. However it seems that &apos;drm_intel_bo_get_virtual&apos; is a callback function, if &apos;bo&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;bo&apos; can be declared as pointer to const. However it seems that &apos;drm_intel_bo_get_virtual&apos; is a callback function, if &apos;bo&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="../src/intel/intel_driver.c">
            <location file="../src/intel/intel_driver.c" line="534" column="53" info="Parameter &apos;bo&apos; can be declared as pointer to const"/>
            <location file="../src/intel/intel_driver.c" line="1067" column="56" info="You might need to cast the function pointer here"/>
            <symbol>bo</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;GL/gl.h&quot; not found." verbose="Include file: &quot;GL/gl.h&quot; not found.">
            <location file="../src/intel/intel_driver.c" line="51" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;EGL/egl.h&quot; not found." verbose="Include file: &quot;EGL/egl.h&quot; not found.">
            <location file="../src/intel/intel_driver.c" line="52" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_image.h&quot; not found." verbose="Include file: &quot;cl_image.h&quot; not found.">
            <location file="../src/intel/intel_driver.c" line="602" column="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;has_pooled_eu&apos; is assigned a value that is never used." verbose="Variable &apos;has_pooled_eu&apos; is assigned a value that is never used." cwe="563" file0="../src/intel/intel_driver.c">
            <location file="../src/intel/intel_driver.c" line="1012" column="19"/>
            <symbol>has_pooled_eu</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;x11/dricommon.h&quot; not found." verbose="Include file: &quot;x11/dricommon.h&quot; not found.">
            <location file="../src/intel/intel_driver.c" line="58" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;intel/intel_gpgpu.h&quot; not found." verbose="Include file: &quot;intel/intel_gpgpu.h&quot; not found.">
            <location file="../src/intel/intel_gpgpu.c" line="34" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;intel/intel_defines.h&quot; not found." verbose="Include file: &quot;intel/intel_defines.h&quot; not found.">
            <location file="../src/intel/intel_gpgpu.c" line="35" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;intel/intel_structs.h&quot; not found." verbose="Include file: &quot;intel/intel_structs.h&quot; not found.">
            <location file="../src/intel/intel_gpgpu.c" line="36" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;program.h&quot; not found." verbose="Include file: &quot;program.h&quot; not found.">
            <location file="../src/intel/intel_gpgpu.c" line="37" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_alloc.h&quot; not found." verbose="Include file: &quot;cl_alloc.h&quot; not found.">
            <location file="../src/intel/intel_gpgpu.c" line="39" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_utils.h&quot; not found." verbose="Include file: &quot;cl_utils.h&quot; not found.">
            <location file="../src/intel/intel_gpgpu.c" line="40" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_sampler.h&quot; not found." verbose="Include file: &quot;cl_sampler.h&quot; not found.">
            <location file="../src/intel/intel_gpgpu.c" line="41" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_accelerator_intel.h&quot; not found." verbose="Include file: &quot;cl_accelerator_intel.h&quot; not found.">
            <location file="../src/intel/intel_gpgpu.c" line="42" column="0"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="Assignment &apos;slm_sz=0&apos; is redundant with condition &apos;slm_sz==0&apos;." verbose="Assignment &apos;slm_sz=0&apos; is redundant with condition &apos;slm_sz==0&apos;." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="1763" column="12" info="Assignment &apos;slm_sz=0&apos; is redundant"/>
            <location file="../src/intel/intel_gpgpu.c" line="1762" column="14" info="Condition &apos;slm_sz==0&apos;"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="Assignment &apos;slm_sz=0&apos; is redundant with condition &apos;slm_sz==0&apos;." verbose="Assignment &apos;slm_sz=0&apos; is redundant with condition &apos;slm_sz==0&apos;." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="1804" column="12" info="Assignment &apos;slm_sz=0&apos; is redundant"/>
            <location file="../src/intel/intel_gpgpu.c" line="1803" column="14" info="Condition &apos;slm_sz==0&apos;"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="314" column="29"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="324" column="56"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="326" column="29"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="328" column="29"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="329" column="29"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="330" column="29"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="335" column="29"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="336" column="29"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="347" column="31"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="349" column="31"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="359" column="58"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="364" column="18"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="366" column="31"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="372" column="22"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="392" column="31"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="394" column="31"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="404" column="58"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="409" column="18"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="411" column="31"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="417" column="22"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="502" column="29"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="532" column="29"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="819" column="17"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="2240" column="39"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="2252" column="49"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="2292" column="39"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="2306" column="49"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;gpgpu==NULL&apos; is always false" verbose="Condition &apos;gpgpu==NULL&apos; is always false" cwe="570" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="213" column="13" info="Condition &apos;gpgpu==NULL&apos; is always false"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;right_mask&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;right_mask&apos;. The initialized value is overwritten before it is read." cwe="563" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="2231" column="14" info="right_mask is overwritten"/>
            <location file="../src/intel/intel_gpgpu.c" line="2224" column="23" info="right_mask is initialized"/>
            <symbol>right_mask</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;right_mask&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;right_mask&apos;. The initialized value is overwritten before it is read." cwe="563" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="2281" column="14" info="right_mask is overwritten"/>
            <location file="../src/intel/intel_gpgpu.c" line="2274" column="23" info="right_mask is initialized"/>
            <symbol>right_mask</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;scratch_index&apos; can be reduced." verbose="The scope of the variable &apos;scratch_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="487" column="11"/>
            <symbol>scratch_index</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;scratch_index&apos; can be reduced." verbose="The scope of the variable &apos;scratch_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="515" column="11"/>
            <symbol>scratch_index</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;error&apos; is not used." verbose="Label &apos;error&apos; is not used." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="232" column="1"/>
            <symbol>error</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;error&apos; is not used." verbose="Label &apos;error&apos; is not used." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="248" column="1"/>
            <symbol>error</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;error&apos; is not used." verbose="Label &apos;error&apos; is not used." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="2331" column="1"/>
            <symbol>error</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;kernel&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_build_idrt_gen8&apos; is a callback function, if &apos;kernel&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;kernel&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_build_idrt_gen8&apos; is a callback function, if &apos;kernel&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="1738" column="68" info="Parameter &apos;kernel&apos; can be declared as pointer to const"/>
            <location file="../src/intel/intel_gpgpu.c" line="2623" column="30" info="You might need to cast the function pointer here"/>
            <symbol>kernel</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;kernel&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_build_idrt_gen9&apos; is a callback function, if &apos;kernel&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;kernel&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_build_idrt_gen9&apos; is a callback function, if &apos;kernel&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="1779" column="68" info="Parameter &apos;kernel&apos; can be declared as pointer to const"/>
            <location file="../src/intel/intel_gpgpu.c" line="2646" column="30" info="You might need to cast the function pointer here"/>
            <symbol>kernel</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;k&apos; can be declared as pointer to const" verbose="Variable &apos;k&apos; can be declared as pointer to const" cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="1826" column="20" info="Variable &apos;k&apos; can be declared as pointer to const"/>
            <symbol>k</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;k&apos; can be declared as pointer to const" verbose="Variable &apos;k&apos; can be declared as pointer to const" cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="1857" column="20" info="Variable &apos;k&apos; can be declared as pointer to const"/>
            <symbol>k</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;samplers&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_bind_sampler_gen7&apos; is a callback function, if &apos;samplers&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;samplers&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_bind_sampler_gen7&apos; is a callback function, if &apos;samplers&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="2173" column="63" info="Parameter &apos;samplers&apos; can be declared as pointer to const"/>
            <location file="../src/intel/intel_gpgpu.c" line="2585" column="56" info="You might need to cast the function pointer here"/>
            <symbol>samplers</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;samplers&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_bind_sampler_gen8&apos; is a callback function, if &apos;samplers&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;samplers&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_bind_sampler_gen8&apos; is a callback function, if &apos;samplers&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="2182" column="63" info="Parameter &apos;samplers&apos; can be declared as pointer to const"/>
            <location file="../src/intel/intel_gpgpu.c" line="2649" column="58" info="You might need to cast the function pointer here"/>
            <symbol>samplers</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;ptr&apos; can be declared as pointer to const" verbose="Variable &apos;ptr&apos; can be declared as pointer to const" cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="2439" column="13" info="Variable &apos;ptr&apos; can be declared as pointer to const"/>
            <symbol>ptr</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;gpgpu&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_get_profiling_info&apos; is a callback function, if &apos;gpgpu&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;gpgpu&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_get_profiling_info&apos; is a callback function, if &apos;gpgpu&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="2477" column="47" info="Parameter &apos;gpgpu&apos; can be declared as pointer to const"/>
            <location file="../src/intel/intel_gpgpu.c" line="2598" column="67" info="You might need to cast the function pointer here"/>
            <symbol>gpgpu</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;gpgpu&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_get_printf_info&apos; is a callback function, if &apos;gpgpu&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;gpgpu&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_get_printf_info&apos; is a callback function, if &apos;gpgpu&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="2551" column="44" info="Parameter &apos;gpgpu&apos; can be declared as pointer to const"/>
            <location file="../src/intel/intel_gpgpu.c" line="2606" column="61" info="You might need to cast the function pointer here"/>
            <symbol>gpgpu</symbol>
        </error>
        <error id="constParameterCallback" severity="style" msg="Parameter &apos;gpgpu&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_get_kernel&apos; is a callback function, if &apos;gpgpu&apos; is declared with const you might also need to cast function pointer(s)." verbose="Parameter &apos;gpgpu&apos; can be declared as pointer to const. However it seems that &apos;intel_gpgpu_get_kernel&apos; is a callback function, if &apos;gpgpu&apos; is declared with const you might also need to cast function pointer(s)." cwe="398" file0="../src/intel/intel_gpgpu.c">
            <location file="../src/intel/intel_gpgpu.c" line="2563" column="39" info="Parameter &apos;gpgpu&apos; can be declared as pointer to const"/>
            <location file="../src/intel/intel_gpgpu.c" line="2608" column="51" info="You might need to cast the function pointer here"/>
            <symbol>gpgpu</symbol>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="79" column="61"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="85" column="55"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="87" column="22"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="91" column="61"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="94" column="55"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="95" column="22"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="99" column="61"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="102" column="55"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="103" column="22"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="138" column="52"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="140" column="52"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="142" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="144" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="146" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="148" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="150" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="184" column="28"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;prediction_motion_vector_buffer&apos; can be declared as pointer to const" verbose="Parameter &apos;prediction_motion_vector_buffer&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="12" column="52" info="Parameter &apos;prediction_motion_vector_buffer&apos; can be declared as pointer to const"/>
            <symbol>prediction_motion_vector_buffer</symbol>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../src/kernels/cl_internal_block_motion_estimate_intel.cl">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="138" column="23" info="Shift"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src&apos; can be declared as pointer to const" verbose="Parameter &apos;src&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_copy_buf_align16.cl">
            <location file="../src/kernels/cl_internal_copy_buf_align16.cl" line="1" column="54" info="Parameter &apos;src&apos; can be declared as pointer to const"/>
            <symbol>src</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src&apos; can be declared as pointer to const" verbose="Parameter &apos;src&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_copy_buf_align4.cl">
            <location file="../src/kernels/cl_internal_copy_buf_align4.cl" line="1" column="53" info="Parameter &apos;src&apos; can be declared as pointer to const"/>
            <symbol>src</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src&apos; can be declared as pointer to const" verbose="Parameter &apos;src&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_copy_buf_rect.cl">
            <location file="../src/kernels/cl_internal_copy_buf_rect.cl" line="1" column="50" info="Parameter &apos;src&apos; can be declared as pointer to const"/>
            <symbol>src</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src&apos; can be declared as pointer to const" verbose="Parameter &apos;src&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_copy_buf_rect_align4.cl">
            <location file="../src/kernels/cl_internal_copy_buf_rect_align4.cl" line="1" column="56" info="Parameter &apos;src&apos; can be declared as pointer to const"/>
            <symbol>src</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src&apos; can be declared as pointer to const" verbose="Parameter &apos;src&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_copy_buf_unalign_dst_offset.cl">
            <location file="../src/kernels/cl_internal_copy_buf_unalign_dst_offset.cl" line="1" column="63" info="Parameter &apos;src&apos; can be declared as pointer to const"/>
            <symbol>src</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src&apos; can be declared as pointer to const" verbose="Parameter &apos;src&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_copy_buf_unalign_same_offset.cl">
            <location file="../src/kernels/cl_internal_copy_buf_unalign_same_offset.cl" line="1" column="64" info="Parameter &apos;src&apos; can be declared as pointer to const"/>
            <symbol>src</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src&apos; can be declared as pointer to const" verbose="Parameter &apos;src&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_copy_buf_unalign_src_offset.cl">
            <location file="../src/kernels/cl_internal_copy_buf_unalign_src_offset.cl" line="1" column="63" info="Parameter &apos;src&apos; can be declared as pointer to const"/>
            <symbol>src</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;buffer&apos; can be declared as pointer to const" verbose="Parameter &apos;buffer&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_copy_buffer_to_image_2d.cl">
            <location file="../src/kernels/cl_internal_copy_buffer_to_image_2d.cl" line="1" column="86" info="Parameter &apos;buffer&apos; can be declared as pointer to const"/>
            <symbol>buffer</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;buffer&apos; can be declared as pointer to const" verbose="Parameter &apos;buffer&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_copy_buffer_to_image_2d_align16.cl">
            <location file="../src/kernels/cl_internal_copy_buffer_to_image_2d_align16.cl" line="1" column="94" info="Parameter &apos;buffer&apos; can be declared as pointer to const"/>
            <symbol>buffer</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;buffer&apos; can be declared as pointer to const" verbose="Parameter &apos;buffer&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_copy_buffer_to_image_2d_align4.cl">
            <location file="../src/kernels/cl_internal_copy_buffer_to_image_2d_align4.cl" line="1" column="92" info="Parameter &apos;buffer&apos; can be declared as pointer to const"/>
            <symbol>buffer</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;buffer&apos; can be declared as pointer to const" verbose="Parameter &apos;buffer&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_copy_buffer_to_image_3d.cl">
            <location file="../src/kernels/cl_internal_copy_buffer_to_image_3d.cl" line="1" column="86" info="Parameter &apos;buffer&apos; can be declared as pointer to const"/>
            <symbol>buffer</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;buffer&apos; can be declared as pointer to const" verbose="Parameter &apos;buffer&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_copy_buffer_to_image_3d_align16.cl">
            <location file="../src/kernels/cl_internal_copy_buffer_to_image_3d_align16.cl" line="1" column="94" info="Parameter &apos;buffer&apos; can be declared as pointer to const"/>
            <symbol>buffer</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;buffer&apos; can be declared as pointer to const" verbose="Parameter &apos;buffer&apos; can be declared as pointer to const" cwe="398" file0="../src/kernels/cl_internal_copy_buffer_to_image_3d_align4.cl">
            <location file="../src/kernels/cl_internal_copy_buffer_to_image_3d_align4.cl" line="1" column="92" info="Parameter &apos;buffer&apos; can be declared as pointer to const"/>
            <symbol>buffer</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;env&apos; can be declared as pointer to const" verbose="Variable &apos;env&apos; can be declared as pointer to const" cwe="398" file0="../src/performance.c">
            <location file="../src/performance.c" line="311" column="9" info="Variable &apos;env&apos; can be declared as pointer to const"/>
            <symbol>env</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p_tmp_kernel&apos; is assigned a value that is never used." verbose="Variable &apos;p_tmp_kernel&apos; is assigned a value that is never used." cwe="563" file0="../src/performance.c">
            <location file="../src/performance.c" line="252" column="18"/>
            <symbol>p_tmp_kernel</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;x11/va_dri2.h&quot; not found." verbose="Include file: &quot;x11/va_dri2.h&quot; not found.">
            <location file="../src/x11/dricommon.c" line="45" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;x11/va_dri2tokens.h&quot; not found." verbose="Include file: &quot;x11/va_dri2tokens.h&quot; not found.">
            <location file="../src/x11/dricommon.c" line="46" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;x11/dricommon.h&quot; not found." verbose="Include file: &quot;x11/dricommon.h&quot; not found.">
            <location file="../src/x11/dricommon.c" line="47" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_utils.h&quot; not found." verbose="Include file: &quot;cl_utils.h&quot; not found.">
            <location file="../src/x11/dricommon.c" line="48" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;cl_alloc.h&quot; not found." verbose="Include file: &quot;cl_alloc.h&quot; not found.">
            <location file="../src/x11/dricommon.c" line="49" column="0"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;error&apos; is not used." verbose="Label &apos;error&apos; is not used." cwe="398" file0="../src/x11/dricommon.c">
            <location file="../src/x11/dricommon.c" line="132" column="1"/>
            <symbol>error</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;dri2_drwble&apos; can be declared as pointer to const" verbose="Variable &apos;dri2_drwble&apos; can be declared as pointer to const" cwe="398" file0="../src/x11/dricommon.c">
            <location file="../src/x11/dricommon.c" line="186" column="20" info="Variable &apos;dri2_drwble&apos; can be declared as pointer to const"/>
            <symbol>dri2_drwble</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;xf86drm.h&quot; not found." verbose="Include file: &quot;xf86drm.h&quot; not found.">
            <location file="../src/x11/va_dri2.c" line="56" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;x11/va_dri2.h&quot; not found." verbose="Include file: &quot;x11/va_dri2.h&quot; not found.">
            <location file="../src/x11/va_dri2.c" line="57" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;x11/va_dri2str.h&quot; not found." verbose="Include file: &quot;x11/va_dri2str.h&quot; not found.">
            <location file="../src/x11/va_dri2.c" line="58" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;x11/va_dri2tokens.h&quot; not found." verbose="Include file: &quot;x11/va_dri2tokens.h&quot; not found.">
            <location file="../src/x11/va_dri2.c" line="59" column="0"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;attachments&apos; can be declared as pointer to const" verbose="Parameter &apos;attachments&apos; can be declared as pointer to const" cwe="398" file0="../src/x11/va_dri2.c">
            <location file="../src/x11/va_dri2.c" line="249" column="21" info="Parameter &apos;attachments&apos; can be declared as pointer to const"/>
            <symbol>attachments</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/context.hpp&quot; not found." verbose="Include file: &quot;backend/context.hpp&quot; not found.">
            <location file="../backend/src/backend/context.cpp" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/program.hpp&quot; not found." verbose="Include file: &quot;backend/program.hpp&quot; not found.">
            <location file="../backend/src/backend/context.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_encoder.hpp&quot; not found." verbose="Include file: &quot;backend/gen_encoder.hpp&quot; not found.">
            <location file="../backend/src/backend/context.cpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/backend/context.cpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/backend/context.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/profile.hpp&quot; not found." verbose="Include file: &quot;ir/profile.hpp&quot; not found.">
            <location file="../backend/src/backend/context.cpp" line="29" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/liveness.hpp&quot; not found." verbose="Include file: &quot;ir/liveness.hpp&quot; not found.">
            <location file="../backend/src/backend/context.cpp" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/value.hpp&quot; not found." verbose="Include file: &quot;ir/value.hpp&quot; not found.">
            <location file="../backend/src/backend/context.cpp" line="31" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/image.hpp&quot; not found." verbose="Include file: &quot;ir/image.hpp&quot; not found.">
            <location file="../backend/src/backend/context.cpp" line="32" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/backend/context.cpp" line="33" column="0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ScratchAllocator&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ScratchAllocator&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/backend/context.cpp">
            <location file="../backend/src/backend/context.cpp" line="108" column="5"/>
            <symbol>ScratchAllocator</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;it&apos; shadows outer variable" verbose="Local variable &apos;it&apos; shadows outer variable" cwe="398" file0="../backend/src/backend/context.cpp">
            <location file="../backend/src/backend/context.cpp" line="650" column="17" info="Shadow variable"/>
            <location file="../backend/src/backend/context.cpp" line="645" column="12" info="Shadowed declaration"/>
            <symbol>it</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_defs.hpp&quot; not found." verbose="Include file: &quot;backend/gen_defs.hpp&quot; not found.">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="51" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen7_instruction.hpp&quot; not found." verbose="Include file: &quot;backend/gen7_instruction.hpp&quot; not found.">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="52" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen9_instruction.hpp&quot; not found." verbose="Include file: &quot;backend/gen9_instruction.hpp&quot; not found.">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="53" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;src/cl_device_data.h&quot; not found." verbose="Include file: &quot;src/cl_device_data.h&quot; not found.">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="54" column="0"/>
        </error>
        <error id="checkLevelNormal" severity="information" msg="Limiting ValueFlow analysis in function &apos;gen_disasm&apos; since it is too complex. Please specify --check-level=exhaustive to perform full analysis." verbose="Limiting ValueFlow analysis in function &apos;gen_disasm&apos; since it is too complex. Please specify --check-level=exhaustive to perform full analysis." file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="1383" column="1"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="685" column="5"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;reg_file&apos; shadows outer variable" verbose="Local variable &apos;reg_file&apos; shadows outer variable" cwe="398" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="816" column="18" info="Shadow variable"/>
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="301" column="20" info="Shadowed declaration"/>
            <symbol>reg_file</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;exec_size&apos; shadows outer variable" verbose="Local variable &apos;exec_size&apos; shadows outer variable" cwe="398" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="1356" column="7" info="Shadow variable"/>
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="204" column="20" info="Shadowed declaration"/>
            <symbol>exec_size</symbol>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;(void*)(&amp;val)&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;(void*)(&amp;val)&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="1231" column="30"/>
            <symbol>(void*)(&amp;val)</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="776" column="11"/>
            <symbol>err</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="786" column="11"/>
            <symbol>err</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="799" column="13"/>
            <symbol>err</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="801" column="13"/>
            <symbol>err</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="803" column="11"/>
            <symbol>err</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="805" column="11"/>
            <symbol>err</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="825" column="9"/>
            <symbol>err</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="827" column="9"/>
            <symbol>err</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="831" column="9"/>
            <symbol>err</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen/gen_mesa_disasm.c">
            <location file="../backend/src/backend/gen/gen_mesa_disasm.c" line="833" column="9"/>
            <symbol>err</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen75_context.hpp&quot; not found." verbose="Include file: &quot;backend/gen75_context.hpp&quot; not found.">
            <location file="../backend/src/backend/gen75_context.cpp" line="23" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen75_encoder.hpp&quot; not found." verbose="Include file: &quot;backend/gen75_encoder.hpp&quot; not found.">
            <location file="../backend/src/backend/gen75_context.cpp" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_program.hpp&quot; not found." verbose="Include file: &quot;backend/gen_program.hpp&quot; not found.">
            <location file="../backend/src/backend/gen75_context.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_defs.hpp&quot; not found." verbose="Include file: &quot;backend/gen_defs.hpp&quot; not found.">
            <location file="../backend/src/backend/gen75_context.cpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_encoder.hpp&quot; not found." verbose="Include file: &quot;backend/gen_encoder.hpp&quot; not found.">
            <location file="../backend/src/backend/gen75_context.cpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found.">
            <location file="../backend/src/backend/gen75_context.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_scheduling.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_scheduling.hpp&quot; not found.">
            <location file="../backend/src/backend/gen75_context.cpp" line="29" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_reg_allocation.hpp&quot; not found." verbose="Include file: &quot;backend/gen_reg_allocation.hpp&quot; not found.">
            <location file="../backend/src/backend/gen75_context.cpp" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/backend/gen75_context.cpp" line="31" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/backend/gen75_context.cpp" line="32" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/value.hpp&quot; not found." verbose="Include file: &quot;ir/value.hpp&quot; not found.">
            <location file="../backend/src/backend/gen75_context.cpp" line="33" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen75_encoder.hpp&quot; not found." verbose="Include file: &quot;backend/gen75_encoder.hpp&quot; not found.">
            <location file="../backend/src/backend/gen75_encoder.cpp" line="28" column="0"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4." verbose="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?" cwe="571" file0="../backend/src/backend/gen75_encoder.cpp">
            <location file="../backend/src/backend/gen75_encoder.cpp" line="173" column="25"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4." verbose="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?" cwe="571" file0="../backend/src/backend/gen75_encoder.cpp">
            <location file="../backend/src/backend/gen75_encoder.cpp" line="210" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen75_encoder.cpp">
            <location file="../backend/src/backend/gen75_encoder.cpp" line="235" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen75_encoder.cpp">
            <location file="../backend/src/backend/gen75_encoder.cpp" line="248" column="43"/>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;insn_else&apos; can be declared as reference to const" verbose="Variable &apos;insn_else&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen75_encoder.cpp">
            <location file="../backend/src/backend/gen75_encoder.cpp" line="248" column="30" info="Variable &apos;insn_else&apos; can be declared as reference to const"/>
            <symbol>insn_else</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen7_encoder.hpp&quot; not found." verbose="Include file: &quot;backend/gen7_encoder.hpp&quot; not found.">
            <location file="../backend/src/backend/gen7_encoder.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen8_context.hpp&quot; not found." verbose="Include file: &quot;backend/gen8_context.hpp&quot; not found.">
            <location file="../backend/src/backend/gen8_context.cpp" line="23" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen8_encoder.hpp&quot; not found." verbose="Include file: &quot;backend/gen8_encoder.hpp&quot; not found.">
            <location file="../backend/src/backend/gen8_context.cpp" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_program.hpp&quot; not found." verbose="Include file: &quot;backend/gen_program.hpp&quot; not found.">
            <location file="../backend/src/backend/gen8_context.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_defs.hpp&quot; not found." verbose="Include file: &quot;backend/gen_defs.hpp&quot; not found.">
            <location file="../backend/src/backend/gen8_context.cpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_encoder.hpp&quot; not found." verbose="Include file: &quot;backend/gen_encoder.hpp&quot; not found.">
            <location file="../backend/src/backend/gen8_context.cpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found.">
            <location file="../backend/src/backend/gen8_context.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_scheduling.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_scheduling.hpp&quot; not found.">
            <location file="../backend/src/backend/gen8_context.cpp" line="29" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_reg_allocation.hpp&quot; not found." verbose="Include file: &quot;backend/gen_reg_allocation.hpp&quot; not found.">
            <location file="../backend/src/backend/gen8_context.cpp" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/backend/gen8_context.cpp" line="31" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/backend/gen8_context.cpp" line="32" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/value.hpp&quot; not found." verbose="Include file: &quot;ir/value.hpp&quot; not found.">
            <location file="../backend/src/backend/gen8_context.cpp" line="33" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;jip0&apos; can be reduced." verbose="The scope of the variable &apos;jip0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/backend/gen8_context.cpp">
            <location file="../backend/src/backend/gen8_context.cpp" line="1804" column="13"/>
            <symbol>jip0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;jip1&apos; can be reduced." verbose="The scope of the variable &apos;jip1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/backend/gen8_context.cpp">
            <location file="../backend/src/backend/gen8_context.cpp" line="1804" column="19"/>
            <symbol>jip1</symbol>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" file0="../backend/src/backend/gen8_context.cpp">
            <location file="../backend/src/backend/gen8_context.cpp" line="108" column="37" info="Unsigned positive"/>
            <symbol>start_addr</symbol>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" file0="../backend/src/backend/gen8_context.cpp">
            <location file="../backend/src/backend/gen8_context.cpp" line="141" column="37" info="Unsigned positive"/>
            <symbol>start_addr</symbol>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" file0="../backend/src/backend/gen8_context.cpp">
            <location file="../backend/src/backend/gen8_context.cpp" line="199" column="37" info="Unsigned positive"/>
            <symbol>start_addr</symbol>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" file0="../backend/src/backend/gen8_context.cpp">
            <location file="../backend/src/backend/gen8_context.cpp" line="254" column="37" info="Unsigned positive"/>
            <symbol>start_addr</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tmpNum&apos; is assigned a value that is never used." verbose="Variable &apos;tmpNum&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen8_context.cpp">
            <location file="../backend/src/backend/gen8_context.cpp" line="1129" column="13"/>
            <symbol>tmpNum</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen8_encoder.hpp&quot; not found." verbose="Include file: &quot;backend/gen8_encoder.hpp&quot; not found.">
            <location file="../backend/src/backend/gen8_encoder.cpp" line="28" column="0"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4." verbose="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?" cwe="571" file0="../backend/src/backend/gen8_encoder.cpp">
            <location file="../backend/src/backend/gen8_encoder.cpp" line="236" column="25"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4." verbose="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?" cwe="571" file0="../backend/src/backend/gen8_encoder.cpp">
            <location file="../backend/src/backend/gen8_encoder.cpp" line="273" column="25"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4." verbose="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?" cwe="571" file0="../backend/src/backend/gen8_encoder.cpp">
            <location file="../backend/src/backend/gen8_encoder.cpp" line="295" column="25"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4." verbose="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?" cwe="571" file0="../backend/src/backend/gen8_encoder.cpp">
            <location file="../backend/src/backend/gen8_encoder.cpp" line="320" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen8_encoder.cpp">
            <location file="../backend/src/backend/gen8_encoder.cpp" line="397" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen8_encoder.cpp">
            <location file="../backend/src/backend/gen8_encoder.cpp" line="410" column="43"/>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;insn_else&apos; can be declared as reference to const" verbose="Variable &apos;insn_else&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen8_encoder.cpp">
            <location file="../backend/src/backend/gen8_encoder.cpp" line="410" column="30" info="Variable &apos;insn_else&apos; can be declared as reference to const"/>
            <symbol>insn_else</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen9_context.hpp&quot; not found." verbose="Include file: &quot;backend/gen9_context.hpp&quot; not found.">
            <location file="../backend/src/backend/gen9_context.cpp" line="23" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found.">
            <location file="../backend/src/backend/gen9_context.cpp" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_program.hpp&quot; not found." verbose="Include file: &quot;backend/gen_program.hpp&quot; not found.">
            <location file="../backend/src/backend/gen9_context.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen9_encoder.hpp&quot; not found." verbose="Include file: &quot;backend/gen9_encoder.hpp&quot; not found.">
            <location file="../backend/src/backend/gen9_encoder.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen9_instruction.hpp&quot; not found." verbose="Include file: &quot;backend/gen9_instruction.hpp&quot; not found.">
            <location file="../backend/src/backend/gen9_encoder.cpp" line="29" column="0"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4." verbose="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?" cwe="571" file0="../backend/src/backend/gen9_encoder.cpp">
            <location file="../backend/src/backend/gen9_encoder.cpp" line="174" column="27"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_context.hpp&quot; not found." verbose="Include file: &quot;backend/gen_context.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_program.hpp&quot; not found." verbose="Include file: &quot;backend/gen_program.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_defs.hpp&quot; not found." verbose="Include file: &quot;backend/gen_defs.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_encoder.hpp&quot; not found." verbose="Include file: &quot;backend/gen_encoder.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="29" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_scheduling.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_scheduling.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection_output.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection_output.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="31" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_reg_allocation.hpp&quot; not found." verbose="Include file: &quot;backend/gen_reg_allocation.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="32" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen/gen_mesa_disasm.h&quot; not found." verbose="Include file: &quot;backend/gen/gen_mesa_disasm.h&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="33" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="34" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/value.hpp&quot; not found." verbose="Include file: &quot;ir/value.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="35" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/profiling.hpp&quot; not found." verbose="Include file: &quot;ir/profiling.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="36" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="37" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hxx&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hxx&quot; not found.">
            <location file="../backend/src/backend/gen_context.cpp" line="114" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!uniform_src&apos; is always true" verbose="Condition &apos;!uniform_src&apos; is always true" cwe="571" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="530" column="21" info="Condition &apos;!uniform_src&apos; is always true"/>
            <location file="../backend/src/backend/gen_context.cpp" line="522" column="17" info="Assuming that condition &apos;!uniform_src&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!uniform_src&apos; is always true" verbose="Condition &apos;!uniform_src&apos; is always true" cwe="571" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="535" column="21" info="Condition &apos;!uniform_src&apos; is always true"/>
            <location file="../backend/src/backend/gen_context.cpp" line="522" column="17" info="Assuming that condition &apos;!uniform_src&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!uniform_src&apos; is always true" verbose="Condition &apos;!uniform_src&apos; is always true" cwe="571" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="541" column="23" info="Condition &apos;!uniform_src&apos; is always true"/>
            <location file="../backend/src/backend/gen_context.cpp" line="522" column="17" info="Assuming that condition &apos;!uniform_src&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!uniform_src&apos; is always true" verbose="Condition &apos;!uniform_src&apos; is always true" cwe="571" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="546" column="23" info="Condition &apos;!uniform_src&apos; is always true"/>
            <location file="../backend/src/backend/gen_context.cpp" line="522" column="17" info="Assuming that condition &apos;!uniform_src&apos; is not redundant"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%i in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="3732" column="7"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="3733" column="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;jip0&apos; can be reduced." verbose="The scope of the variable &apos;jip0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="1678" column="14"/>
            <symbol>jip0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;jip0&apos; can be reduced." verbose="The scope of the variable &apos;jip0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="3271" column="13"/>
            <symbol>jip0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;jip1&apos; can be reduced." verbose="The scope of the variable &apos;jip1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="3271" column="19"/>
            <symbol>jip1</symbol>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="384" column="35" info="Unsigned positive"/>
            <symbol>start_addr</symbol>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="417" column="35" info="Unsigned positive"/>
            <symbol>start_addr</symbol>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="461" column="35" info="Unsigned positive"/>
            <symbol>start_addr</symbol>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;start_addr&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="500" column="35" info="Unsigned positive"/>
            <symbol>start_addr</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;src&apos; shadows outer variable" verbose="Local variable &apos;src&apos; shadows outer variable" cwe="398" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="304" column="29" info="Shadow variable"/>
            <location file="../backend/src/backend/gen_context.cpp" line="278" column="23" info="Shadowed declaration"/>
            <symbol>src</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;src&apos; shadows outer variable" verbose="Local variable &apos;src&apos; shadows outer variable" cwe="398" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="321" column="29" info="Shadow variable"/>
            <location file="../backend/src/backend/gen_context.cpp" line="278" column="23" info="Shadowed declaration"/>
            <symbol>src</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;dst&apos; shadows outer variable" verbose="Local variable &apos;dst&apos; shadows outer variable" cwe="398" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="1890" column="25" info="Shadow variable"/>
            <location file="../backend/src/backend/gen_context.cpp" line="1885" column="23" info="Shadowed declaration"/>
            <symbol>dst</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;tmp&apos; shadows outer variable" verbose="Local variable &apos;tmp&apos; shadows outer variable" cwe="398" file0="../backend/src/backend/gen_context.cpp">
            <location file="../backend/src/backend/gen_context.cpp" line="2895" column="19" info="Shadow variable"/>
            <location file="../backend/src/backend/gen_context.cpp" line="2792" column="17" info="Shadowed declaration"/>
            <symbol>tmp</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_encoder.hpp&quot; not found." verbose="Include file: &quot;backend/gen_encoder.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_encoder.cpp" line="51" column="0"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4." verbose="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?" cwe="571" file0="../backend/src/backend/gen_encoder.cpp">
            <location file="../backend/src/backend/gen_encoder.cpp" line="391" column="25"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4." verbose="Logical disjunction always evaluates to true: elemNum &gt;= 1 || elemNum &lt;= 4. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?" cwe="571" file0="../backend/src/backend/gen_encoder.cpp">
            <location file="../backend/src/backend/gen_encoder.cpp" line="457" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_encoder.cpp">
            <location file="../backend/src/backend/gen_encoder.cpp" line="989" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_encoder.cpp">
            <location file="../backend/src/backend/gen_encoder.cpp" line="1002" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_encoder.cpp">
            <location file="../backend/src/backend/gen_encoder.cpp" line="1028" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_encoder.cpp">
            <location file="../backend/src/backend/gen_encoder.cpp" line="1034" column="38"/>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;insn_else&apos; can be declared as reference to const" verbose="Variable &apos;insn_else&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen_encoder.cpp">
            <location file="../backend/src/backend/gen_encoder.cpp" line="1002" column="30" info="Variable &apos;insn_else&apos; can be declared as reference to const"/>
            <symbol>insn_else</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;p&apos; can be declared as pointer to const" verbose="Parameter &apos;p&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_encoder.cpp">
            <location file="../backend/src/backend/gen_encoder.cpp" line="125" column="43" info="Parameter &apos;p&apos; can be declared as pointer to const"/>
            <symbol>p</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;p&apos; can be declared as pointer to const" verbose="Parameter &apos;p&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_encoder.cpp">
            <location file="../backend/src/backend/gen_encoder.cpp" line="146" column="43" info="Parameter &apos;p&apos; can be declared as pointer to const"/>
            <symbol>p</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_defs.hpp&quot; not found." verbose="Include file: &quot;backend/gen_defs.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_encoder.hpp&quot; not found." verbose="Include file: &quot;backend/gen_encoder.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="20" column="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="248" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="249" column="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="530" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="573" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="615" column="11"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="641" column="11"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="662" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="694" column="30"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pOut&apos; shadows outer variable" verbose="Local variable &apos;pOut&apos; shadows outer variable" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="346" column="30" info="Shadow variable"/>
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="341" column="28" info="Shadowed declaration"/>
            <symbol>pOut</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pOut&apos; shadows outer variable" verbose="Local variable &apos;pOut&apos; shadows outer variable" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="434" column="32" info="Shadow variable"/>
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="341" column="28" info="Shadowed declaration"/>
            <symbol>pOut</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;r&apos; can be declared as pointer to const" verbose="Variable &apos;r&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="530" column="26" info="Variable &apos;r&apos; can be declared as pointer to const"/>
            <symbol>r</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;r&apos; can be declared as pointer to const" verbose="Variable &apos;r&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="573" column="26" info="Variable &apos;r&apos; can be declared as pointer to const"/>
            <symbol>r</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src0&apos; can be declared as pointer to const" verbose="Parameter &apos;src0&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="581" column="73" info="Parameter &apos;src0&apos; can be declared as pointer to const"/>
            <symbol>src0</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;r&apos; can be declared as pointer to const" verbose="Variable &apos;r&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="590" column="26" info="Variable &apos;r&apos; can be declared as pointer to const"/>
            <symbol>r</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src1&apos; can be declared as pointer to const" verbose="Parameter &apos;src1&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="581" column="92" info="Parameter &apos;src1&apos; can be declared as pointer to const"/>
            <symbol>src1</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;dst&apos; can be declared as pointer to const" verbose="Parameter &apos;dst&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="649" column="53" info="Parameter &apos;dst&apos; can be declared as pointer to const"/>
            <symbol>dst</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src0&apos; can be declared as pointer to const" verbose="Parameter &apos;src0&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="649" column="71" info="Parameter &apos;src0&apos; can be declared as pointer to const"/>
            <symbol>src0</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src1&apos; can be declared as pointer to const" verbose="Parameter &apos;src1&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="649" column="90" info="Parameter &apos;src1&apos; can be declared as pointer to const"/>
            <symbol>src1</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;r&apos; can be declared as pointer to const" verbose="Variable &apos;r&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="662" column="26" info="Variable &apos;r&apos; can be declared as pointer to const"/>
            <symbol>r</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src&apos; can be declared as pointer to const" verbose="Parameter &apos;src&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="668" column="53" info="Parameter &apos;src&apos; can be declared as pointer to const"/>
            <symbol>src</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;p&apos; can be declared as pointer to const" verbose="Parameter &apos;p&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="668" column="37" info="Parameter &apos;p&apos; can be declared as pointer to const"/>
            <symbol>p</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;r&apos; can be declared as pointer to const" verbose="Variable &apos;r&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="694" column="26" info="Variable &apos;r&apos; can be declared as pointer to const"/>
            <symbol>r</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: &amp;key.index" verbose="Uninitialized variable: &amp;key.index" cwe="457" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="530" column="61"/>
            <symbol>&amp;key</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: &amp;key.index" verbose="Uninitialized variable: &amp;key.index" cwe="457" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="573" column="61"/>
            <symbol>&amp;key</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: &amp;key.index" verbose="Uninitialized variable: &amp;key.index" cwe="457" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="615" column="42"/>
            <symbol>&amp;key</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: &amp;key.index" verbose="Uninitialized variable: &amp;key.index" cwe="457" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="641" column="42"/>
            <symbol>&amp;key</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: &amp;key.index" verbose="Uninitialized variable: &amp;key.index" cwe="457" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="662" column="61"/>
            <symbol>&amp;key</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: &amp;key.index" verbose="Uninitialized variable: &amp;key.index" cwe="457" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="694" column="61"/>
            <symbol>&amp;key</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;ControlBits::pad&apos; is never used." verbose="union member &apos;ControlBits::pad&apos; is never used." cwe="563" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="265" column="16"/>
            <symbol>ControlBits::pad</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;DataTypeBits::pad&apos; is never used." verbose="union member &apos;DataTypeBits::pad&apos; is never used." cwe="563" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="298" column="16"/>
            <symbol>DataTypeBits::pad</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;Gen8DataTypeBits::pad&apos; is never used." verbose="union member &apos;Gen8DataTypeBits::pad&apos; is never used." cwe="563" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="312" column="16"/>
            <symbol>Gen8DataTypeBits::pad</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;SubRegBits::pad&apos; is never used." verbose="union member &apos;SubRegBits::pad&apos; is never used." cwe="563" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="322" column="16"/>
            <symbol>SubRegBits::pad</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;SrcRegBits::pad&apos; is never used." verbose="union member &apos;SrcRegBits::pad&apos; is never used." cwe="563" file0="../backend/src/backend/gen_insn_compact.cpp">
            <location file="../backend/src/backend/gen_insn_compact.cpp" line="334" column="16"/>
            <symbol>SrcRegBits::pad</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="88" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_reg_allocation.hpp&quot; not found." verbose="Include file: &quot;backend/gen_reg_allocation.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="89" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="90" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/intrusive_list.hpp&quot; not found." verbose="Include file: &quot;sys/intrusive_list.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="91" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hxx&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hxx&quot; not found.">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="431" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hxx&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hxx&quot; not found.">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="446" column="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ScheduleDAGNode::regNum&apos; is not initialized in the constructor." verbose="Member variable &apos;ScheduleDAGNode::regNum&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="119" column="12"/>
            <symbol>ScheduleDAGNode::regNum</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ScheduleListNode&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ScheduleListNode&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="111" column="12"/>
            <symbol>ScheduleListNode</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ScheduleDAGNode&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ScheduleDAGNode&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="119" column="12"/>
            <symbol>ScheduleDAGNode</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;listNode-&gt;depMode!=WRITE_AFTER_READ&apos; is always true" verbose="Condition &apos;listNode-&gt;depMode!=WRITE_AFTER_READ&apos; is always true" cwe="571" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="767" column="37" info="Condition &apos;listNode-&gt;depMode!=WRITE_AFTER_READ&apos; is always true"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="2" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="19" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="20" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="21" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="22" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="23" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="25" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="26" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="27" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="28" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="29" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="30" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="31" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="32" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="33" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="34" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="35" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="36" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="37" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="38" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="39" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="40" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="41" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="42" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="43" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="44" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="45" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="46" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="47" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="48" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="49" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="50" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="51" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="56" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="57" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="58" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="59" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="60" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="61" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="62" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="63" column="1"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="64" column="1"/>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;depNode&apos; can be declared as reference to const" verbose="Variable &apos;depNode&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="476" column="18" info="Variable &apos;depNode&apos; can be declared as reference to const"/>
            <symbol>depNode</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;node&apos; can be declared as pointer to const" verbose="Parameter &apos;node&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="121" column="37" info="Parameter &apos;node&apos; can be declared as pointer to const"/>
            <symbol>node</symbol>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="123" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::fill or std::generate algorithm instead of a raw loop." verbose="Consider using std::fill or std::generate algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_scheduling.cpp" line="265" column="75"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;LabelInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;LabelInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="2" column="1"/>
            <symbol>LabelInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UnaryInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;UnaryInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="3" column="1"/>
            <symbol>UnaryInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UnaryWithTempInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;UnaryWithTempInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="4" column="1"/>
            <symbol>UnaryWithTempInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;BinaryInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;BinaryInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="5" column="1"/>
            <symbol>BinaryInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;SimdShuffleInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;SimdShuffleInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="6" column="1"/>
            <symbol>SimdShuffleInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;BinaryWithTempInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;BinaryWithTempInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="7" column="1"/>
            <symbol>BinaryWithTempInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TernaryInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;TernaryInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="8" column="1"/>
            <symbol>TernaryInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64ShiftInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;I64ShiftInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="9" column="1"/>
            <symbol>I64ShiftInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64HADDInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;I64HADDInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="10" column="1"/>
            <symbol>I64HADDInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64RHADDInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;I64RHADDInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="11" column="1"/>
            <symbol>I64RHADDInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64ToFloatInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;I64ToFloatInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="12" column="1"/>
            <symbol>I64ToFloatInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FloatToI64InstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;FloatToI64InstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="13" column="1"/>
            <symbol>FloatToI64InstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64MULHIInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;I64MULHIInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="14" column="1"/>
            <symbol>I64MULHIInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64MADSATInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;I64MADSATInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="15" column="1"/>
            <symbol>I64MADSATInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;CompareInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;CompareInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="16" column="1"/>
            <symbol>CompareInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64CompareInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;I64CompareInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="17" column="1"/>
            <symbol>I64CompareInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64DIVREMInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;I64DIVREMInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="18" column="1"/>
            <symbol>I64DIVREMInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;JumpInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;JumpInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="19" column="1"/>
            <symbol>JumpInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;IndirectMoveInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;IndirectMoveInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="20" column="1"/>
            <symbol>IndirectMoveInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;EotInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;EotInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="21" column="1"/>
            <symbol>EotInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;NoOpInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;NoOpInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="22" column="1"/>
            <symbol>NoOpInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;WaitInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;WaitInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="23" column="1"/>
            <symbol>WaitInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;MathInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;MathInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="24" column="1"/>
            <symbol>MathInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;BarrierInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;BarrierInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="25" column="1"/>
            <symbol>BarrierInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FenceInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;FenceInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="26" column="1"/>
            <symbol>FenceInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;Read64InstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;Read64InstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="27" column="1"/>
            <symbol>Read64InstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;Write64InstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;Write64InstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="28" column="1"/>
            <symbol>Write64InstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;Read64A64InstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;Read64A64InstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="29" column="1"/>
            <symbol>Read64A64InstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;Write64A64InstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;Write64A64InstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="30" column="1"/>
            <symbol>Write64A64InstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UntypedReadInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;UntypedReadInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="31" column="1"/>
            <symbol>UntypedReadInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UntypedWriteInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;UntypedWriteInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="32" column="1"/>
            <symbol>UntypedWriteInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UntypedReadA64InstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;UntypedReadA64InstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="33" column="1"/>
            <symbol>UntypedReadA64InstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UntypedWriteA64InstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;UntypedWriteA64InstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="34" column="1"/>
            <symbol>UntypedWriteA64InstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ByteGatherA64InstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;ByteGatherA64InstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="35" column="1"/>
            <symbol>ByteGatherA64InstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ByteScatterA64InstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;ByteScatterA64InstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="36" column="1"/>
            <symbol>ByteScatterA64InstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ByteGatherInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;ByteGatherInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="37" column="1"/>
            <symbol>ByteGatherInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ByteScatterInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;ByteScatterInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="38" column="1"/>
            <symbol>ByteScatterInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DWordGatherInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;DWordGatherInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="39" column="1"/>
            <symbol>DWordGatherInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;PackByteInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;PackByteInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="40" column="1"/>
            <symbol>PackByteInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UnpackByteInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;UnpackByteInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="41" column="1"/>
            <symbol>UnpackByteInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;PackLongInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;PackLongInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="42" column="1"/>
            <symbol>PackLongInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UnpackLongInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;UnpackLongInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="43" column="1"/>
            <symbol>UnpackLongInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;SampleInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;SampleInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="44" column="1"/>
            <symbol>SampleInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;VmeInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;VmeInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="45" column="1"/>
            <symbol>VmeInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ImeInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;ImeInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="46" column="1"/>
            <symbol>ImeInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TypedWriteInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;TypedWriteInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="47" column="1"/>
            <symbol>TypedWriteInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;SpillRegInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;SpillRegInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="48" column="1"/>
            <symbol>SpillRegInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UnSpillRegInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;UnSpillRegInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="49" column="1"/>
            <symbol>UnSpillRegInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;AtomicInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;AtomicInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="50" column="1"/>
            <symbol>AtomicInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;AtomicA64InstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;AtomicA64InstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="51" column="1"/>
            <symbol>AtomicA64InstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64MULInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;I64MULInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="52" column="1"/>
            <symbol>I64MULInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64SATADDInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;I64SATADDInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="53" column="1"/>
            <symbol>I64SATADDInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64SATSUBInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;I64SATSUBInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="54" column="1"/>
            <symbol>I64SATSUBInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;F64DIVInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;F64DIVInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="55" column="1"/>
            <symbol>F64DIVInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;CalcTimestampInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;CalcTimestampInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="56" column="1"/>
            <symbol>CalcTimestampInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;StoreProfilingInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;StoreProfilingInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="57" column="1"/>
            <symbol>StoreProfilingInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;WorkGroupOpInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;WorkGroupOpInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="58" column="1"/>
            <symbol>WorkGroupOpInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;SubGroupOpInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;SubGroupOpInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="59" column="1"/>
            <symbol>SubGroupOpInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;PrintfInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;PrintfInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="60" column="1"/>
            <symbol>PrintfInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;OBReadInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;OBReadInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="61" column="1"/>
            <symbol>OBReadInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;OBWriteInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;OBWriteInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="62" column="1"/>
            <symbol>OBWriteInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;MBReadInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;MBReadInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="63" column="1"/>
            <symbol>MBReadInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;MBWriteInstructionLatency&apos; is assigned a value that is never used." verbose="Variable &apos;MBWriteInstructionLatency&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="64" column="1"/>
            <symbol>MBWriteInstructionLatency</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;LabelInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;LabelInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="2" column="1"/>
            <symbol>LabelInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UnaryInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;UnaryInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="3" column="1"/>
            <symbol>UnaryInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UnaryWithTempInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;UnaryWithTempInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="4" column="1"/>
            <symbol>UnaryWithTempInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;BinaryInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;BinaryInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="5" column="1"/>
            <symbol>BinaryInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;SimdShuffleInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;SimdShuffleInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="6" column="1"/>
            <symbol>SimdShuffleInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;BinaryWithTempInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;BinaryWithTempInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="7" column="1"/>
            <symbol>BinaryWithTempInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TernaryInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;TernaryInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="8" column="1"/>
            <symbol>TernaryInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64ShiftInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;I64ShiftInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="9" column="1"/>
            <symbol>I64ShiftInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64HADDInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;I64HADDInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="10" column="1"/>
            <symbol>I64HADDInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64RHADDInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;I64RHADDInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="11" column="1"/>
            <symbol>I64RHADDInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64ToFloatInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;I64ToFloatInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="12" column="1"/>
            <symbol>I64ToFloatInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FloatToI64InstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;FloatToI64InstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="13" column="1"/>
            <symbol>FloatToI64InstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64MULHIInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;I64MULHIInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="14" column="1"/>
            <symbol>I64MULHIInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64MADSATInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;I64MADSATInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="15" column="1"/>
            <symbol>I64MADSATInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;CompareInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;CompareInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="16" column="1"/>
            <symbol>CompareInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64CompareInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;I64CompareInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="17" column="1"/>
            <symbol>I64CompareInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64DIVREMInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;I64DIVREMInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="18" column="1"/>
            <symbol>I64DIVREMInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;JumpInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;JumpInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="19" column="1"/>
            <symbol>JumpInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;IndirectMoveInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;IndirectMoveInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="20" column="1"/>
            <symbol>IndirectMoveInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;EotInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;EotInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="21" column="1"/>
            <symbol>EotInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;NoOpInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;NoOpInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="22" column="1"/>
            <symbol>NoOpInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;WaitInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;WaitInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="23" column="1"/>
            <symbol>WaitInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;MathInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;MathInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="24" column="1"/>
            <symbol>MathInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;BarrierInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;BarrierInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="25" column="1"/>
            <symbol>BarrierInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FenceInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;FenceInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="26" column="1"/>
            <symbol>FenceInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;Read64InstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;Read64InstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="27" column="1"/>
            <symbol>Read64InstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;Write64InstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;Write64InstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="28" column="1"/>
            <symbol>Write64InstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;Read64A64InstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;Read64A64InstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="29" column="1"/>
            <symbol>Read64A64InstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;Write64A64InstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;Write64A64InstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="30" column="1"/>
            <symbol>Write64A64InstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UntypedReadInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;UntypedReadInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="31" column="1"/>
            <symbol>UntypedReadInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UntypedWriteInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;UntypedWriteInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="32" column="1"/>
            <symbol>UntypedWriteInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UntypedReadA64InstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;UntypedReadA64InstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="33" column="1"/>
            <symbol>UntypedReadA64InstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UntypedWriteA64InstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;UntypedWriteA64InstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="34" column="1"/>
            <symbol>UntypedWriteA64InstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ByteGatherA64InstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;ByteGatherA64InstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="35" column="1"/>
            <symbol>ByteGatherA64InstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ByteScatterA64InstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;ByteScatterA64InstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="36" column="1"/>
            <symbol>ByteScatterA64InstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ByteGatherInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;ByteGatherInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="37" column="1"/>
            <symbol>ByteGatherInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ByteScatterInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;ByteScatterInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="38" column="1"/>
            <symbol>ByteScatterInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;DWordGatherInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;DWordGatherInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="39" column="1"/>
            <symbol>DWordGatherInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;PackByteInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;PackByteInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="40" column="1"/>
            <symbol>PackByteInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UnpackByteInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;UnpackByteInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="41" column="1"/>
            <symbol>UnpackByteInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;PackLongInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;PackLongInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="42" column="1"/>
            <symbol>PackLongInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UnpackLongInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;UnpackLongInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="43" column="1"/>
            <symbol>UnpackLongInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;SampleInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;SampleInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="44" column="1"/>
            <symbol>SampleInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;VmeInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;VmeInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="45" column="1"/>
            <symbol>VmeInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ImeInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;ImeInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="46" column="1"/>
            <symbol>ImeInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;TypedWriteInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;TypedWriteInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="47" column="1"/>
            <symbol>TypedWriteInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;SpillRegInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;SpillRegInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="48" column="1"/>
            <symbol>SpillRegInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;UnSpillRegInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;UnSpillRegInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="49" column="1"/>
            <symbol>UnSpillRegInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;AtomicInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;AtomicInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="50" column="1"/>
            <symbol>AtomicInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;AtomicA64InstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;AtomicA64InstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="51" column="1"/>
            <symbol>AtomicA64InstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64MULInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;I64MULInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="52" column="1"/>
            <symbol>I64MULInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64SATADDInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;I64SATADDInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="53" column="1"/>
            <symbol>I64SATADDInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I64SATSUBInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;I64SATSUBInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="54" column="1"/>
            <symbol>I64SATSUBInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;F64DIVInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;F64DIVInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="55" column="1"/>
            <symbol>F64DIVInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;CalcTimestampInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;CalcTimestampInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="56" column="1"/>
            <symbol>CalcTimestampInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;StoreProfilingInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;StoreProfilingInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="57" column="1"/>
            <symbol>StoreProfilingInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;WorkGroupOpInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;WorkGroupOpInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="58" column="1"/>
            <symbol>WorkGroupOpInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;SubGroupOpInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;SubGroupOpInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="59" column="1"/>
            <symbol>SubGroupOpInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;PrintfInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;PrintfInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="60" column="1"/>
            <symbol>PrintfInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;OBReadInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;OBReadInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="61" column="1"/>
            <symbol>OBReadInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;OBWriteInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;OBWriteInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="62" column="1"/>
            <symbol>OBWriteInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;MBReadInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;MBReadInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="63" column="1"/>
            <symbol>MBReadInstructionThroughput</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;MBWriteInstructionThroughput&apos; is assigned a value that is never used." verbose="Variable &apos;MBWriteInstructionThroughput&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_insn_scheduling.cpp">
            <location file="../backend/src/backend/gen_insn_gen7_schedule_info.hxx" line="64" column="1"/>
            <symbol>MBWriteInstructionThroughput</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection.cpp" line="98" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_context.hpp&quot; not found." verbose="Include file: &quot;backend/gen_context.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection.cpp" line="99" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection.cpp" line="100" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/liveness.hpp&quot; not found." verbose="Include file: &quot;ir/liveness.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection.cpp" line="101" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/profile.hpp&quot; not found." verbose="Include file: &quot;ir/profile.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection.cpp" line="102" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection.cpp" line="103" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/vector.hpp&quot; not found." verbose="Include file: &quot;sys/vector.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection.cpp" line="104" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="failed to expand &apos;ALU1&apos;, Wrong number of parameters for macro &apos;ALU1&apos;." verbose="failed to expand &apos;ALU1&apos;, Wrong number of parameters for macro &apos;ALU1&apos;.">
            <location file="../backend/src/backend/gen_insn_selection.cpp" line="569" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_if_opt.cpp" line="2" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_context.hpp&quot; not found." verbose="Include file: &quot;backend/gen_context.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_if_opt.cpp" line="3" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_if_opt.cpp" line="4" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/liveness.hpp&quot; not found." verbose="Include file: &quot;ir/liveness.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_if_opt.cpp" line="5" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/profile.hpp&quot; not found." verbose="Include file: &quot;ir/profile.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_if_opt.cpp" line="6" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_if_opt.cpp" line="7" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/vector.hpp&quot; not found." verbose="Include file: &quot;sys/vector.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_if_opt.cpp" line="8" column="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;IfOptimizer::optimized&apos; is not initialized in the constructor." verbose="Member variable &apos;IfOptimizer::optimized&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/backend/gen_insn_selection_if_opt.cpp">
            <location file="../backend/src/backend/gen_insn_selection_if_opt.cpp" line="18" column="5"/>
            <symbol>IfOptimizer::optimized</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;insn&apos; can be declared as reference to const" verbose="Variable &apos;insn&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen_insn_selection_if_opt.cpp">
            <location file="../backend/src/backend/gen_insn_selection_if_opt.cpp" line="36" column="18" info="Variable &apos;insn&apos; can be declared as reference to const"/>
            <symbol>insn</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="2" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_context.hpp&quot; not found." verbose="Include file: &quot;backend/gen_context.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="3" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="4" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/liveness.hpp&quot; not found." verbose="Include file: &quot;ir/liveness.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="5" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/profile.hpp&quot; not found." verbose="Include file: &quot;ir/profile.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="6" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="7" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/vector.hpp&quot; not found." verbose="Include file: &quot;sys/vector.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="8" column="0"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;SelBasicBlockOptimizer::doZeroAddedOptimization&apos;" verbose="Unused private function: &apos;SelBasicBlockOptimizer::doZeroAddedOptimization&apos;" cwe="398" file0="../backend/src/backend/gen_insn_selection_optimize.cpp">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="107" column="10"/>
            <symbol>SelBasicBlockOptimizer::doZeroAddedOptimization</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;run&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;run&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="../backend/src/backend/gen_insn_selection_optimize.cpp">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="93" column="18" info="Function in derived class"/>
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="75" column="18" info="Virtual function in base class"/>
            <symbol>run</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;run&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;run&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="../backend/src/backend/gen_insn_selection_optimize.cpp">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="335" column="18" info="Function in derived class"/>
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="75" column="18" info="Virtual function in base class"/>
            <symbol>run</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;run&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;run&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="../backend/src/backend/gen_insn_selection_optimize.cpp">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="347" column="18" info="Function in derived class"/>
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="335" column="18" info="Virtual function in base class"/>
            <symbol>run</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;pair&apos; can be declared as reference to const" verbose="Variable &apos;pair&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen_insn_selection_optimize.cpp">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="126" column="16" info="Variable &apos;pair&apos; can be declared as reference to const"/>
            <symbol>pair</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;pair&apos; can be declared as reference to const" verbose="Variable &apos;pair&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen_insn_selection_optimize.cpp">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="367" column="16" info="Variable &apos;pair&apos; can be declared as reference to const"/>
            <symbol>pair</symbol>
        </error>
        <error id="constParameterReference" severity="style" msg="Parameter &apos;insn&apos; can be declared as reference to const" verbose="Parameter &apos;insn&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen_insn_selection_optimize.cpp">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="507" column="89" info="Parameter &apos;insn&apos; can be declared as reference to const"/>
            <symbol>insn</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_output.cpp" line="1" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection_output.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection_output.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_output.cpp" line="2" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_output.cpp" line="3" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/intrusive_list.hpp&quot; not found." verbose="Include file: &quot;sys/intrusive_list.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_output.cpp" line="4" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hxx&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hxx&quot; not found.">
            <location file="../backend/src/backend/gen_insn_selection_output.cpp" line="117" column="0"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;sel&apos; can be declared as pointer to const" verbose="Parameter &apos;sel&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_insn_selection_output.cpp">
            <location file="../backend/src/backend/gen_insn_selection_output.cpp" line="215" column="54" info="Parameter &apos;sel&apos; can be declared as pointer to const"/>
            <symbol>sel</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/program.h&quot; not found." verbose="Include file: &quot;backend/program.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="46" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_program.h&quot; not found." verbose="Include file: &quot;backend/gen_program.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="47" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_program.hpp&quot; not found." verbose="Include file: &quot;backend/gen_program.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="48" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_context.hpp&quot; not found." verbose="Include file: &quot;backend/gen_context.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="49" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen75_context.hpp&quot; not found." verbose="Include file: &quot;backend/gen75_context.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="50" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen8_context.hpp&quot; not found." verbose="Include file: &quot;backend/gen8_context.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="51" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen9_context.hpp&quot; not found." verbose="Include file: &quot;backend/gen9_context.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="52" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_defs.hpp&quot; not found." verbose="Include file: &quot;backend/gen_defs.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="53" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen/gen_mesa_disasm.h&quot; not found." verbose="Include file: &quot;backend/gen/gen_mesa_disasm.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="54" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_reg_allocation.hpp&quot; not found." verbose="Include file: &quot;backend/gen_reg_allocation.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="55" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="56" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="64" column="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="81" column="13"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="345" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="409" column="24"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="420" column="17"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;CodeGenStrategy::simdWidth&apos; is never used." verbose="struct member &apos;CodeGenStrategy::simdWidth&apos; is never used." cwe="563" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="154" column="14"/>
            <symbol>CodeGenStrategy::simdWidth</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;CodeGenStrategy::reservedSpillRegs&apos; is never used." verbose="struct member &apos;CodeGenStrategy::reservedSpillRegs&apos; is never used." cwe="563" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="155" column="14"/>
            <symbol>CodeGenStrategy::reservedSpillRegs</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;CodeGenStrategy::limitRegisterPressure&apos; is never used." verbose="struct member &apos;CodeGenStrategy::limitRegisterPressure&apos; is never used." cwe="563" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="156" column="10"/>
            <symbol>CodeGenStrategy::limitRegisterPressure</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Config/llvm-config.h&quot; not found." verbose="Include file: &quot;llvm/Config/llvm-config.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/LLVMContext.h&quot; not found." verbose="Include file: &quot;llvm/IR/LLVMContext.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/Module.h&quot; not found." verbose="Include file: &quot;llvm/IR/Module.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/DataLayout.h&quot; not found." verbose="Include file: &quot;llvm/IR/DataLayout.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="29" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm-c/Linker.h&quot; not found." verbose="Include file: &quot;llvm-c/Linker.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm-c/BitReader.h&quot; not found." verbose="Include file: &quot;llvm-c/BitReader.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="31" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm-c/BitWriter.h&quot; not found." verbose="Include file: &quot;llvm-c/BitWriter.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="32" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Transforms/Utils/Cloning.h&quot; not found." verbose="Include file: &quot;llvm/Transforms/Utils/Cloning.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="33" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Bitcode/ReaderWriter.h&quot; not found." verbose="Include file: &quot;llvm/Bitcode/ReaderWriter.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="37" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/raw_ostream.h&quot; not found." verbose="Include file: &quot;llvm/Support/raw_ostream.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="39" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/ADT/StringRef.h&quot; not found." verbose="Include file: &quot;llvm/ADT/StringRef.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="40" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/MemoryBuffer.h&quot; not found." verbose="Include file: &quot;llvm/Support/MemoryBuffer.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="41" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/SourceMgr.h&quot; not found." verbose="Include file: &quot;llvm/Support/SourceMgr.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="42" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IRReader/IRReader.h&quot; not found." verbose="Include file: &quot;llvm/IRReader/IRReader.h&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="43" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/llvm_to_gen.hpp&quot; not found." verbose="Include file: &quot;llvm/llvm_to_gen.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="59" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found." verbose="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_program.cpp" line="60" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;options!=NULL&apos; is always true" verbose="Condition &apos;options!=NULL&apos; is always true" cwe="571" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="595" column="19" info="Condition &apos;options!=NULL&apos; is always true"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="108" column="14"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="464" column="17"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="528" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="538" column="8"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="542" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="543" column="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="599" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="619" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;start&apos; can be reduced." verbose="The scope of the variable &apos;start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="586" column="12"/>
            <symbol>start</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;end&apos; can be reduced." verbose="The scope of the variable &apos;end&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="586" column="23"/>
            <symbol>end</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;bin_str&apos; can be declared as reference to const" verbose="Variable &apos;bin_str&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="462" column="20" info="Variable &apos;bin_str&apos; can be declared as reference to const"/>
            <symbol>bin_str</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;p&apos; can be declared as pointer to const" verbose="Variable &apos;p&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="590" column="13" info="Variable &apos;p&apos; can be declared as pointer to const"/>
            <symbol>p</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;errSize&apos; is assigned a value that is never used." verbose="Variable &apos;errSize&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_program.cpp">
            <location file="../backend/src/backend/gen_program.cpp" line="540" column="15"/>
            <symbol>errSize</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/profile.hpp&quot; not found." verbose="Include file: &quot;ir/profile.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found." verbose="Include file: &quot;backend/gen_insn_selection.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_reg_allocation.hpp&quot; not found." verbose="Include file: &quot;backend/gen_reg_allocation.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/gen_register.hpp&quot; not found." verbose="Include file: &quot;backend/gen_register.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/program.hpp&quot; not found." verbose="Include file: &quot;backend/program.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="29" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/exception.hpp&quot; not found." verbose="Include file: &quot;sys/exception.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="31" column="0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;GenRegInterval&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;GenRegInterval&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="51" column="12"/>
            <symbol>GenRegInterval</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Opaque&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Opaque&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="75" column="5"/>
            <symbol>Opaque</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;grfOffset&apos; can be reduced." verbose="The scope of the variable &apos;grfOffset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="334" column="19"/>
            <symbol>grfOffset</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;reg&apos; shadows outer variable" verbose="Local variable &apos;reg&apos; shadows outer variable" cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="834" column="30" info="Shadow variable"/>
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="797" column="26" info="Shadowed declaration"/>
            <symbol>reg</symbol>
        </error>
        <error id="constParameterReference" severity="style" msg="Parameter &apos;holeRegTag&apos; can be declared as reference to const" verbose="Parameter &apos;holeRegTag&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="292" column="78" info="Parameter &apos;holeRegTag&apos; can be declared as reference to const"/>
            <symbol>holeRegTag</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;block&apos; can be declared as reference to const" verbose="Variable &apos;block&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="427" column="16" info="Variable &apos;block&apos; can be declared as reference to const"/>
            <symbol>block</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;it&apos; can be declared as reference to const" verbose="Variable &apos;it&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="623" column="22" info="Variable &apos;it&apos; can be declared as reference to const"/>
            <symbol>it</symbol>
        </error>
        <error id="constParameterReference" severity="style" msg="Parameter &apos;cand&apos; can be declared as reference to const" verbose="Parameter &apos;cand&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1026" column="56" info="Parameter &apos;cand&apos; can be declared as reference to const"/>
            <symbol>cand</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;blockRegInterval&apos; can be declared as reference to const" verbose="Variable &apos;blockRegInterval&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1366" column="31" info="Variable &apos;blockRegInterval&apos; can be declared as reference to const"/>
            <symbol>blockRegInterval</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;i&apos; can be declared as reference to const" verbose="Variable &apos;i&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1545" column="15" info="Variable &apos;i&apos; can be declared as reference to const"/>
            <symbol>i</symbol>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1028" column="0"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1478" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1479" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1480" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1481" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1482" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1483" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1484" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1485" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1486" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1487" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1488" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1489" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1491" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1492" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1493" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1494" column="7"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1496" column="9"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="1497" column="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;grfOffset&apos; is assigned a value that is never used." verbose="Variable &apos;grfOffset&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/gen_reg_allocation.cpp">
            <location file="../backend/src/backend/gen_reg_allocation.cpp" line="334" column="29"/>
            <symbol>grfOffset</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/program.h&quot; not found." verbose="Include file: &quot;backend/program.h&quot; not found.">
            <location file="../backend/src/backend/program.hpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/context.hpp&quot; not found." verbose="Include file: &quot;backend/context.hpp&quot; not found.">
            <location file="../backend/src/backend/program.hpp" line="29" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/constant.hpp&quot; not found." verbose="Include file: &quot;ir/constant.hpp&quot; not found.">
            <location file="../backend/src/backend/program.hpp" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/backend/program.hpp" line="31" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/backend/program.hpp" line="32" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/printf.hpp&quot; not found." verbose="Include file: &quot;ir/printf.hpp&quot; not found.">
            <location file="../backend/src/backend/program.hpp" line="33" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/sampler.hpp&quot; not found." verbose="Include file: &quot;ir/sampler.hpp&quot; not found.">
            <location file="../backend/src/backend/program.hpp" line="34" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/vector.hpp&quot; not found." verbose="Include file: &quot;sys/vector.hpp&quot; not found.">
            <location file="../backend/src/backend/program.hpp" line="35" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/platform.hpp&quot; not found." verbose="Include file: &quot;sys/platform.hpp&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="29" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/liveness.hpp&quot; not found." verbose="Include file: &quot;ir/liveness.hpp&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/value.hpp&quot; not found." verbose="Include file: &quot;ir/value.hpp&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="31" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="32" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/printf.hpp&quot; not found." verbose="Include file: &quot;ir/printf.hpp&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="33" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;src/cl_device_data.h&quot; not found." verbose="Include file: &quot;src/cl_device_data.h&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="34" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;src/GBEConfig.h&quot; not found." verbose="Include file: &quot;src/GBEConfig.h&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="76" column="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Kernel::simdWidth&apos; is not initialized in the constructor." verbose="Member variable &apos;Kernel::simdWidth&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="80" column="11"/>
            <symbol>Kernel::simdWidth</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Kernel::scratchSize&apos; is not initialized in the constructor." verbose="Member variable &apos;Kernel::scratchSize&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="80" column="11"/>
            <symbol>Kernel::scratchSize</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Kernel::oclVersion&apos; is not initialized in the constructor." verbose="Member variable &apos;Kernel::oclVersion&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="80" column="11"/>
            <symbol>Kernel::oclVersion</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Kernel::compileWgSize&apos; is not initialized in the constructor." verbose="Member variable &apos;Kernel::compileWgSize&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="80" column="11"/>
            <symbol>Kernel::compileWgSize</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PatchInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PatchInfo&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.hpp" line="67" column="12"/>
            <symbol>PatchInfo</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.hpp" line="149" column="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.hpp" line="165" column="31"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="343" column="19" info="Shadow variable"/>
            <location file="../backend/src/backend/program.cpp" line="295" column="18" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;sz&apos; shadows outer variable" verbose="Local variable &apos;sz&apos; shadows outer variable" cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="367" column="16" info="Shadow variable"/>
            <location file="../backend/src/backend/program.cpp" line="299" column="14" info="Shadowed declaration"/>
            <symbol>sz</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;sz&apos; shadows outer variable" verbose="Local variable &apos;sz&apos; shadows outer variable" cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="380" column="16" info="Shadow variable"/>
            <location file="../backend/src/backend/program.cpp" line="299" column="14" info="Shadowed declaration"/>
            <symbol>sz</symbol>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;i0&apos; should be passed by const reference." verbose="Parameter &apos;i0&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.hpp" line="76" column="36" info="Function parameter &apos;i0&apos; should be passed by const reference."/>
            <symbol>i0</symbol>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;i1&apos; should be passed by const reference." verbose="Parameter &apos;i1&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.hpp" line="76" column="50" info="Function parameter &apos;i1&apos; should be passed by const reference."/>
            <symbol>i1</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;arg&apos; can be declared as reference to const" verbose="Variable &apos;arg&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="579" column="23" info="Variable &apos;arg&apos; can be declared as reference to const"/>
            <symbol>arg</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;patch&apos; can be declared as reference to const" verbose="Variable &apos;patch&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="590" column="18" info="Variable &apos;patch&apos; can be declared as reference to const"/>
            <symbol>patch</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/llvm_to_gen.hpp&quot; not found." verbose="Include file: &quot;llvm/llvm_to_gen.hpp&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="37" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Config/llvm-config.h&quot; not found." verbose="Include file: &quot;llvm/Config/llvm-config.h&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="38" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/Threading.h&quot; not found." verbose="Include file: &quot;llvm/Support/Threading.h&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="39" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/ManagedStatic.h&quot; not found." verbose="Include file: &quot;llvm/Support/ManagedStatic.h&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="40" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Transforms/Utils/Cloning.h&quot; not found." verbose="Include file: &quot;llvm/Transforms/Utils/Cloning.h&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="41" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/LLVMContext.h&quot; not found." verbose="Include file: &quot;llvm/IR/LLVMContext.h&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="42" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IRReader/IRReader.h&quot; not found." verbose="Include file: &quot;llvm/IRReader/IRReader.h&quot; not found.">
            <location file="../backend/src/backend/program.cpp" line="43" column="0"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="1178" column="9"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;bFastMath&apos; is always false" verbose="Condition &apos;bFastMath&apos; is always false" cwe="570" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="654" column="8" info="Condition &apos;bFastMath&apos; is always false"/>
            <location file="../backend/src/backend/program.cpp" line="630" column="20" info="Assuming container is not empty"/>
            <location file="../backend/src/backend/program.cpp" line="628" column="22" info="Assignment &apos;bFastMath=false&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;str.size()&gt;4&apos; is always true" verbose="Condition &apos;str.size()&gt;4&apos; is always true" cwe="571" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="939" column="26" info="Condition &apos;str.size()&gt;4&apos; is always true"/>
            <location file="../backend/src/backend/program.cpp" line="936" column="24" info="Assuming that condition &apos;str.size()&gt;4&apos; is not redundant"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="865" column="21"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;err&apos; shadows outer argument" verbose="Local variable &apos;err&apos; shadows outer argument" cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="762" column="19" info="Shadow variable"/>
            <location file="../backend/src/backend/program.cpp" line="624" column="159" info="Shadowed declaration"/>
            <symbol>err</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;err&apos; shadows outer argument" verbose="Local variable &apos;err&apos; shadows outer argument" cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="774" column="19" info="Shadow variable"/>
            <location file="../backend/src/backend/program.cpp" line="624" column="159" info="Shadowed declaration"/>
            <symbol>err</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;s&apos; can be declared as reference to const" verbose="Variable &apos;s&apos; can be declared as reference to const" cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="630" column="16" info="Variable &apos;s&apos; can be declared as reference to const"/>
            <symbol>s</symbol>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::transform algorithm instead of a raw loop." verbose="Consider using std::transform algorithm instead of a raw loop." cwe="398" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="631" column="12"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stringSize&apos; is assigned a value that is never used." verbose="Variable &apos;stringSize&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/backend/program.cpp">
            <location file="../backend/src/backend/program.cpp" line="1178" column="20"/>
            <symbol>stringSize</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/src/sys/platform.hpp&quot; not found." verbose="Include file: &quot;backend/src/sys/platform.hpp&quot; not found.">
            <location file="../backend/src/gbe_bin_generater.cpp" line="41" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;src/cl_device_data.h&quot; not found." verbose="Include file: &quot;src/cl_device_data.h&quot; not found.">
            <location file="../backend/src/gbe_bin_generater.cpp" line="42" column="0"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;program_build_instance::fd&apos; is not assigned a value in &apos;program_build_instance::operator=&apos;." verbose="Member variable &apos;program_build_instance::fd&apos; is not assigned a value in &apos;program_build_instance::operator=&apos;." cwe="398" file0="../backend/src/gbe_bin_generater.cpp">
            <location file="../backend/src/gbe_bin_generater.cpp" line="104" column="29"/>
            <symbol>program_build_instance::fd</symbol>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;program_build_instance::file_len&apos; is not assigned a value in &apos;program_build_instance::operator=&apos;." verbose="Member variable &apos;program_build_instance::file_len&apos; is not assigned a value in &apos;program_build_instance::operator=&apos;." cwe="398" file0="../backend/src/gbe_bin_generater.cpp">
            <location file="../backend/src/gbe_bin_generater.cpp" line="104" column="29"/>
            <symbol>program_build_instance::file_len</symbol>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;program_build_instance::code&apos; is not assigned a value in &apos;program_build_instance::operator=&apos;." verbose="Member variable &apos;program_build_instance::code&apos; is not assigned a value in &apos;program_build_instance::operator=&apos;." cwe="398" file0="../backend/src/gbe_bin_generater.cpp">
            <location file="../backend/src/gbe_bin_generater.cpp" line="104" column="29"/>
            <symbol>program_build_instance::code</symbol>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;program_build_instance::gbe_prog&apos; is not assigned a value in &apos;program_build_instance::operator=&apos;." verbose="Member variable &apos;program_build_instance::gbe_prog&apos; is not assigned a value in &apos;program_build_instance::operator=&apos;." cwe="398" file0="../backend/src/gbe_bin_generater.cpp">
            <location file="../backend/src/gbe_bin_generater.cpp" line="104" column="29"/>
            <symbol>program_build_instance::gbe_prog</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_generater.cpp">
            <location file="../backend/src/gbe_bin_generater.cpp" line="73" column="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_generater.cpp">
            <location file="../backend/src/gbe_bin_generater.cpp" line="226" column="62"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_generater.cpp">
            <location file="../backend/src/gbe_bin_generater.cpp" line="259" column="62"/>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;address&apos; can be declared as pointer to const" verbose="Variable &apos;address&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/gbe_bin_generater.cpp">
            <location file="../backend/src/gbe_bin_generater.cpp" line="294" column="12" info="Variable &apos;address&apos; can be declared as pointer to const"/>
            <symbol>address</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/alloc.hpp&quot; not found." verbose="Include file: &quot;sys/alloc.hpp&quot; not found.">
            <location file="../backend/src/sys/alloc.cpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/atomic.hpp&quot; not found." verbose="Include file: &quot;sys/atomic.hpp&quot; not found.">
            <location file="../backend/src/sys/alloc.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/mutex.hpp&quot; not found." verbose="Include file: &quot;sys/mutex.hpp&quot; not found.">
            <location file="../backend/src/sys/alloc.cpp" line="29" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/sys/cvar.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/assert.hpp&quot; not found." verbose="Include file: &quot;sys/assert.hpp&quot; not found.">
            <location file="../backend/src/sys/assert.cpp" line="59" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/exception.hpp&quot; not found." verbose="Include file: &quot;sys/exception.hpp&quot; not found.">
            <location file="../backend/src/sys/assert.cpp" line="60" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/platform.hpp&quot; not found." verbose="Include file: &quot;sys/platform.hpp&quot; not found.">
            <location file="../backend/src/sys/assert.cpp" line="61" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/platform.hpp&quot; not found." verbose="Include file: &quot;sys/platform.hpp&quot; not found.">
            <location file="../backend/src/sys/platform.cpp" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/intrinsics.hpp&quot; not found." verbose="Include file: &quot;sys/intrinsics.hpp&quot; not found.">
            <location file="../backend/src/sys/platform.cpp" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/vector.hpp&quot; not found." verbose="Include file: &quot;sys/vector.hpp&quot; not found.">
            <location file="../backend/src/ir/constant.hpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/map.hpp&quot; not found." verbose="Include file: &quot;sys/map.hpp&quot; not found.">
            <location file="../backend/src/ir/printf.hpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/vector.hpp&quot; not found." verbose="Include file: &quot;sys/vector.hpp&quot; not found.">
            <location file="../backend/src/ir/printf.hpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/ir/printf.cpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/profiling.hpp&quot; not found." verbose="Include file: &quot;ir/profiling.hpp&quot; not found.">
            <location file="../backend/src/ir/profiling.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;src/cl_device_data.h&quot; not found." verbose="Include file: &quot;src/cl_device_data.h&quot; not found.">
            <location file="../backend/src/ir/profiling.cpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/vector.hpp&quot; not found." verbose="Include file: &quot;sys/vector.hpp&quot; not found.">
            <location file="../backend/src/ir/reloc.hpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/register.hpp&quot; not found." verbose="Include file: &quot;ir/register.hpp&quot; not found.">
            <location file="../backend/src/ir/sampler.hpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/map.hpp&quot; not found." verbose="Include file: &quot;sys/map.hpp&quot; not found.">
            <location file="../backend/src/ir/sampler.hpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hpp&quot; not found." verbose="Include file: &quot;ir/instruction.hpp&quot; not found.">
            <location file="../backend/src/ir/context.hpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/ir/context.hpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/register.hpp&quot; not found." verbose="Include file: &quot;ir/register.hpp&quot; not found.">
            <location file="../backend/src/ir/context.hpp" line="29" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/immediate.hpp&quot; not found." verbose="Include file: &quot;ir/immediate.hpp&quot; not found.">
            <location file="../backend/src/ir/context.hpp" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/ir/context.hpp" line="31" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/vector.hpp&quot; not found." verbose="Include file: &quot;sys/vector.hpp&quot; not found.">
            <location file="../backend/src/ir/context.hpp" line="32" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/context.hpp" line="160" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/context.hpp" line="236" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_common_defines.h&quot; not found." verbose="Include file: &quot;ocl_common_defines.h&quot; not found.">
            <location file="../backend/src/ir/sampler.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/register.hpp&quot; not found." verbose="Include file: &quot;ir/register.hpp&quot; not found.">
            <location file="../backend/src/ir/image.hpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hpp&quot; not found." verbose="Include file: &quot;ir/instruction.hpp&quot; not found.">
            <location file="../backend/src/ir/image.hpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/map.hpp&quot; not found." verbose="Include file: &quot;sys/map.hpp&quot; not found.">
            <location file="../backend/src/ir/image.hpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_common_defines.h&quot; not found." verbose="Include file: &quot;ocl_common_defines.h&quot; not found.">
            <location file="../backend/src/ir/image.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/program.h&quot; not found." verbose="Include file: &quot;backend/program.h&quot; not found.">
            <location file="../backend/src/ir/image.cpp" line="26" column="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PrintfSet::btiBuf&apos; is not initialized in the constructor." verbose="Member variable &apos;PrintfSet::btiBuf&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.hpp" line="182" column="7"/>
            <symbol>PrintfSet::btiBuf</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;str&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;str&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.hpp" line="103" column="9"/>
            <symbol>str</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;state&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;state&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.hpp" line="128" column="9"/>
            <symbol>state</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;fmts&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;fmts&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.hpp" line="178" column="9"/>
            <symbol>fmts</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PrintfSlot&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PrintfSlot&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.hpp" line="122" column="7"/>
            <symbol>PrintfSlot</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PrintfSlot&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PrintfSlot&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.hpp" line="126" column="7"/>
            <symbol>PrintfSlot</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PrintfLog&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PrintfLog&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.hpp" line="153" column="7"/>
            <symbol>PrintfLog</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Context&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Context&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/context.hpp" line="45" column="5"/>
            <symbol>Context</symbol>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/profiling.cpp" line="45" column="7"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/profiling.cpp" line="67" column="9"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/profiling.cpp" line="67" column="9"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 5) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 5) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/profiling.cpp" line="67" column="9"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: (Constant*)NULL" verbose="Null pointer dereference: (Constant*)NULL" cwe="476" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/constant.hpp" line="85" column="15" info="Null pointer dereference"/>
            <symbol>(Constant*)NULL</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/sys/alloc.cpp" line="207" column="6"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/sys/alloc.cpp" line="208" column="30"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/sys/alloc.cpp" line="218" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/sys/alloc.cpp" line="219" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/sys/alloc.cpp" line="242" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/sys/alloc.cpp" line="244" column="6"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/sys/alloc.cpp" line="245" column="6"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/sys/alloc.cpp" line="257" column="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/sys/alloc.cpp" line="259" column="13"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/sys/alloc.cpp" line="331" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/sys/alloc.cpp" line="352" column="17"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.hpp" line="154" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.hpp" line="155" column="19"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.hpp" line="157" column="18"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.hpp" line="159" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.hpp" line="166" column="17"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.cpp" line="195" column="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.cpp" line="196" column="17"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/profiling.cpp" line="40" column="71"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/context.hpp" line="155" column="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;imageInfo&apos; can be reduced." verbose="The scope of the variable &apos;imageInfo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/image.cpp" line="69" column="23"/>
            <symbol>imageInfo</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;lock&apos; shadows outer variable" verbose="Local variable &apos;lock&apos; shadows outer variable" cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.cpp" line="194" column="18" info="Shadow variable"/>
            <location file="../backend/src/ir/printf.hpp" line="252" column="30" info="Shadowed declaration"/>
            <symbol>lock</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/profiling.cpp" line="66" column="21" info="Shadow variable"/>
            <location file="../backend/src/ir/profiling.cpp" line="41" column="14" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;reg&apos; shadows outer function" verbose="Local variable &apos;reg&apos; shadows outer function" cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/context.hpp" line="127" column="22" info="Shadow variable"/>
            <location file="../backend/src/ir/context.hpp" line="66" column="14" info="Shadowed declaration"/>
            <symbol>reg</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;cnst&apos; can be declared as reference to const" verbose="Variable &apos;cnst&apos; can be declared as reference to const" cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/constant.cpp" line="60" column="17" info="Variable &apos;cnst&apos; can be declared as reference to const"/>
            <symbol>cnst</symbol>
        </error>
        <error id="constParameterReference" severity="style" msg="Parameter &apos;st&apos; can be declared as reference to const" verbose="Parameter &apos;st&apos; can be declared as reference to const" cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.hpp" line="126" column="31" info="Parameter &apos;st&apos; can be declared as reference to const"/>
            <symbol>st</symbol>
        </error>
        <error id="constParameterReference" severity="style" msg="Parameter &apos;state&apos; can be declared as reference to const" verbose="Parameter &apos;state&apos; can be declared as reference to const" cwe="398" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/printf.cpp" line="35" column="54" info="Parameter &apos;state&apos; can be declared as reference to const"/>
            <symbol>state</symbol>
        </error>
        <error id="sizeofFunctionCall" severity="warning" msg="Found function call inside sizeof()." verbose="Found function call inside sizeof()." cwe="682" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/constant.cpp" line="64" column="26"/>
        </error>
        <error id="sizeofFunctionCall" severity="warning" msg="Found function call inside sizeof()." verbose="Found function call inside sizeof()." cwe="682" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/constant.cpp" line="65" column="26"/>
        </error>
        <error id="sizeofFunctionCall" severity="warning" msg="Found function call inside sizeof()." verbose="Found function call inside sizeof()." cwe="682" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/constant.cpp" line="66" column="26"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;entry&apos; is assigned a value that is never used." verbose="Variable &apos;entry&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/gbe_bin_interpreter.cpp">
            <location file="../backend/src/ir/reloc.cpp" line="42" column="21"/>
            <symbol>entry</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/context.hpp&quot; not found." verbose="Include file: &quot;ir/context.hpp&quot; not found.">
            <location file="../backend/src/ir/constopt.cpp" line="21" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/value.hpp&quot; not found." verbose="Include file: &quot;ir/value.hpp&quot; not found.">
            <location file="../backend/src/ir/constopt.cpp" line="22" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/constopt.hpp&quot; not found." verbose="Include file: &quot;ir/constopt.hpp&quot; not found.">
            <location file="../backend/src/ir/constopt.cpp" line="23" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/set.hpp&quot; not found." verbose="Include file: &quot;sys/set.hpp&quot; not found.">
            <location file="../backend/src/ir/constopt.cpp" line="24" column="0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;FunctionStructArgConstOffsetFolder&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;FunctionStructArgConstOffsetFolder&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/constopt.cpp">
            <location file="../backend/src/ir/constopt.cpp" line="33" column="5"/>
            <symbol>FunctionStructArgConstOffsetFolder</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;arg&apos; can be declared as reference to const" verbose="Variable &apos;arg&apos; can be declared as reference to const" cwe="398" file0="../backend/src/ir/constopt.cpp">
            <location file="../backend/src/ir/constopt.cpp" line="73" column="25" info="Variable &apos;arg&apos; can be declared as reference to const"/>
            <symbol>arg</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;rec&apos; can be declared as pointer to const" verbose="Parameter &apos;rec&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/constopt.cpp">
            <location file="../backend/src/ir/constopt.cpp" line="111" column="70" info="Parameter &apos;rec&apos; can be declared as pointer to const"/>
            <symbol>rec</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/context.hpp&quot; not found." verbose="Include file: &quot;ir/context.hpp&quot; not found.">
            <location file="../backend/src/ir/context.cpp" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/ir/context.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/lowering.hpp&quot; not found." verbose="Include file: &quot;ir/lowering.hpp&quot; not found.">
            <location file="../backend/src/ir/context.cpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/constopt.hpp&quot; not found." verbose="Include file: &quot;ir/constopt.hpp&quot; not found.">
            <location file="../backend/src/ir/context.cpp" line="27" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;whyNot&apos; can be reduced." verbose="The scope of the variable &apos;whyNot&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/ir/context.cpp">
            <location file="../backend/src/ir/context.cpp" line="172" column="17"/>
            <symbol>whyNot</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/ir/function.cpp" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/ir/function.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/map.hpp&quot; not found." verbose="Include file: &quot;sys/map.hpp&quot; not found.">
            <location file="../backend/src/ir/function.cpp" line="26" column="0"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="../backend/src/ir/function.cpp">
            <location file="../backend/src/ir/function.cpp" line="330" column="7"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="../backend/src/ir/function.cpp">
            <location file="../backend/src/ir/function.cpp" line="330" column="7"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="../backend/src/ir/function.cpp">
            <location file="../backend/src/ir/function.cpp" line="334" column="9"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="../backend/src/ir/function.cpp">
            <location file="../backend/src/ir/function.cpp" line="334" column="9"/>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;x&apos; can be declared as reference to const" verbose="Variable &apos;x&apos; can be declared as reference to const" cwe="398" file0="../backend/src/ir/function.cpp">
            <location file="../backend/src/ir/function.cpp" line="153" column="16" info="Variable &apos;x&apos; can be declared as reference to const"/>
            <symbol>x</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;succ&apos; can be declared as reference to const" verbose="Variable &apos;succ&apos; can be declared as reference to const" cwe="398" file0="../backend/src/ir/function.cpp">
            <location file="../backend/src/ir/function.cpp" line="331" column="25" info="Variable &apos;succ&apos; can be declared as reference to const"/>
            <symbol>succ</symbol>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::transform algorithm instead of a raw loop." verbose="Consider using std::transform algorithm instead of a raw loop." cwe="398" file0="../backend/src/ir/function.cpp">
            <location file="../backend/src/ir/function.cpp" line="155" column="11"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/ADT/APSInt.h&quot; not found." verbose="Include file: &quot;llvm/ADT/APSInt.h&quot; not found.">
            <location file="../backend/src/ir/half.cpp" line="23" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/ADT/APFloat.h&quot; not found." verbose="Include file: &quot;llvm/ADT/APFloat.h&quot; not found.">
            <location file="../backend/src/ir/half.hpp" line="27" column="0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;half&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;half&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/half.cpp">
            <location file="../backend/src/ir/half.hpp" line="39" column="7"/>
            <symbol>half</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/type.hpp&quot; not found." verbose="Include file: &quot;ir/type.hpp&quot; not found.">
            <location file="../backend/src/ir/immediate.hpp" line="29" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/half.hpp&quot; not found." verbose="Include file: &quot;ir/half.hpp&quot; not found.">
            <location file="../backend/src/ir/immediate.hpp" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/platform.hpp&quot; not found." verbose="Include file: &quot;sys/platform.hpp&quot; not found.">
            <location file="../backend/src/ir/immediate.hpp" line="31" column="0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="136" column="5"/>
            <symbol>Immediate</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="137" column="5"/>
            <symbol>Immediate</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="138" column="5"/>
            <symbol>Immediate</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="139" column="5"/>
            <symbol>Immediate</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="140" column="5"/>
            <symbol>Immediate</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="141" column="5"/>
            <symbol>Immediate</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="142" column="5"/>
            <symbol>Immediate</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="143" column="5"/>
            <symbol>Immediate</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="144" column="5"/>
            <symbol>Immediate</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="145" column="5"/>
            <symbol>Immediate</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="146" column="5"/>
            <symbol>Immediate</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Immediate&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="147" column="5"/>
            <symbol>Immediate</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.cpp" line="262" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.cpp" line="315" column="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.cpp" line="325" column="23"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;index&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;index&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.cpp" line="158" column="24" info="Unsigned positive"/>
            <symbol>index</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;b&apos; can be declared as pointer to const" verbose="Parameter &apos;b&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="162" column="5" info="Parameter &apos;b&apos; can be declared as pointer to const"/>
            <symbol>b</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;s8&apos; can be declared as pointer to const" verbose="Parameter &apos;s8&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="163" column="5" info="Parameter &apos;s8&apos; can be declared as pointer to const"/>
            <symbol>s8</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;u8&apos; can be declared as pointer to const" verbose="Parameter &apos;u8&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="164" column="5" info="Parameter &apos;u8&apos; can be declared as pointer to const"/>
            <symbol>u8</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;s16&apos; can be declared as pointer to const" verbose="Parameter &apos;s16&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="165" column="5" info="Parameter &apos;s16&apos; can be declared as pointer to const"/>
            <symbol>s16</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;u16&apos; can be declared as pointer to const" verbose="Parameter &apos;u16&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="166" column="5" info="Parameter &apos;u16&apos; can be declared as pointer to const"/>
            <symbol>u16</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;s32&apos; can be declared as pointer to const" verbose="Parameter &apos;s32&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="167" column="5" info="Parameter &apos;s32&apos; can be declared as pointer to const"/>
            <symbol>s32</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;u32&apos; can be declared as pointer to const" verbose="Parameter &apos;u32&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="168" column="5" info="Parameter &apos;u32&apos; can be declared as pointer to const"/>
            <symbol>u32</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;s64&apos; can be declared as pointer to const" verbose="Parameter &apos;s64&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="169" column="5" info="Parameter &apos;s64&apos; can be declared as pointer to const"/>
            <symbol>s64</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;u64&apos; can be declared as pointer to const" verbose="Parameter &apos;u64&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="170" column="5" info="Parameter &apos;u64&apos; can be declared as pointer to const"/>
            <symbol>u64</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;f32&apos; can be declared as pointer to const" verbose="Parameter &apos;f32&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="171" column="5" info="Parameter &apos;f32&apos; can be declared as pointer to const"/>
            <symbol>f32</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;f16&apos; can be declared as pointer to const" verbose="Parameter &apos;f16&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="172" column="5" info="Parameter &apos;f16&apos; can be declared as pointer to const"/>
            <symbol>f16</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;f64&apos; can be declared as pointer to const" verbose="Parameter &apos;f64&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/immediate.cpp">
            <location file="../backend/src/ir/immediate.hpp" line="173" column="5" info="Parameter &apos;f64&apos; can be declared as pointer to const"/>
            <symbol>f64</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hpp&quot; not found." verbose="Include file: &quot;ir/instruction.hpp&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2129" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2133" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2137" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2141" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2145" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2149" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2153" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2157" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2161" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2165" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2169" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2173" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2177" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2181" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2185" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2189" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2193" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2197" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2201" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2205" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2209" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2213" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2217" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2221" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2225" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2229" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2232" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2236" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2240" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2244" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2248" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2252" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2280" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2286" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2301" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2307" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hxx&quot; not found." verbose="Include file: &quot;ir/instruction.hxx&quot; not found.">
            <location file="../backend/src/ir/instruction.cpp" line="2313" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;id&gt;0&apos; is always true" verbose="Condition &apos;id&gt;0&apos; is always true" cwe="571" file0="../backend/src/ir/instruction.cpp">
            <location file="../backend/src/ir/instruction.cpp" line="564" column="18" info="Condition &apos;id&gt;0&apos; is always true"/>
            <location file="../backend/src/ir/instruction.cpp" line="563" column="18" info="Assuming that condition &apos;id==0&apos; is not redundant"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;regID&apos; shadows outer variable" verbose="Local variable &apos;regID&apos; shadows outer variable" cwe="398" file0="../backend/src/ir/instruction.cpp">
            <location file="../backend/src/ir/instruction.cpp" line="1347" column="24" info="Shadow variable"/>
            <location file="../backend/src/ir/instruction.cpp" line="1343" column="22" info="Shadowed declaration"/>
            <symbol>regID</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/liveness.hpp&quot; not found." verbose="Include file: &quot;ir/liveness.hpp&quot; not found.">
            <location file="../backend/src/ir/liveness.cpp" line="24" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pair&apos; shadows outer variable" verbose="Local variable &apos;pair&apos; shadows outer variable" cwe="398" file0="../backend/src/ir/liveness.cpp">
            <location file="../backend/src/ir/liveness.cpp" line="79" column="18" info="Shadow variable"/>
            <location file="../backend/src/ir/liveness.cpp" line="76" column="16" info="Shadowed declaration"/>
            <symbol>pair</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;x&apos; can be declared as reference to const" verbose="Variable &apos;x&apos; can be declared as reference to const" cwe="398" file0="../backend/src/ir/liveness.cpp">
            <location file="../backend/src/ir/liveness.cpp" line="281" column="18" info="Variable &apos;x&apos; can be declared as reference to const"/>
            <symbol>x</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;x&apos; can be declared as reference to const" verbose="Variable &apos;x&apos; can be declared as reference to const" cwe="398" file0="../backend/src/ir/liveness.cpp">
            <location file="../backend/src/ir/liveness.cpp" line="285" column="18" info="Variable &apos;x&apos; can be declared as reference to const"/>
            <symbol>x</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;x&apos; can be declared as reference to const" verbose="Variable &apos;x&apos; can be declared as reference to const" cwe="398" file0="../backend/src/ir/liveness.cpp">
            <location file="../backend/src/ir/liveness.cpp" line="288" column="18" info="Variable &apos;x&apos; can be declared as reference to const"/>
            <symbol>x</symbol>
        </error>
        <error id="redundantIfRemove" severity="style" msg="Redundant checking of STL container element existence before removing it." verbose="Redundant checking of STL container element existence before removing it. It is safe to call the remove method on a non-existing element." cwe="398" file0="../backend/src/ir/liveness.cpp">
            <location file="../backend/src/ir/liveness.cpp" line="190" column="11"/>
        </error>
        <error id="redundantIfRemove" severity="style" msg="Redundant checking of STL container element existence before removing it." verbose="Redundant checking of STL container element existence before removing it. It is safe to call the remove method on a non-existing element." cwe="398" file0="../backend/src/ir/liveness.cpp">
            <location file="../backend/src/ir/liveness.cpp" line="198" column="13"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/context.hpp&quot; not found." verbose="Include file: &quot;ir/context.hpp&quot; not found.">
            <location file="../backend/src/ir/lowering.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/value.hpp&quot; not found." verbose="Include file: &quot;ir/value.hpp&quot; not found.">
            <location file="../backend/src/ir/lowering.cpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/liveness.hpp&quot; not found." verbose="Include file: &quot;ir/liveness.hpp&quot; not found.">
            <location file="../backend/src/ir/lowering.cpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/set.hpp&quot; not found." verbose="Include file: &quot;sys/set.hpp&quot; not found.">
            <location file="../backend/src/ir/lowering.cpp" line="28" column="0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ContextReturn&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ContextReturn&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/lowering.cpp">
            <location file="../backend/src/ir/lowering.cpp" line="38" column="5"/>
            <symbol>ContextReturn</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;FunctionArgumentLowerer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;FunctionArgumentLowerer&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/lowering.cpp">
            <location file="../backend/src/ir/lowering.cpp" line="112" column="5"/>
            <symbol>FunctionArgumentLowerer</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;insn&apos; shadows outer variable" verbose="Local variable &apos;insn&apos; shadows outer variable" cwe="398" file0="../backend/src/ir/lowering.cpp">
            <location file="../backend/src/ir/lowering.cpp" line="506" column="22" info="Shadow variable"/>
            <location file="../backend/src/ir/lowering.cpp" line="468" column="20" info="Shadowed declaration"/>
            <symbol>insn</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;loadAddImm&apos; shadows outer variable" verbose="Local variable &apos;loadAddImm&apos; shadows outer variable" cwe="398" file0="../backend/src/ir/lowering.cpp">
            <location file="../backend/src/ir/lowering.cpp" line="509" column="20" info="Shadow variable"/>
            <location file="../backend/src/ir/lowering.cpp" line="472" column="18" info="Shadowed declaration"/>
            <symbol>loadAddImm</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;arg&apos; can be declared as reference to const" verbose="Variable &apos;arg&apos; can be declared as reference to const" cwe="398" file0="../backend/src/ir/lowering.cpp">
            <location file="../backend/src/ir/lowering.cpp" line="209" column="25" info="Variable &apos;arg&apos; can be declared as reference to const"/>
            <symbol>arg</symbol>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::copy algorithm instead of a raw loop." verbose="Consider using std::copy algorithm instead of a raw loop." cwe="398" file0="../backend/src/ir/lowering.cpp">
            <location file="../backend/src/ir/lowering.cpp" line="521" column="11"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/profile.hpp&quot; not found." verbose="Include file: &quot;ir/profile.hpp&quot; not found.">
            <location file="../backend/src/ir/profile.cpp" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/ir/profile.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/platform.hpp&quot; not found." verbose="Include file: &quot;sys/platform.hpp&quot; not found.">
            <location file="../backend/src/ir/profile.cpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/profile.hpp&quot; not found." verbose="Include file: &quot;ir/profile.hpp&quot; not found.">
            <location file="../backend/src/ir/register.cpp" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/register.hpp&quot; not found." verbose="Include file: &quot;ir/register.hpp&quot; not found.">
            <location file="../backend/src/ir/register.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/ADT/SmallVector.h&quot; not found." verbose="Include file: &quot;llvm/ADT/SmallVector.h&quot; not found.">
            <location file="../backend/src/ir/structurizer.hpp" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/ir/structurizer.hpp" line="21" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/ir/structurizer.hpp" line="22" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/instruction.hpp&quot; not found." verbose="Include file: &quot;ir/instruction.hpp&quot; not found.">
            <location file="../backend/src/ir/structurizer.hpp" line="23" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/ir/structurizer.cpp" line="20" column="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Block::fall_through&apos; is not initialized in the constructor." verbose="Member variable &apos;Block::fall_through&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.hpp" line="56" column="5"/>
            <symbol>Block::fall_through</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Block::label&apos; is not initialized in the constructor." verbose="Member variable &apos;Block::label&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.hpp" line="56" column="5"/>
            <symbol>Block::label</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CFGStructurizer::blocks_entry&apos; is not initialized in the constructor." verbose="Member variable &apos;CFGStructurizer::blocks_entry&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.hpp" line="194" column="7"/>
            <symbol>CFGStructurizer::blocks_entry</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SimpleBlock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SimpleBlock&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.hpp" line="115" column="5"/>
            <symbol>SimpleBlock</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SerialBlock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SerialBlock&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.hpp" line="129" column="5"/>
            <symbol>SerialBlock</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SelfLoopBlock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SelfLoopBlock&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.hpp" line="172" column="5"/>
            <symbol>SelfLoopBlock</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CFGStructurizer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CFGStructurizer&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.hpp" line="194" column="7"/>
            <symbol>CFGStructurizer</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;getEntry&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;getEntry&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.hpp" line="118" column="25" info="Function in derived class"/>
            <location file="../backend/src/ir/structurizer.hpp" line="74" column="25" info="Virtual function in base class"/>
            <symbol>getEntry</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;getExit&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;getExit&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.hpp" line="119" column="25" info="Function in derived class"/>
            <location file="../backend/src/ir/structurizer.hpp" line="78" column="25" info="Virtual function in base class"/>
            <symbol>getExit</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;getEntry&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;getEntry&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.hpp" line="174" column="25" info="Function in derived class"/>
            <location file="../backend/src/ir/structurizer.hpp" line="74" column="25" info="Virtual function in base class"/>
            <symbol>getEntry</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;getExit&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;getExit&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.hpp" line="178" column="25" info="Function in derived class"/>
            <location file="../backend/src/ir/structurizer.hpp" line="78" column="25" info="Virtual function in base class"/>
            <symbol>getExit</symbol>
        </error>
        <error id="uselessOverride" severity="style" msg="The function &apos;getEntry&apos; overrides a function in a base class but is identical to the overridden function" verbose="The function &apos;getEntry&apos; overrides a function in a base class but is identical to the overridden function" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.hpp" line="174" column="25" info="Function in derived class"/>
            <location file="../backend/src/ir/structurizer.hpp" line="74" column="25" info="Virtual function in base class"/>
            <symbol>getEntry</symbol>
        </error>
        <error id="uselessOverride" severity="style" msg="The function &apos;getExit&apos; overrides a function in a base class but just delegates back to the base class." verbose="The function &apos;getExit&apos; overrides a function in a base class but just delegates back to the base class." file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.hpp" line="178" column="25" info="Function in derived class"/>
            <location file="../backend/src/ir/structurizer.hpp" line="78" column="25" info="Virtual function in base class"/>
            <symbol>getExit</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;NULL!=p_tmp_bb&apos; is always true" verbose="Condition &apos;NULL!=p_tmp_bb&apos; is always true" cwe="571" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="550" column="13" info="Condition &apos;NULL!=p_tmp_bb&apos; is always true"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="68" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="85" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="318" column="12"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="320" column="13"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="397" column="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="416" column="23"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="440" column="22"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;it&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;it&apos; is reassigned a value before the old one has been used." cwe="563" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="337" column="8" info="it is overwritten"/>
            <location file="../backend/src/ir/structurizer.cpp" line="199" column="7" info="it is assigned"/>
            <symbol>it</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;increased&apos; can be reduced." verbose="The scope of the variable &apos;increased&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="979" column="9"/>
            <symbol>increased</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;it&apos; shadows outer variable" verbose="Local variable &apos;it&apos; shadows outer variable" cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="322" column="32" info="Shadow variable"/>
            <location file="../backend/src/ir/structurizer.cpp" line="195" column="27" info="Shadowed declaration"/>
            <symbol>it</symbol>
        </error>
        <error id="constParameterReference" severity="style" msg="Parameter &apos;matchingEndifLabel&apos; can be declared as reference to const" verbose="Parameter &apos;matchingEndifLabel&apos; can be declared as reference to const" cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="115" column="65" info="Parameter &apos;matchingEndifLabel&apos; can be declared as reference to const"/>
            <symbol>matchingEndifLabel</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;a&apos; can be declared as reference to const" verbose="Variable &apos;a&apos; can be declared as reference to const" cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="803" column="21" info="Variable &apos;a&apos; can be declared as reference to const"/>
            <symbol>a</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;entry&apos; can be declared as pointer to const" verbose="Variable &apos;entry&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="267" column="21" info="Variable &apos;entry&apos; can be declared as pointer to const"/>
            <symbol>entry</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;loop_header&apos; can be declared as pointer to const" verbose="Variable &apos;loop_header&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="795" column="12" info="Variable &apos;loop_header&apos; can be declared as pointer to const"/>
            <symbol>loop_header</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;increased&apos; is assigned a value that is never used." verbose="Variable &apos;increased&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="979" column="19"/>
            <symbol>increased</symbol>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="32" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="42" column="5"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="44" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="76" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="94" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="111" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="121" column="5"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="137" column="5"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="161" column="5"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="181" column="5"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="199" column="5"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="229" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="296" column="13"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="311" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="323" column="11"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="348" column="15"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="350" column="15"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="361" column="15"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="365" column="15"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="367" column="15"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="384" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="405" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="430" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="449" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="467" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="479" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="506" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="522" column="11"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="533" column="13"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="540" column="7"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="595" column="9"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="603" column="9"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="736" column="9"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/ir/structurizer.cpp">
            <location file="../backend/src/ir/structurizer.cpp" line="992" column="9"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/type.hpp&quot; not found." verbose="Include file: &quot;ir/type.hpp&quot; not found.">
            <location file="../backend/src/ir/type.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/ir/unit.cpp" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/ir/unit.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/value.hpp&quot; not found." verbose="Include file: &quot;ir/value.hpp&quot; not found.">
            <location file="../backend/src/ir/value.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/liveness.hpp&quot; not found." verbose="Include file: &quot;ir/liveness.hpp&quot; not found.">
            <location file="../backend/src/ir/value.cpp" line="26" column="0"/>
        </error>
        <error id="internalAstError" severity="error" msg="Syntax Error: AST broken, binary operator &apos;&lt;&apos; doesn&apos;t have two operands." verbose="Syntax Error: AST broken, binary operator &apos;&lt;&apos; doesn&apos;t have two operands." file0="../backend/src/ir/value.cpp">
            <location file="../backend/src/ir/value.cpp" line="280" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_async.h&quot; not found." verbose="Include file: &quot;ocl_async.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_async.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_sync.h&quot; not found." verbose="Include file: &quot;ocl_sync.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_async.cl" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_workitem.h&quot; not found." verbose="Include file: &quot;ocl_workitem.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_async.cl" line="21" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_atom.h&quot; not found." verbose="Include file: &quot;ocl_atom.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_atom.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_as.h&quot; not found." verbose="Include file: &quot;ocl_as.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_atom.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_atom_20.h&quot; not found." verbose="Include file: &quot;ocl_atom_20.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_as.h&quot; not found." verbose="Include file: &quot;ocl_as.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_sync.h&quot; not found." verbose="Include file: &quot;ocl_sync.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_types.h&quot; not found." verbose="Include file: &quot;ocl_types.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_enqueue.h&quot; not found." verbose="Include file: &quot;ocl_enqueue.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_workitem.h&quot; not found." verbose="Include file: &quot;ocl_workitem.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_atom.h&quot; not found." verbose="Include file: &quot;ocl_atom.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="21" column="0"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;slm_sizes&apos; can be declared as pointer to const" verbose="Parameter &apos;slm_sizes&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/libocl/src/ocl_enqueue.cl">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="64" column="114" info="Parameter &apos;slm_sizes&apos; can be declared as pointer to const"/>
            <symbol>slm_sizes</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: queue" verbose="Uninitialized variable: queue" cwe="457" file0="../backend/src/libocl/src/ocl_enqueue.cl">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="26" column="10"/>
            <symbol>queue</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: e" verbose="Uninitialized variable: e" cwe="457" file0="../backend/src/libocl/src/ocl_enqueue.cl">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="98" column="10"/>
            <symbol>e</symbol>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;queue&apos; is not assigned a value." verbose="Variable &apos;queue&apos; is not assigned a value." cwe="665" file0="../backend/src/libocl/src/ocl_enqueue.cl">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="25" column="11"/>
            <symbol>queue</symbol>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;e&apos; is not assigned a value." verbose="Variable &apos;e&apos; is not assigned a value." cwe="665" file0="../backend/src/libocl/src/ocl_enqueue.cl">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="97" column="15"/>
            <symbol>e</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_geometric.h&quot; not found." verbose="Include file: &quot;ocl_geometric.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_geometric.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_common.h&quot; not found." verbose="Include file: &quot;ocl_common.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_geometric.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_relational.h&quot; not found." verbose="Include file: &quot;ocl_relational.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_geometric.cl" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_math.h&quot; not found." verbose="Include file: &quot;ocl_math.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_geometric.cl" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_float.h&quot; not found." verbose="Include file: &quot;ocl_float.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_geometric.cl" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_printf.h&quot; not found." verbose="Include file: &quot;ocl_printf.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_geometric.cl" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_workitem.h&quot; not found." verbose="Include file: &quot;ocl_workitem.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_geometric.cl" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_image.h&quot; not found." verbose="Include file: &quot;ocl_image.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_math.h&quot; not found." verbose="Include file: &quot;ocl_math.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="22" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_integer.h&quot; not found." verbose="Include file: &quot;ocl_integer.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="24" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_common.h&quot; not found." verbose="Include file: &quot;ocl_common.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_convert.h&quot; not found." verbose="Include file: &quot;ocl_convert.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="26" column="0"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical conjunction always evaluates to false: tmpCoord &lt; 0 &amp;&amp; tmpCoord &gt; -0x1p-20f." verbose="Logical conjunction always evaluates to false: tmpCoord &lt; 0 &amp;&amp; tmpCoord &gt; -0x1p-20f. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?" cwe="570" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="313" column="20"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical conjunction always evaluates to false: tmpCoord.s0 &lt; 0 &amp;&amp; tmpCoord.s0 &gt; -0x1p-20f." verbose="Logical conjunction always evaluates to false: tmpCoord.s0 &lt; 0 &amp;&amp; tmpCoord.s0 &gt; -0x1p-20f. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?" cwe="570" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="320" column="23"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical conjunction always evaluates to false: tmpCoord.s1 &lt; 0 &amp;&amp; tmpCoord.s1 &gt; -0x1p-20f." verbose="Logical conjunction always evaluates to false: tmpCoord.s1 &lt; 0 &amp;&amp; tmpCoord.s1 &gt; -0x1p-20f. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?" cwe="570" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="322" column="23"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical conjunction always evaluates to false: tmpCoord.s0 &lt; 0 &amp;&amp; tmpCoord.s0 &gt; -0x1p-20f." verbose="Logical conjunction always evaluates to false: tmpCoord.s0 &lt; 0 &amp;&amp; tmpCoord.s0 &gt; -0x1p-20f. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?" cwe="570" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="329" column="23"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical conjunction always evaluates to false: tmpCoord.s1 &lt; 0 &amp;&amp; tmpCoord.s1 &gt; -0x1p-20f." verbose="Logical conjunction always evaluates to false: tmpCoord.s1 &lt; 0 &amp;&amp; tmpCoord.s1 &gt; -0x1p-20f. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?" cwe="570" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="331" column="23"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical conjunction always evaluates to false: tmpCoord.s2 &lt; 0 &amp;&amp; tmpCoord.s2 &gt; -0x1p-20f." verbose="Logical conjunction always evaluates to false: tmpCoord.s2 &lt; 0 &amp;&amp; tmpCoord.s2 &gt; -0x1p-20f. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?" cwe="570" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="333" column="23"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical conjunction always evaluates to false: tmpCoord.s0 &lt; 0 &amp;&amp; tmpCoord.s0 &gt; -0x1p-20f." verbose="Logical conjunction always evaluates to false: tmpCoord.s0 &lt; 0 &amp;&amp; tmpCoord.s0 &gt; -0x1p-20f. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?" cwe="570" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="340" column="23"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical conjunction always evaluates to false: tmpCoord.s1 &lt; 0 &amp;&amp; tmpCoord.s1 &gt; -0x1p-20f." verbose="Logical conjunction always evaluates to false: tmpCoord.s1 &lt; 0 &amp;&amp; tmpCoord.s1 &gt; -0x1p-20f. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?" cwe="570" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="342" column="23"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical conjunction always evaluates to false: tmpCoord.s2 &lt; 0 &amp;&amp; tmpCoord.s2 &gt; -0x1p-20f." verbose="Logical conjunction always evaluates to false: tmpCoord.s2 &lt; 0 &amp;&amp; tmpCoord.s2 &gt; -0x1p-20f. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?" cwe="570" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="344" column="23"/>
        </error>
        <error id="badBitmaskCheck" severity="warning" msg="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" verbose="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" cwe="571" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="538" column="1"/>
        </error>
        <error id="badBitmaskCheck" severity="warning" msg="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" verbose="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" cwe="571" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="539" column="1"/>
        </error>
        <error id="badBitmaskCheck" severity="warning" msg="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" verbose="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" cwe="571" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="540" column="1"/>
        </error>
        <error id="badBitmaskCheck" severity="warning" msg="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" verbose="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" cwe="571" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="541" column="1"/>
        </error>
        <error id="badBitmaskCheck" severity="warning" msg="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" verbose="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" cwe="571" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="542" column="1"/>
        </error>
        <error id="badBitmaskCheck" severity="warning" msg="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" verbose="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" cwe="571" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="543" column="1"/>
        </error>
        <error id="badBitmaskCheck" severity="warning" msg="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" verbose="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" cwe="571" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="675" column="1"/>
        </error>
        <error id="badBitmaskCheck" severity="warning" msg="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" verbose="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" cwe="571" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="676" column="1"/>
        </error>
        <error id="badBitmaskCheck" severity="warning" msg="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" verbose="Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;&apos;?" cwe="571" file0="../backend/src/libocl/src/ocl_image.cl">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="677" column="1"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_memcpy.h&quot; not found." verbose="Include file: &quot;ocl_memcpy.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="18" column="0"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src&apos; can be declared as pointer to const" verbose="Parameter &apos;src&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/libocl/src/ocl_memcpy.cl">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="60" column="1" info="Parameter &apos;src&apos; can be declared as pointer to const"/>
            <symbol>src</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src&apos; can be declared as pointer to const" verbose="Parameter &apos;src&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/libocl/src/ocl_memcpy.cl">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="61" column="1" info="Parameter &apos;src&apos; can be declared as pointer to const"/>
            <symbol>src</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;src&apos; can be declared as pointer to const" verbose="Parameter &apos;src&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/libocl/src/ocl_memcpy.cl">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="62" column="1" info="Parameter &apos;src&apos; can be declared as pointer to const"/>
            <symbol>src</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_memset.h&quot; not found." verbose="Include file: &quot;ocl_memset.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_memset.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_misc.h&quot; not found." verbose="Include file: &quot;ocl_misc.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="18" column="0"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="348" column="59"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="355" column="52"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="357" column="52"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="359" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="361" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="363" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="365" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="367" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="387" column="53"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="389" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="393" column="28"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="628" column="52"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="630" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="632" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="634" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="636" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="638" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="640" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="669" column="28"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="681" column="28"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="984" column="52"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="986" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="988" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="990" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="992" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="994" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="996" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1005" column="53"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1007" column="18"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1009" column="18"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1011" column="18"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1102" column="64"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1104" column="27"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1298" column="52"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1300" column="59"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1302" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1304" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1306" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1308" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1310" column="20"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1323" column="53"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1325" column="18"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1327" column="18"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1329" column="18"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1345" column="28"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1441" column="64"/>
        </error>
        <error id="badBitmaskCheck" severity="style" msg="Operator &apos;|&apos; with one operand equal to zero is redundant." verbose="Operator &apos;|&apos; with one operand equal to zero is redundant." cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1444" column="27"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;lid_x&gt;=4&apos; is always true" verbose="Condition &apos;lid_x&gt;=4&apos; is always true" cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="481" column="17" info="Condition &apos;lid_x&gt;=4&apos; is always true"/>
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="477" column="12" info="Assuming condition &apos;lid_x&lt;4&apos; is false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;lid_x&gt;=4&apos; is always true" verbose="Condition &apos;lid_x&gt;=4&apos; is always true" cwe="571" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="809" column="17" info="Condition &apos;lid_x&gt;=4&apos; is always true"/>
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="805" column="12" info="Assuming condition &apos;lid_x&lt;4&apos; is false"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="355" column="23" info="Shift"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="628" column="23" info="Shift"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="984" column="23" info="Shift"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1298" column="23" info="Shift"/>
        </error>
        <error id="legacyUninitvar" severity="error" msg="Uninitialized variable: fwd_mv" verbose="Uninitialized variable: fwd_mv" cwe="457" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="490" column="33"/>
            <symbol>fwd_mv</symbol>
        </error>
        <error id="legacyUninitvar" severity="error" msg="Uninitialized variable: bwd_mv" verbose="Uninitialized variable: bwd_mv" cwe="457" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="490" column="16"/>
            <symbol>bwd_mv</symbol>
        </error>
        <error id="legacyUninitvar" severity="error" msg="Uninitialized variable: fwd_mv" verbose="Uninitialized variable: fwd_mv" cwe="457" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="818" column="33"/>
            <symbol>fwd_mv</symbol>
        </error>
        <error id="legacyUninitvar" severity="error" msg="Uninitialized variable: bwd_mv" verbose="Uninitialized variable: bwd_mv" cwe="457" file0="../backend/src/libocl/src/ocl_misc.cl">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="818" column="16"/>
            <symbol>bwd_mv</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_pipe.h&quot; not found." verbose="Include file: &quot;ocl_pipe.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_atom.h&quot; not found." verbose="Include file: &quot;ocl_atom.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_workitem.h&quot; not found." verbose="Include file: &quot;ocl_workitem.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="20" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!ret0&apos; is always true" verbose="Condition &apos;!ret0&apos; is always true" cwe="571" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="154" column="38" info="Condition &apos;!ret0&apos; is always true"/>
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="142" column="14" info="Assignment &apos;ret0=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret0&apos; can be reduced." verbose="The scope of the variable &apos;ret0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="142" column="7"/>
            <symbol>ret0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret0&apos; can be reduced." verbose="The scope of the variable &apos;ret0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="222" column="7"/>
            <symbol>ret0</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ret0&apos; shadows outer variable" verbose="Local variable &apos;ret0&apos; shadows outer variable" cwe="398" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="148" column="11" info="Shadow variable"/>
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="142" column="7" info="Shadowed declaration"/>
            <symbol>ret0</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;pid&apos; can be declared as pointer to const" verbose="Variable &apos;pid&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="62" column="9" info="Variable &apos;pid&apos; can be declared as pointer to const"/>
            <symbol>pid</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;pid&apos; can be declared as pointer to const" verbose="Variable &apos;pid&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="102" column="9" info="Variable &apos;pid&apos; can be declared as pointer to const"/>
            <symbol>pid</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;pid&apos; can be declared as pointer to const" verbose="Variable &apos;pid&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="279" column="9" info="Variable &apos;pid&apos; can be declared as pointer to const"/>
            <symbol>pid</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pipe_size&apos; is assigned a value that is never used." verbose="Variable &apos;pipe_size&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="47" column="17"/>
            <symbol>pipe_size</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pipe_size&apos; is assigned a value that is never used." verbose="Variable &apos;pipe_size&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="87" column="17"/>
            <symbol>pipe_size</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pipe_size&apos; is assigned a value that is never used." verbose="Variable &apos;pipe_size&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="125" column="17"/>
            <symbol>pipe_size</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret0&apos; is assigned a value that is never used." verbose="Variable &apos;ret0&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="148" column="16"/>
            <symbol>ret0</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pipe_size&apos; is assigned a value that is never used." verbose="Variable &apos;pipe_size&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="152" column="19"/>
            <symbol>pipe_size</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pipe_size&apos; is assigned a value that is never used." verbose="Variable &apos;pipe_size&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="182" column="17"/>
            <symbol>pipe_size</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pipe_size&apos; is assigned a value that is never used." verbose="Variable &apos;pipe_size&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="206" column="17"/>
            <symbol>pipe_size</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pipe_size&apos; is assigned a value that is never used." verbose="Variable &apos;pipe_size&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="232" column="19"/>
            <symbol>pipe_size</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pipe_size&apos; is assigned a value that is never used." verbose="Variable &apos;pipe_size&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/src/ocl_pipe.cl">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="262" column="17"/>
            <symbol>pipe_size</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_sync.h&quot; not found." verbose="Include file: &quot;ocl_sync.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_sync.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_misc.h&quot; not found." verbose="Include file: &quot;ocl_misc.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_sync.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_vload.h&quot; not found." verbose="Include file: &quot;ocl_vload.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_relational.h&quot; not found." verbose="Include file: &quot;ocl_relational.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_vload_20.h&quot; not found." verbose="Include file: &quot;ocl_vload_20.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_vload_20.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_relational.h&quot; not found." verbose="Include file: &quot;ocl_relational.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_vload_20.cl" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_work_group.h&quot; not found." verbose="Include file: &quot;ocl_work_group.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_work_group.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_workitem.h&quot; not found." verbose="Include file: &quot;ocl_workitem.h&quot; not found.">
            <location file="../backend/src/libocl/src/ocl_workitem.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_common.h&quot; not found." verbose="Include file: &quot;ocl_common.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_common.tmpl.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_float.h&quot; not found." verbose="Include file: &quot;ocl_float.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_common.tmpl.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_relational.h&quot; not found." verbose="Include file: &quot;ocl_relational.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_common.tmpl.cl" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_integer.h&quot; not found." verbose="Include file: &quot;ocl_integer.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_integer.tmpl.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_math.h&quot; not found." verbose="Include file: &quot;ocl_math.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_float.h&quot; not found." verbose="Include file: &quot;ocl_float.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_relational.h&quot; not found." verbose="Include file: &quot;ocl_relational.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_common.h&quot; not found." verbose="Include file: &quot;ocl_common.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="21" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_integer.h&quot; not found." verbose="Include file: &quot;ocl_integer.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="22" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_convert.h&quot; not found." verbose="Include file: &quot;ocl_convert.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="23" column="0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="217" column="53" info="Null pointer dereference"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="218" column="52" info="Null pointer dereference"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="219" column="54" info="Null pointer dereference"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="434" column="62"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="435" column="61"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="436" column="63"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1432" column="15"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1567" column="39"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1571" column="26"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1630" column="39"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1634" column="26"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1694" column="39"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1698" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="78" column="9"/>
            <symbol>a</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hz&apos; can be reduced." verbose="The scope of the variable &apos;hz&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="78" column="11"/>
            <symbol>hz</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qx&apos; can be reduced." verbose="The scope of the variable &apos;qx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="78" column="18"/>
            <symbol>qx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi&apos; can be reduced." verbose="The scope of the variable &apos;pi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="848" column="2"/>
            <symbol>pi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi&apos; can be reduced." verbose="The scope of the variable &apos;pi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1012" column="2"/>
            <symbol>pi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi&apos; can be reduced." verbose="The scope of the variable &apos;pi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1177" column="2"/>
            <symbol>pi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p_half&apos; can be reduced." verbose="The scope of the variable &apos;p_half&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1554" column="9"/>
            <symbol>p_half</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p_half&apos; can be reduced." verbose="The scope of the variable &apos;p_half&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1617" column="9"/>
            <symbol>p_half</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p_half&apos; can be reduced." verbose="The scope of the variable &apos;p_half&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1681" column="9"/>
            <symbol>p_half</symbol>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="622" column="18" info="Shift"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 1465." verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 1465." cwe="758" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1466" column="12" info="Shift"/>
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1465" column="7" info="Assuming that condition &apos;n&lt;=31&apos; is not redundant"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 1477." verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 1477." cwe="758" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1478" column="12" info="Shift"/>
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1477" column="7" info="Assuming that condition &apos;n&lt;=31&apos; is not redundant"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="532" column="2"/>
            <symbol>i</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="534" column="63"/>
            <symbol>i</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="535" column="65"/>
            <symbol>i</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;halfPi_p4&apos; is assigned a value that is never used." verbose="Variable &apos;halfPi_p4&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="633" column="23"/>
            <symbol>halfPi_p4</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ix" verbose="Unused variable: ix" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="677" column="3"/>
            <symbol>ix</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ix" verbose="Unused variable: ix" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="682" column="3"/>
            <symbol>ix</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ix" verbose="Unused variable: ix" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="687" column="3"/>
            <symbol>ix</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;two52&apos; is assigned a value that is never used." verbose="Variable &apos;two52&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="845" column="9"/>
            <symbol>two52</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;two52&apos; is assigned a value that is never used." verbose="Variable &apos;two52&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1009" column="9"/>
            <symbol>two52</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;two52&apos; is assigned a value that is never used." verbose="Variable &apos;two52&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1174" column="9"/>
            <symbol>two52</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zero&apos; is assigned a value that is never used." verbose="Variable &apos;zero&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1554" column="22"/>
            <symbol>zero</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;xx&apos; is assigned a value that is never used." verbose="Variable &apos;xx&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1555" column="12"/>
            <symbol>xx</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lx&apos; is assigned a value that is never used." verbose="Variable &apos;lx&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1558" column="5"/>
            <symbol>lx</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zero&apos; is assigned a value that is never used." verbose="Variable &apos;zero&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1617" column="22"/>
            <symbol>zero</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;xx&apos; is assigned a value that is never used." verbose="Variable &apos;xx&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1618" column="12"/>
            <symbol>xx</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lx&apos; is assigned a value that is never used." verbose="Variable &apos;lx&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1621" column="5"/>
            <symbol>lx</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zero&apos; is assigned a value that is never used." verbose="Variable &apos;zero&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1681" column="22"/>
            <symbol>zero</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;xx&apos; is assigned a value that is never used." verbose="Variable &apos;xx&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1682" column="12"/>
            <symbol>xx</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lx&apos; is assigned a value that is never used." verbose="Variable &apos;lx&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math.tmpl.cl" line="1685" column="5"/>
            <symbol>lx</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_math_20.h&quot; not found." verbose="Include file: &quot;ocl_math_20.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_float.h&quot; not found." verbose="Include file: &quot;ocl_float.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_relational.h&quot; not found." verbose="Include file: &quot;ocl_relational.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_common.h&quot; not found." verbose="Include file: &quot;ocl_common.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="21" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_integer.h&quot; not found." verbose="Include file: &quot;ocl_integer.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="22" column="0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="215" column="46" info="Null pointer dereference"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="618" column="55"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="899" column="15"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="1033" column="39"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="1037" column="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="389" column="9"/>
            <symbol>a</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hz&apos; can be reduced." verbose="The scope of the variable &apos;hz&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="389" column="11"/>
            <symbol>hz</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qx&apos; can be reduced." verbose="The scope of the variable &apos;qx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="389" column="18"/>
            <symbol>qx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;two54&apos; can be reduced." verbose="The scope of the variable &apos;two54&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="672" column="12"/>
            <symbol>two54</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi&apos; can be reduced." verbose="The scope of the variable &apos;pi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="696" column="2"/>
            <symbol>pi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p_half&apos; can be reduced." verbose="The scope of the variable &apos;p_half&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="1020" column="9"/>
            <symbol>p_half</symbol>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="302" column="18" info="Shift"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 932." verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 932." cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="933" column="12" info="Shift"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="932" column="7" info="Assuming that condition &apos;n&lt;=31&apos; is not redundant"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 944." verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 944." cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="945" column="12" info="Shift"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="944" column="7" info="Assuming that condition &apos;n&lt;=31&apos; is not redundant"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="133" column="2"/>
            <symbol>i</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;halfPi_p4&apos; is assigned a value that is never used." verbose="Variable &apos;halfPi_p4&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="313" column="23"/>
            <symbol>halfPi_p4</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ix" verbose="Unused variable: ix" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="377" column="3"/>
            <symbol>ix</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;two52&apos; is assigned a value that is never used." verbose="Variable &apos;two52&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="693" column="9"/>
            <symbol>two52</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zero&apos; is assigned a value that is never used." verbose="Variable &apos;zero&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="1020" column="22"/>
            <symbol>zero</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;xx&apos; is assigned a value that is never used." verbose="Variable &apos;xx&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="1021" column="12"/>
            <symbol>xx</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lx&apos; is assigned a value that is never used." verbose="Variable &apos;lx&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_20.tmpl.cl" line="1024" column="5"/>
            <symbol>lx</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_math_common.h&quot; not found." verbose="Include file: &quot;ocl_math_common.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_float.h&quot; not found." verbose="Include file: &quot;ocl_float.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_relational.h&quot; not found." verbose="Include file: &quot;ocl_relational.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_common.h&quot; not found." verbose="Include file: &quot;ocl_common.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="21" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_integer.h&quot; not found." verbose="Include file: &quot;ocl_integer.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="22" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_convert.h&quot; not found." verbose="Include file: &quot;ocl_convert.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="23" column="0"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function copysign() is not used." verbose="Return value of function copysign() is not used." cwe="252" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6825" column="21"/>
            <symbol>copysign</symbol>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &apos;!&apos; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1296" column="24"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4608" column="6" info="Second condition"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4591" column="6" info="First condition"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4504" column="19" info="&apos;zero&apos; is assigned value &apos;0.0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;sign=0&apos; is always false" verbose="Condition &apos;sign=0&apos; is always false" cwe="570" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1079" column="17" info="Condition &apos;sign=0&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;j==0xc3160000&apos; is always false" verbose="Condition &apos;j==0xc3160000&apos; is always false" cwe="570" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2860" column="13" info="Condition &apos;j==0xc3160000&apos; is always false"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2855" column="13" info="Assuming that condition &apos;j==0x43000000&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;ix&gt;=0x3ff00000&apos; is always true" verbose="Condition &apos;ix&gt;=0x3ff00000&apos; is always true" cwe="571" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6054" column="8" info="Condition &apos;ix&gt;=0x3ff00000&apos; is always true"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6053" column="8" info="Assuming that condition &apos;ix&lt;=0x3fefffff&apos; is not redundant"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from float * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="774" column="8"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from double * to unsigned int * is not portable due to different binary data representations on different platforms." verbose="Casting from double * to unsigned int * is not portable due to different binary data representations on different platforms." cwe="704" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4909" column="14"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from double * to signed int * is not portable due to different binary data representations on different platforms." verbose="Casting from double * to signed int * is not portable due to different binary data representations on different platforms." cwe="704" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5984" column="10"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting from double * to unsigned int * is not portable due to different binary data representations on different platforms." verbose="Casting from double * to unsigned int * is not portable due to different binary data representations on different platforms." cwe="704" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6489" column="14"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;a&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;a&apos;. The initialized value is overwritten before it is read." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5228" column="16" info="a is overwritten"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5223" column="10" info="a is initialized"/>
            <symbol>a</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;b&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;b&apos;. The initialized value is overwritten before it is read." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5228" column="20" info="b is overwritten"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5223" column="14" info="b is initialized"/>
            <symbol>b</symbol>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="918" column="22"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1741" column="17"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1913" column="17"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2072" column="25"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2075" column="17"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2113" column="46"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3622" column="21"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3667" column="15"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3711" column="21"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3947" column="15"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5394" column="25"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5497" column="20"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5845" column="18"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6034" column="13"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6045" column="32"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6266" column="29"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6270" column="15"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6566" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;two25&apos; can be reduced." verbose="The scope of the variable &apos;two25&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="256" column="9"/>
            <symbol>two25</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;huge&apos; can be reduced." verbose="The scope of the variable &apos;huge&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="258" column="3"/>
            <symbol>huge</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="440" column="9"/>
            <symbol>a</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hz&apos; can be reduced." verbose="The scope of the variable &apos;hz&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="440" column="11"/>
            <symbol>hz</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qx&apos; can be reduced." verbose="The scope of the variable &apos;qx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="440" column="18"/>
            <symbol>qx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="908" column="24"/>
            <symbol>u</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;o_threshold&apos; can be reduced." verbose="The scope of the variable &apos;o_threshold&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1322" column="9"/>
            <symbol>o_threshold</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u_threshold&apos; can be reduced." verbose="The scope of the variable &apos;u_threshold&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1323" column="3"/>
            <symbol>u_threshold</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ivln2&apos; can be reduced." verbose="The scope of the variable &apos;ivln2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1325" column="3"/>
            <symbol>ivln2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ln2HI_1&apos; can be reduced." verbose="The scope of the variable &apos;ln2HI_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1334" column="9"/>
            <symbol>ln2HI_1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ln2LO_1&apos; can be reduced." verbose="The scope of the variable &apos;ln2LO_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1336" column="9"/>
            <symbol>ln2LO_1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;half_0&apos; can be reduced." verbose="The scope of the variable &apos;half_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1337" column="9"/>
            <symbol>half_0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;half_1&apos; can be reduced." verbose="The scope of the variable &apos;half_1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1338" column="9"/>
            <symbol>half_1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u_threshold&apos; can be reduced." verbose="The scope of the variable &apos;u_threshold&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1393" column="7"/>
            <symbol>u_threshold</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1536" column="12"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;P&apos; can be reduced." verbose="The scope of the variable &apos;P&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1537" column="12"/>
            <symbol>P</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Q&apos; can be reduced." verbose="The scope of the variable &apos;Q&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1537" column="14"/>
            <symbol>Q</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1537" column="18"/>
            <symbol>y</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;R&apos; can be reduced." verbose="The scope of the variable &apos;R&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1661" column="8"/>
            <symbol>R</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;S&apos; can be reduced." verbose="The scope of the variable &apos;S&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1661" column="10"/>
            <symbol>S</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;P&apos; can be reduced." verbose="The scope of the variable &apos;P&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1661" column="12"/>
            <symbol>P</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Q&apos; can be reduced." verbose="The scope of the variable &apos;Q&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1661" column="14"/>
            <symbol>Q</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1661" column="18"/>
            <symbol>y</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;one&apos; can be reduced." verbose="The scope of the variable &apos;one&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1728" column="9"/>
            <symbol>one</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tiny&apos; can be reduced." verbose="The scope of the variable &apos;tiny&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1809" column="3"/>
            <symbol>tiny</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ivln2&apos; can be reduced." verbose="The scope of the variable &apos;ivln2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1810" column="3"/>
            <symbol>ivln2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;o_threshold&apos; can be reduced." verbose="The scope of the variable &apos;o_threshold&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1812" column="3"/>
            <symbol>o_threshold</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi&apos; can be reduced." verbose="The scope of the variable &apos;hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1813" column="11"/>
            <symbol>hi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lo&apos; can be reduced." verbose="The scope of the variable &apos;lo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1813" column="14"/>
            <symbol>lo</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ln2&apos; can be reduced." verbose="The scope of the variable &apos;ln2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1933" column="3"/>
            <symbol>ln2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;huge&apos; can be reduced." verbose="The scope of the variable &apos;huge&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1934" column="3"/>
            <symbol>huge</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;one&apos; can be reduced." verbose="The scope of the variable &apos;one&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1959" column="9"/>
            <symbol>one</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;w&apos; can be reduced." verbose="The scope of the variable &apos;w&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1961" column="11"/>
            <symbol>w</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;two&apos; can be reduced." verbose="The scope of the variable &apos;two&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1992" column="18"/>
            <symbol>two</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tiny&apos; can be reduced." verbose="The scope of the variable &apos;tiny&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1992" column="27"/>
            <symbol>tiny</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t&apos; can be reduced." verbose="The scope of the variable &apos;t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1993" column="9"/>
            <symbol>t</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;one&apos; can be reduced." verbose="The scope of the variable &apos;one&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2028" column="3"/>
            <symbol>one</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zero&apos; can be reduced." verbose="The scope of the variable &apos;zero&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2062" column="9"/>
            <symbol>zero</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p_half&apos; can be reduced." verbose="The scope of the variable &apos;p_half&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2065" column="9"/>
            <symbol>p_half</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z_l&apos; can be reduced." verbose="The scope of the variable &apos;z_l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2352" column="18"/>
            <symbol>z_l</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2353" column="18"/>
            <symbol>r</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2353" column="20"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;w&apos; can be reduced." verbose="The scope of the variable &apos;w&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2353" column="31"/>
            <symbol>w</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;yisint&apos; can be reduced." verbose="The scope of the variable &apos;yisint&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2354" column="13"/>
            <symbol>yisint</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zero&apos; can be reduced." verbose="The scope of the variable &apos;zero&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2358" column="3"/>
            <symbol>zero</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L1&apos; can be reduced." verbose="The scope of the variable &apos;L1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2365" column="3"/>
            <symbol>L1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L2&apos; can be reduced." verbose="The scope of the variable &apos;L2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2366" column="3"/>
            <symbol>L2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ovt&apos; can be reduced." verbose="The scope of the variable &apos;ovt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2372" column="3"/>
            <symbol>ovt</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cp&apos; can be reduced." verbose="The scope of the variable &apos;cp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2373" column="3"/>
            <symbol>cp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cp_h&apos; can be reduced." verbose="The scope of the variable &apos;cp_h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2374" column="3"/>
            <symbol>cp_h</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cp_l&apos; can be reduced." verbose="The scope of the variable &apos;cp_l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2375" column="3"/>
            <symbol>cp_l</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ivln2_h&apos; can be reduced." verbose="The scope of the variable &apos;ivln2_h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2377" column="3"/>
            <symbol>ivln2_h</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2466" column="11"/>
            <symbol>s2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s_h&apos; can be reduced." verbose="The scope of the variable &apos;s_h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2466" column="14"/>
            <symbol>s_h</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s_l&apos; can be reduced." verbose="The scope of the variable &apos;s_l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2466" column="18"/>
            <symbol>s_l</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t_h&apos; can be reduced." verbose="The scope of the variable &apos;t_h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2466" column="22"/>
            <symbol>t_h</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t_l&apos; can be reduced." verbose="The scope of the variable &apos;t_l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2466" column="26"/>
            <symbol>t_l</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e&apos; can be reduced." verbose="The scope of the variable &apos;e&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2667" column="7"/>
            <symbol>e</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z_h&apos; can be reduced." verbose="The scope of the variable &apos;z_h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2728" column="14"/>
            <symbol>z_h</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z_l&apos; can be reduced." verbose="The scope of the variable &apos;z_l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2728" column="18"/>
            <symbol>z_l</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2729" column="20"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2951" column="9"/>
            <symbol>a</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b&apos; can be reduced." verbose="The scope of the variable &apos;b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2951" column="12"/>
            <symbol>b</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;an&apos; can be reduced." verbose="The scope of the variable &apos;an&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2951" column="15"/>
            <symbol>an</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bn&apos; can be reduced." verbose="The scope of the variable &apos;bn&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2951" column="19"/>
            <symbol>bn</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cn&apos; can be reduced." verbose="The scope of the variable &apos;cn&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2951" column="23"/>
            <symbol>cn</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e&apos; can be reduced." verbose="The scope of the variable &apos;e&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2952" column="7"/>
            <symbol>e</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hx&apos; can be reduced." verbose="The scope of the variable &apos;hx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2998" column="16"/>
            <symbol>hx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sx&apos; can be reduced." verbose="The scope of the variable &apos;sx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2998" column="20"/>
            <symbol>sx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hy&apos; can be reduced." verbose="The scope of the variable &apos;hy&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2998" column="24"/>
            <symbol>hy</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sy&apos; can be reduced." verbose="The scope of the variable &apos;sy&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2998" column="28"/>
            <symbol>sy</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pio2_hi&apos; can be reduced." verbose="The scope of the variable &apos;pio2_hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3600" column="5"/>
            <symbol>pio2_hi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pio4_hi&apos; can be reduced." verbose="The scope of the variable &apos;pio4_hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3690" column="5"/>
            <symbol>pio4_hi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3703" column="20"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3703" column="22"/>
            <symbol>r</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ln2&apos; can be reduced." verbose="The scope of the variable &apos;ln2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3751" column="2"/>
            <symbol>ln2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;huge&apos; can be reduced." verbose="The scope of the variable &apos;huge&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3752" column="2"/>
            <symbol>huge</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;huge&apos; can be reduced." verbose="The scope of the variable &apos;huge&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3805" column="2"/>
            <symbol>huge</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zero&apos; can be reduced." verbose="The scope of the variable &apos;zero&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3852" column="2"/>
            <symbol>zero</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;halF&apos; can be reduced." verbose="The scope of the variable &apos;halF&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3965" column="2"/>
            <symbol>halF</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;o_threshold&apos; can be reduced." verbose="The scope of the variable &apos;o_threshold&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3968" column="2"/>
            <symbol>o_threshold</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u_threshold&apos; can be reduced." verbose="The scope of the variable &apos;u_threshold&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3969" column="2"/>
            <symbol>u_threshold</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;invln2&apos; can be reduced." verbose="The scope of the variable &apos;invln2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3974" column="2"/>
            <symbol>invln2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tiny&apos; can be reduced." verbose="The scope of the variable &apos;tiny&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4036" column="2"/>
            <symbol>tiny</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;o_threshold&apos; can be reduced." verbose="The scope of the variable &apos;o_threshold&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4037" column="2"/>
            <symbol>o_threshold</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;invln2&apos; can be reduced." verbose="The scope of the variable &apos;invln2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4040" column="2"/>
            <symbol>invln2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi&apos; can be reduced." verbose="The scope of the variable &apos;hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4048" column="11"/>
            <symbol>hi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lo&apos; can be reduced." verbose="The scope of the variable &apos;lo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4048" column="14"/>
            <symbol>lo</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;erx&apos; can be reduced." verbose="The scope of the variable &apos;erx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4146" column="9"/>
            <symbol>erx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;efx&apos; can be reduced." verbose="The scope of the variable &apos;efx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4147" column="2"/>
            <symbol>efx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;efx8&apos; can be reduced." verbose="The scope of the variable &apos;efx8&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4148" column="2"/>
            <symbol>efx8</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp0&apos; can be reduced." verbose="The scope of the variable &apos;pp0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4149" column="2"/>
            <symbol>pp0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp1&apos; can be reduced." verbose="The scope of the variable &apos;pp1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4150" column="2"/>
            <symbol>pp1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp2&apos; can be reduced." verbose="The scope of the variable &apos;pp2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4151" column="2"/>
            <symbol>pp2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp3&apos; can be reduced." verbose="The scope of the variable &apos;pp3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4152" column="2"/>
            <symbol>pp3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qq1&apos; can be reduced." verbose="The scope of the variable &apos;qq1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4154" column="2"/>
            <symbol>qq1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qq2&apos; can be reduced." verbose="The scope of the variable &apos;qq2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4155" column="2"/>
            <symbol>qq2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qq3&apos; can be reduced." verbose="The scope of the variable &apos;qq3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4156" column="2"/>
            <symbol>qq3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qq4&apos; can be reduced." verbose="The scope of the variable &apos;qq4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4157" column="2"/>
            <symbol>qq4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pa0&apos; can be reduced." verbose="The scope of the variable &apos;pa0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4159" column="2"/>
            <symbol>pa0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pa1&apos; can be reduced." verbose="The scope of the variable &apos;pa1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4160" column="2"/>
            <symbol>pa1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pa2&apos; can be reduced." verbose="The scope of the variable &apos;pa2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4161" column="2"/>
            <symbol>pa2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pa3&apos; can be reduced." verbose="The scope of the variable &apos;pa3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4162" column="2"/>
            <symbol>pa3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pa4&apos; can be reduced." verbose="The scope of the variable &apos;pa4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4163" column="2"/>
            <symbol>pa4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pa5&apos; can be reduced." verbose="The scope of the variable &apos;pa5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4164" column="2"/>
            <symbol>pa5</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qa1&apos; can be reduced." verbose="The scope of the variable &apos;qa1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4166" column="2"/>
            <symbol>qa1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qa2&apos; can be reduced." verbose="The scope of the variable &apos;qa2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4167" column="2"/>
            <symbol>qa2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qa3&apos; can be reduced." verbose="The scope of the variable &apos;qa3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4168" column="2"/>
            <symbol>qa3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qa4&apos; can be reduced." verbose="The scope of the variable &apos;qa4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4169" column="2"/>
            <symbol>qa4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qa5&apos; can be reduced." verbose="The scope of the variable &apos;qa5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4170" column="2"/>
            <symbol>qa5</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra0&apos; can be reduced." verbose="The scope of the variable &apos;ra0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4172" column="2"/>
            <symbol>ra0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra1&apos; can be reduced." verbose="The scope of the variable &apos;ra1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4173" column="2"/>
            <symbol>ra1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra2&apos; can be reduced." verbose="The scope of the variable &apos;ra2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4174" column="2"/>
            <symbol>ra2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra3&apos; can be reduced." verbose="The scope of the variable &apos;ra3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4175" column="2"/>
            <symbol>ra3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra4&apos; can be reduced." verbose="The scope of the variable &apos;ra4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4176" column="2"/>
            <symbol>ra4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra5&apos; can be reduced." verbose="The scope of the variable &apos;ra5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4177" column="2"/>
            <symbol>ra5</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra6&apos; can be reduced." verbose="The scope of the variable &apos;ra6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4178" column="2"/>
            <symbol>ra6</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa1&apos; can be reduced." verbose="The scope of the variable &apos;sa1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4180" column="2"/>
            <symbol>sa1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa2&apos; can be reduced." verbose="The scope of the variable &apos;sa2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4181" column="2"/>
            <symbol>sa2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa3&apos; can be reduced." verbose="The scope of the variable &apos;sa3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4182" column="2"/>
            <symbol>sa3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa4&apos; can be reduced." verbose="The scope of the variable &apos;sa4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4183" column="2"/>
            <symbol>sa4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa5&apos; can be reduced." verbose="The scope of the variable &apos;sa5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4184" column="2"/>
            <symbol>sa5</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa6&apos; can be reduced." verbose="The scope of the variable &apos;sa6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4185" column="2"/>
            <symbol>sa6</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa7&apos; can be reduced." verbose="The scope of the variable &apos;sa7&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4186" column="2"/>
            <symbol>sa7</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rb0&apos; can be reduced." verbose="The scope of the variable &apos;rb0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4188" column="2"/>
            <symbol>rb0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rb1&apos; can be reduced." verbose="The scope of the variable &apos;rb1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4189" column="2"/>
            <symbol>rb1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rb2&apos; can be reduced." verbose="The scope of the variable &apos;rb2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4190" column="2"/>
            <symbol>rb2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rb3&apos; can be reduced." verbose="The scope of the variable &apos;rb3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4191" column="2"/>
            <symbol>rb3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rb4&apos; can be reduced." verbose="The scope of the variable &apos;rb4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4192" column="2"/>
            <symbol>rb4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rb5&apos; can be reduced." verbose="The scope of the variable &apos;rb5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4193" column="2"/>
            <symbol>rb5</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb1&apos; can be reduced." verbose="The scope of the variable &apos;sb1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4195" column="2"/>
            <symbol>sb1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb2&apos; can be reduced." verbose="The scope of the variable &apos;sb2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4196" column="2"/>
            <symbol>sb2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb3&apos; can be reduced." verbose="The scope of the variable &apos;sb3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4197" column="9"/>
            <symbol>sb3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb4&apos; can be reduced." verbose="The scope of the variable &apos;sb4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4198" column="2"/>
            <symbol>sb4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb5&apos; can be reduced." verbose="The scope of the variable &apos;sb5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4199" column="2"/>
            <symbol>sb5</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb6&apos; can be reduced." verbose="The scope of the variable &apos;sb6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4200" column="2"/>
            <symbol>sb6</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tiny&apos; can be reduced." verbose="The scope of the variable &apos;tiny&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4203" column="9"/>
            <symbol>tiny</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4208" column="12"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;P&apos; can be reduced." verbose="The scope of the variable &apos;P&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4209" column="13"/>
            <symbol>P</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Q&apos; can be reduced." verbose="The scope of the variable &apos;Q&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4209" column="15"/>
            <symbol>Q</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4209" column="19"/>
            <symbol>y</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;erx&apos; can be reduced." verbose="The scope of the variable &apos;erx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4260" column="9"/>
            <symbol>erx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp0&apos; can be reduced." verbose="The scope of the variable &apos;pp0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4263" column="2"/>
            <symbol>pp0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp1&apos; can be reduced." verbose="The scope of the variable &apos;pp1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4264" column="2"/>
            <symbol>pp1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp2&apos; can be reduced." verbose="The scope of the variable &apos;pp2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4265" column="2"/>
            <symbol>pp2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp3&apos; can be reduced." verbose="The scope of the variable &apos;pp3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4266" column="2"/>
            <symbol>pp3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qq1&apos; can be reduced." verbose="The scope of the variable &apos;qq1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4268" column="2"/>
            <symbol>qq1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qq2&apos; can be reduced." verbose="The scope of the variable &apos;qq2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4269" column="2"/>
            <symbol>qq2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qq3&apos; can be reduced." verbose="The scope of the variable &apos;qq3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4270" column="2"/>
            <symbol>qq3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qq4&apos; can be reduced." verbose="The scope of the variable &apos;qq4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4271" column="2"/>
            <symbol>qq4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pa0&apos; can be reduced." verbose="The scope of the variable &apos;pa0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4273" column="2"/>
            <symbol>pa0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pa1&apos; can be reduced." verbose="The scope of the variable &apos;pa1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4274" column="2"/>
            <symbol>pa1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pa2&apos; can be reduced." verbose="The scope of the variable &apos;pa2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4275" column="2"/>
            <symbol>pa2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pa3&apos; can be reduced." verbose="The scope of the variable &apos;pa3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4276" column="2"/>
            <symbol>pa3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pa4&apos; can be reduced." verbose="The scope of the variable &apos;pa4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4277" column="2"/>
            <symbol>pa4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pa5&apos; can be reduced." verbose="The scope of the variable &apos;pa5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4278" column="2"/>
            <symbol>pa5</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qa1&apos; can be reduced." verbose="The scope of the variable &apos;qa1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4280" column="2"/>
            <symbol>qa1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qa2&apos; can be reduced." verbose="The scope of the variable &apos;qa2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4281" column="2"/>
            <symbol>qa2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qa3&apos; can be reduced." verbose="The scope of the variable &apos;qa3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4282" column="2"/>
            <symbol>qa3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qa4&apos; can be reduced." verbose="The scope of the variable &apos;qa4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4283" column="2"/>
            <symbol>qa4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qa5&apos; can be reduced." verbose="The scope of the variable &apos;qa5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4284" column="2"/>
            <symbol>qa5</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra0&apos; can be reduced." verbose="The scope of the variable &apos;ra0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4286" column="2"/>
            <symbol>ra0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra1&apos; can be reduced." verbose="The scope of the variable &apos;ra1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4287" column="2"/>
            <symbol>ra1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra2&apos; can be reduced." verbose="The scope of the variable &apos;ra2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4288" column="2"/>
            <symbol>ra2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra3&apos; can be reduced." verbose="The scope of the variable &apos;ra3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4289" column="2"/>
            <symbol>ra3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra4&apos; can be reduced." verbose="The scope of the variable &apos;ra4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4290" column="2"/>
            <symbol>ra4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra5&apos; can be reduced." verbose="The scope of the variable &apos;ra5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4291" column="2"/>
            <symbol>ra5</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ra6&apos; can be reduced." verbose="The scope of the variable &apos;ra6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4292" column="2"/>
            <symbol>ra6</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa1&apos; can be reduced." verbose="The scope of the variable &apos;sa1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4294" column="2"/>
            <symbol>sa1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa2&apos; can be reduced." verbose="The scope of the variable &apos;sa2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4295" column="2"/>
            <symbol>sa2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa3&apos; can be reduced." verbose="The scope of the variable &apos;sa3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4296" column="2"/>
            <symbol>sa3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa4&apos; can be reduced." verbose="The scope of the variable &apos;sa4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4297" column="2"/>
            <symbol>sa4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa5&apos; can be reduced." verbose="The scope of the variable &apos;sa5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4298" column="2"/>
            <symbol>sa5</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa6&apos; can be reduced." verbose="The scope of the variable &apos;sa6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4299" column="2"/>
            <symbol>sa6</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sa7&apos; can be reduced." verbose="The scope of the variable &apos;sa7&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4300" column="2"/>
            <symbol>sa7</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rb0&apos; can be reduced." verbose="The scope of the variable &apos;rb0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4302" column="2"/>
            <symbol>rb0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rb1&apos; can be reduced." verbose="The scope of the variable &apos;rb1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4303" column="2"/>
            <symbol>rb1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rb2&apos; can be reduced." verbose="The scope of the variable &apos;rb2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4304" column="2"/>
            <symbol>rb2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rb3&apos; can be reduced." verbose="The scope of the variable &apos;rb3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4305" column="2"/>
            <symbol>rb3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rb4&apos; can be reduced." verbose="The scope of the variable &apos;rb4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4306" column="2"/>
            <symbol>rb4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rb5&apos; can be reduced." verbose="The scope of the variable &apos;rb5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4307" column="2"/>
            <symbol>rb5</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb1&apos; can be reduced." verbose="The scope of the variable &apos;sb1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4309" column="2"/>
            <symbol>sb1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb2&apos; can be reduced." verbose="The scope of the variable &apos;sb2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4310" column="2"/>
            <symbol>sb2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb3&apos; can be reduced." verbose="The scope of the variable &apos;sb3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4311" column="9"/>
            <symbol>sb3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb4&apos; can be reduced." verbose="The scope of the variable &apos;sb4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4312" column="2"/>
            <symbol>sb4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb5&apos; can be reduced." verbose="The scope of the variable &apos;sb5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4313" column="2"/>
            <symbol>sb5</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb6&apos; can be reduced." verbose="The scope of the variable &apos;sb6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4314" column="2"/>
            <symbol>sb6</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;halfD&apos; can be reduced." verbose="The scope of the variable &apos;halfD&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4318" column="9"/>
            <symbol>halfD</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;R&apos; can be reduced." verbose="The scope of the variable &apos;R&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4323" column="9"/>
            <symbol>R</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;S&apos; can be reduced." verbose="The scope of the variable &apos;S&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4323" column="11"/>
            <symbol>S</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;P&apos; can be reduced." verbose="The scope of the variable &apos;P&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4323" column="13"/>
            <symbol>P</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Q&apos; can be reduced." verbose="The scope of the variable &apos;Q&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4323" column="15"/>
            <symbol>Q</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4323" column="19"/>
            <symbol>y</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;B1&apos; can be reduced." verbose="The scope of the variable &apos;B1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4383" column="9"/>
            <symbol>B1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;B2&apos; can be reduced." verbose="The scope of the variable &apos;B2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4384" column="2"/>
            <symbol>B2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;two54&apos; can be reduced." verbose="The scope of the variable &apos;two54&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4470" column="9"/>
            <symbol>two54</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;npio2_hw&apos; can be reduced." verbose="The scope of the variable &apos;npio2_hw&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4686" column="6"/>
            <symbol>npio2_hw</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;halfD&apos; can be reduced." verbose="The scope of the variable &apos;halfD&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4696" column="2"/>
            <symbol>halfD</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;w&apos; can be reduced." verbose="The scope of the variable &apos;w&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4706" column="11"/>
            <symbol>w</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t&apos; can be reduced." verbose="The scope of the variable &apos;t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4706" column="13"/>
            <symbol>t</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4706" column="15"/>
            <symbol>r</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fn&apos; can be reduced." verbose="The scope of the variable &apos;fn&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4706" column="17"/>
            <symbol>fn</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4708" column="11"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4803" column="9"/>
            <symbol>a</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hz&apos; can be reduced." verbose="The scope of the variable &apos;hz&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4803" column="11"/>
            <symbol>hz</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;halfD&apos; can be reduced." verbose="The scope of the variable &apos;halfD&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4828" column="9"/>
            <symbol>halfD</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z&apos; can be reduced." verbose="The scope of the variable &apos;z&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4850" column="14"/>
            <symbol>z</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hibits&apos; can be reduced." verbose="The scope of the variable &apos;hibits&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5108" column="10"/>
            <symbol>hibits</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lobits&apos; can be reduced." verbose="The scope of the variable &apos;lobits&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5108" column="18"/>
            <symbol>lobits</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bits_lost&apos; can be reduced." verbose="The scope of the variable &apos;bits_lost&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5109" column="9"/>
            <symbol>bits_lost</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;two54&apos; can be reduced." verbose="The scope of the variable &apos;two54&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5153" column="12"/>
            <symbol>two54</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y2&apos; can be reduced." verbose="The scope of the variable &apos;y2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5223" column="26"/>
            <symbol>y2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5224" column="6"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;two54&apos; can be reduced." verbose="The scope of the variable &apos;two54&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5290" column="2"/>
            <symbol>two54</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hfsq&apos; can be reduced." verbose="The scope of the variable &apos;hfsq&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5300" column="9"/>
            <symbol>hfsq</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zero&apos; can be reduced." verbose="The scope of the variable &apos;zero&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5371" column="2"/>
            <symbol>zero</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;two54&apos; can be reduced." verbose="The scope of the variable &apos;two54&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5372" column="2"/>
            <symbol>two54</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hfsq&apos; can be reduced." verbose="The scope of the variable &apos;hfsq&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5381" column="9"/>
            <symbol>hfsq</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zero&apos; can be reduced." verbose="The scope of the variable &apos;zero&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5438" column="9"/>
            <symbol>zero</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;two54&apos; can be reduced." verbose="The scope of the variable &apos;two54&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5439" column="2"/>
            <symbol>two54</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;two54&apos; can be reduced." verbose="The scope of the variable &apos;two54&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5478" column="2"/>
            <symbol>two54</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lx&apos; can be reduced." verbose="The scope of the variable &apos;lx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5572" column="9"/>
            <symbol>lx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ix&apos; can be reduced." verbose="The scope of the variable &apos;ix&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5572" column="12"/>
            <symbol>ix</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi&apos; can be reduced." verbose="The scope of the variable &apos;pi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5598" column="2"/>
            <symbol>pi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bp&apos; can be reduced." verbose="The scope of the variable &apos;bp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5942" column="9"/>
            <symbol>bp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dp_h&apos; can be reduced." verbose="The scope of the variable &apos;dp_h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5943" column="2"/>
            <symbol>dp_h</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dp_l&apos; can be reduced." verbose="The scope of the variable &apos;dp_l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5944" column="2"/>
            <symbol>dp_l</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;two53&apos; can be reduced." verbose="The scope of the variable &apos;two53&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5948" column="2"/>
            <symbol>two53</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L1&apos; can be reduced." verbose="The scope of the variable &apos;L1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5952" column="2"/>
            <symbol>L1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L2&apos; can be reduced." verbose="The scope of the variable &apos;L2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5953" column="2"/>
            <symbol>L2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L3&apos; can be reduced." verbose="The scope of the variable &apos;L3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5954" column="2"/>
            <symbol>L3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L4&apos; can be reduced." verbose="The scope of the variable &apos;L4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5955" column="2"/>
            <symbol>L4</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L5&apos; can be reduced." verbose="The scope of the variable &apos;L5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5956" column="2"/>
            <symbol>L5</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ovt&apos; can be reduced." verbose="The scope of the variable &apos;ovt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5966" column="2"/>
            <symbol>ovt</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cp_h&apos; can be reduced." verbose="The scope of the variable &apos;cp_h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5968" column="2"/>
            <symbol>cp_h</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cp_l&apos; can be reduced." verbose="The scope of the variable &apos;cp_l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5969" column="2"/>
            <symbol>cp_l</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ivln2_h&apos; can be reduced." verbose="The scope of the variable &apos;ivln2_h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5971" column="2"/>
            <symbol>ivln2_h</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z_h&apos; can be reduced." verbose="The scope of the variable &apos;z_h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5974" column="14"/>
            <symbol>z_h</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z_l&apos; can be reduced." verbose="The scope of the variable &apos;z_l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5974" column="18"/>
            <symbol>z_l</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p_half&apos; can be reduced." verbose="The scope of the variable &apos;p_half&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6255" column="9"/>
            <symbol>p_half</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zero&apos; can be reduced." verbose="The scope of the variable &apos;zero&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6255" column="17"/>
            <symbol>zero</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6295" column="7"/>
            <symbol>ret</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6333" column="7"/>
            <symbol>ret</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z&apos; can be reduced." verbose="The scope of the variable &apos;z&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6434" column="14"/>
            <symbol>z</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;w&apos; can be reduced." verbose="The scope of the variable &apos;w&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6463" column="11"/>
            <symbol>w</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t1&apos; can be reduced." verbose="The scope of the variable &apos;t1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6550" column="16"/>
            <symbol>t1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6551" column="22"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z&apos; can be reduced." verbose="The scope of the variable &apos;z&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6752" column="14"/>
            <symbol>z</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;two&apos; can be reduced." verbose="The scope of the variable &apos;two&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6775" column="18"/>
            <symbol>two</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tiny&apos; can be reduced." verbose="The scope of the variable &apos;tiny&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6775" column="27"/>
            <symbol>tiny</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t&apos; can be reduced." verbose="The scope of the variable &apos;t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6776" column="9"/>
            <symbol>t</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi&apos; can be reduced." verbose="The scope of the variable &apos;pi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6874" column="2"/>
            <symbol>pi</symbol>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="574" column="34"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1381" column="35"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1386" column="41"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1441" column="37"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1883" column="36"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting by a negative value is undefined behaviour" verbose="Shifting by a negative value is undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1889" column="55"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1892" column="36"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4023" column="29"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4026" column="36"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4116" column="30"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting by a negative value is undefined behaviour" verbose="Shifting by a negative value is undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4121" column="40"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4123" column="30"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4780" column="24"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6723" column="29"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;x&apos; shadows outer argument" verbose="Local variable &apos;x&apos; shadows outer argument" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2962" column="8" info="Shadow variable"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2947" column="32" info="Shadowed declaration"/>
            <symbol>x</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;exp&apos; shadows outer function" verbose="Local variable &apos;exp&apos; shadows outer function" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4441" column="9" info="Shadow variable"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3175" column="20" info="Shadowed declaration"/>
            <symbol>exp</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;exp&apos; shadows outer function" verbose="Local variable &apos;exp&apos; shadows outer function" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5014" column="9" info="Shadow variable"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3175" column="20" info="Shadowed declaration"/>
            <symbol>exp</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;exp&apos; shadows outer function" verbose="Local variable &apos;exp&apos; shadows outer function" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6297" column="6" info="Shadow variable"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3175" column="20" info="Shadowed declaration"/>
            <symbol>exp</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;exp&apos; shadows outer function" verbose="Local variable &apos;exp&apos; shadows outer function" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6335" column="6" info="Shadow variable"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3175" column="20" info="Shadowed declaration"/>
            <symbol>exp</symbol>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1296" column="41"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;|&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a|b?c:d&apos;&apos; should be written as either &apos;&apos;(a|b)?c:d&apos;&apos; or &apos;&apos;a|(b?c:d)&apos;&apos;." cwe="783" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1299" column="29"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;atanhi&apos; can be declared as const array" verbose="Variable &apos;atanhi&apos; can be declared as const array" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3776" column="9" info="Variable &apos;atanhi&apos; can be declared as const array"/>
            <symbol>atanhi</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;atanlo&apos; can be declared as const array" verbose="Variable &apos;atanlo&apos; can be declared as const array" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3783" column="9" info="Variable &apos;atanlo&apos; can be declared as const array"/>
            <symbol>atanlo</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;aT&apos; can be declared as const array" verbose="Variable &apos;aT&apos; can be declared as const array" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3790" column="9" info="Variable &apos;aT&apos; can be declared as const array"/>
            <symbol>aT</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;ln2HI&apos; can be declared as const array" verbose="Variable &apos;ln2HI&apos; can be declared as const array" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3970" column="2" info="Variable &apos;ln2HI&apos; can be declared as const array"/>
            <symbol>ln2HI</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;ln2LO&apos; can be declared as const array" verbose="Variable &apos;ln2LO&apos; can be declared as const array" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3972" column="2" info="Variable &apos;ln2LO&apos; can be declared as const array"/>
            <symbol>ln2LO</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;halF&apos; can be declared as const array" verbose="Variable &apos;halF&apos; can be declared as const array" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3965" column="2" info="Variable &apos;halF&apos; can be declared as const array"/>
            <symbol>halF</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;x&apos; can be declared as pointer to const" verbose="Parameter &apos;x&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4502" column="31" info="Parameter &apos;x&apos; can be declared as pointer to const"/>
            <symbol>x</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;PIo2&apos; can be declared as const array" verbose="Variable &apos;PIo2&apos; can be declared as const array" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4509" column="9" info="Variable &apos;PIo2&apos; can be declared as const array"/>
            <symbol>PIo2</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;npio2_hw&apos; can be declared as const array" verbose="Variable &apos;npio2_hw&apos; can be declared as const array" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4686" column="6" info="Variable &apos;npio2_hw&apos; can be declared as const array"/>
            <symbol>npio2_hw</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;two_over_pi&apos; can be declared as const array" verbose="Variable &apos;two_over_pi&apos; can be declared as const array" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4672" column="6" info="Variable &apos;two_over_pi&apos; can be declared as const array"/>
            <symbol>two_over_pi</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;bp&apos; can be declared as const array" verbose="Variable &apos;bp&apos; can be declared as const array" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5942" column="9" info="Variable &apos;bp&apos; can be declared as const array"/>
            <symbol>bp</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;dp_l&apos; can be declared as const array" verbose="Variable &apos;dp_l&apos; can be declared as const array" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5944" column="2" info="Variable &apos;dp_l&apos; can be declared as const array"/>
            <symbol>dp_l</symbol>
        </error>
        <error id="constVariable" severity="style" msg="Variable &apos;dp_h&apos; can be declared as const array" verbose="Variable &apos;dp_h&apos; can be declared as const array" cwe="398" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5943" column="2" info="Variable &apos;dp_h&apos; can be declared as const array"/>
            <symbol>dp_h</symbol>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="384" column="18" info="Shift"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3870" column="10" info="Shift"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 5875." verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 5875." cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5876" column="18" info="Shift"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5875" column="10" info="Assuming that condition &apos;n&lt;=31&apos; is not redundant"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 5887." verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 5887." cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5888" column="18" info="Shift"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5887" column="10" info="Assuming that condition &apos;n&lt;=31&apos; is not redundant"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 5996." verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 5996." cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5998" column="9" info="Shift"/>
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5996" column="7" info="Assuming that condition &apos;k&gt;20&apos; is not redundant"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6042" column="9" info="Shift"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 64-bit value by 63 bits is implementation-defined behaviour" verbose="Shifting signed 64-bit value by 63 bits is implementation-defined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6302" column="25" info="Shift"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 64-bit value by 63 bits is implementation-defined behaviour" verbose="Shifting signed 64-bit value by 63 bits is implementation-defined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6306" column="16" info="Shift"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 64-bit value by 63 bits is implementation-defined behaviour" verbose="Shifting signed 64-bit value by 63 bits is implementation-defined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6340" column="25" info="Shift"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 64-bit value by 63 bits is implementation-defined behaviour" verbose="Shifting signed 64-bit value by 63 bits is implementation-defined behaviour" cwe="758" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6344" column="16" info="Shift"/>
        </error>
        <error id="legacyUninitvar" severity="error" msg="Uninitialized variable: t" verbose="Uninitialized variable: t" cwe="457" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3717" column="13"/>
            <symbol>t</symbol>
        </error>
        <error id="legacyUninitvar" severity="error" msg="Uninitialized variable: k" verbose="Uninitialized variable: k" cwe="457" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4020" column="5"/>
            <symbol>k</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;two25&apos; is assigned a value that is never used." verbose="Variable &apos;two25&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="184" column="9"/>
            <symbol>two25</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zero&apos; is assigned a value that is never used." verbose="Variable &apos;zero&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="190" column="22"/>
            <symbol>zero</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: t2" verbose="Unused variable: t2" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="191" column="33"/>
            <symbol>t2</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: j" verbose="Unused variable: j" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="192" column="17"/>
            <symbol>j</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: z" verbose="Unused variable: z" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="227" column="12"/>
            <symbol>z</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zero&apos; is assigned a value that is never used." verbose="Variable &apos;zero&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="247" column="22"/>
            <symbol>zero</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;halfPi_p4&apos; is assigned a value that is never used." verbose="Variable &apos;halfPi_p4&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="395" column="23"/>
            <symbol>halfPi_p4</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ix" verbose="Unused variable: ix" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="464" column="11"/>
            <symbol>ix</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ix" verbose="Unused variable: ix" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="497" column="11"/>
            <symbol>ix</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ix" verbose="Unused variable: ix" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="627" column="12"/>
            <symbol>ix</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;B2&apos; is assigned a value that is never used." verbose="Variable &apos;B2&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1052" column="6"/>
            <symbol>B2</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;huge&apos; is assigned a value that is never used." verbose="Variable &apos;huge&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1182" column="32"/>
            <symbol>huge</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;o_threshold&apos; is assigned a value that is never used." verbose="Variable &apos;o_threshold&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1392" column="21"/>
            <symbol>o_threshold</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ln2HI_1&apos; is assigned a value that is never used." verbose="Variable &apos;ln2HI_1&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1402" column="17"/>
            <symbol>ln2HI_1</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ln2LO_1&apos; is assigned a value that is never used." verbose="Variable &apos;ln2LO_1&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1404" column="17"/>
            <symbol>ln2LO_1</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;half_val&apos; is assigned a value that is never used." verbose="Variable &apos;half_val&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1464" column="9"/>
            <symbol>half_val</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;two&apos; is assigned a value that is never used." verbose="Variable &apos;two&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1466" column="5"/>
            <symbol>two</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;efx&apos; is assigned a value that is never used." verbose="Variable &apos;efx&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1597" column="5"/>
            <symbol>efx</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;efx8&apos; is assigned a value that is never used." verbose="Variable &apos;efx8&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="1598" column="5"/>
            <symbol>efx8</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tiny&apos; is assigned a value that is never used." verbose="Variable &apos;tiny&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2027" column="8"/>
            <symbol>tiny</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;two&apos; is assigned a value that is never used." verbose="Variable &apos;two&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2360" column="7"/>
            <symbol>two</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;two24&apos; is assigned a value that is never used." verbose="Variable &apos;two24&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2361" column="9"/>
            <symbol>two24</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tiny&apos; is assigned a value that is never used." verbose="Variable &apos;tiny&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2363" column="11"/>
            <symbol>tiny</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;P1&apos; is assigned a value that is never used." verbose="Variable &apos;P1&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2367" column="8"/>
            <symbol>P1</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;P2&apos; is assigned a value that is never used." verbose="Variable &apos;P2&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2368" column="8"/>
            <symbol>P2</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lg2&apos; is assigned a value that is never used." verbose="Variable &apos;lg2&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2369" column="8"/>
            <symbol>lg2</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lg2_h&apos; is assigned a value that is never used." verbose="Variable &apos;lg2_h&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2370" column="10"/>
            <symbol>lg2_h</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lg2_l&apos; is assigned a value that is never used." verbose="Variable &apos;lg2_l&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2371" column="10"/>
            <symbol>lg2_l</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;u&apos; is assigned a value that is never used." verbose="Variable &apos;u&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2512" column="9"/>
            <symbol>u</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: z_h" verbose="Unused variable: z_h" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2352" column="14"/>
            <symbol>z_h</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2354" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zero&apos; is assigned a value that is never used." verbose="Variable &apos;zero&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2706" column="11"/>
            <symbol>zero</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;two24&apos; is assigned a value that is never used." verbose="Variable &apos;two24&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2709" column="9"/>
            <symbol>two24</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;two25&apos; is assigned a value that is never used." verbose="Variable &apos;two25&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2925" column="15"/>
            <symbol>two25</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;huge&apos; is assigned a value that is never used." verbose="Variable &apos;huge&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2927" column="12"/>
            <symbol>huge</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tiny&apos; is assigned a value that is never used." verbose="Variable &apos;tiny&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2927" column="28"/>
            <symbol>tiny</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;halfD&apos; is assigned a value that is never used." verbose="Variable &apos;halfD&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4204" column="15"/>
            <symbol>halfD</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;two&apos; is assigned a value that is never used." verbose="Variable &apos;two&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4206" column="13"/>
            <symbol>two</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;efx&apos; is assigned a value that is never used." verbose="Variable &apos;efx&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4261" column="6"/>
            <symbol>efx</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;efx8&apos; is assigned a value that is never used." verbose="Variable &apos;efx8&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="4262" column="6"/>
            <symbol>efx8</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: oround" verbose="Unused variable: oround" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5176" column="9"/>
            <symbol>oround</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;two52&apos; is assigned a value that is never used." verbose="Variable &apos;two52&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5595" column="9"/>
            <symbol>two52</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i1&apos; is assigned a value that is never used." verbose="Variable &apos;i1&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="5984" column="32"/>
            <symbol>i1</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: hy" verbose="Unused variable: hy" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6201" column="9"/>
            <symbol>hy</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iy" verbose="Unused variable: iy" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6201" column="15"/>
            <symbol>iy</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ly" verbose="Unused variable: ly" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6202" column="14"/>
            <symbol>ly</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ax" verbose="Unused variable: ax" cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6370" column="9"/>
            <symbol>ax</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;two52&apos; is assigned a value that is never used." verbose="Variable &apos;two52&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="6871" column="9"/>
            <symbol>two52</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_relational.h&quot; not found." verbose="Include file: &quot;ocl_relational.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_relational.tmpl.cl" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_float.h&quot; not found." verbose="Include file: &quot;ocl_float.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_relational.tmpl.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_simd.h&quot; not found." verbose="Include file: &quot;ocl_simd.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="19" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_workitem.h&quot; not found." verbose="Include file: &quot;ocl_workitem.h&quot; not found.">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="20" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Config/llvm-config.h&quot; not found." verbose="Include file: &quot;llvm/Config/llvm-config.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.hpp" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Pass.h&quot; not found." verbose="Include file: &quot;llvm/Pass.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.hpp" line="31" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Analysis/LoopPass.h&quot; not found." verbose="Include file: &quot;llvm/Analysis/LoopPass.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.hpp" line="32" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/Instructions.h&quot; not found." verbose="Include file: &quot;llvm/IR/Instructions.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.hpp" line="33" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/platform.hpp&quot; not found." verbose="Include file: &quot;sys/platform.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.hpp" line="34" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/map.hpp&quot; not found." verbose="Include file: &quot;sys/map.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.hpp" line="35" column="0"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;symbol&apos; should be passed by const reference." verbose="Parameter &apos;symbol&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="../backend/src/llvm/ExpandConstantExpr.cpp">
            <location file="../backend/src/llvm/llvm_gen_backend.hpp" line="81" column="42" info="Function parameter &apos;symbol&apos; should be passed by const reference."/>
            <symbol>symbol</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Config/llvm-config.h&quot; not found." verbose="Include file: &quot;llvm/Config/llvm-config.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/BasicBlock.h&quot; not found." verbose="Include file: &quot;llvm/IR/BasicBlock.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/Constants.h&quot; not found." verbose="Include file: &quot;llvm/IR/Constants.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="31" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/Function.h&quot; not found." verbose="Include file: &quot;llvm/IR/Function.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="32" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/Instructions.h&quot; not found." verbose="Include file: &quot;llvm/IR/Instructions.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="33" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/Module.h&quot; not found." verbose="Include file: &quot;llvm/IR/Module.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="34" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/IRBuilder.h&quot; not found." verbose="Include file: &quot;llvm/IR/IRBuilder.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="35" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/DataLayout.h&quot; not found." verbose="Include file: &quot;llvm/IR/DataLayout.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="36" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/DerivedTypes.h&quot; not found." verbose="Include file: &quot;llvm/IR/DerivedTypes.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="37" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/InstrTypes.h&quot; not found." verbose="Include file: &quot;llvm/IR/InstrTypes.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="38" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/IntrinsicInst.h&quot; not found." verbose="Include file: &quot;llvm/IR/IntrinsicInst.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="39" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/Attributes.h&quot; not found." verbose="Include file: &quot;llvm/IR/Attributes.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="40" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/CallingConv.h&quot; not found." verbose="Include file: &quot;llvm/IR/CallingConv.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="41" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/Intrinsics.h&quot; not found." verbose="Include file: &quot;llvm/IR/Intrinsics.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="42" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/InlineAsm.h&quot; not found." verbose="Include file: &quot;llvm/IR/InlineAsm.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="43" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/LLVMContext.h&quot; not found." verbose="Include file: &quot;llvm/IR/LLVMContext.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="44" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Pass.h&quot; not found." verbose="Include file: &quot;llvm/Pass.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="48" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/ADT/DenseMap.h&quot; not found." verbose="Include file: &quot;llvm/ADT/DenseMap.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="49" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/ADT/PostOrderIterator.h&quot; not found." verbose="Include file: &quot;llvm/ADT/PostOrderIterator.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="50" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/ADT/STLExtras.h&quot; not found." verbose="Include file: &quot;llvm/ADT/STLExtras.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="51" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/ADT/SmallVector.h&quot; not found." verbose="Include file: &quot;llvm/ADT/SmallVector.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="52" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/ADT/StringExtras.h&quot; not found." verbose="Include file: &quot;llvm/ADT/StringExtras.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="53" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/ADT/SmallString.h&quot; not found." verbose="Include file: &quot;llvm/ADT/SmallString.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="54" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Analysis/ScalarEvolution.h&quot; not found." verbose="Include file: &quot;llvm/Analysis/ScalarEvolution.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="56" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Analysis/ScalarEvolutionExpressions.h&quot; not found." verbose="Include file: &quot;llvm/Analysis/ScalarEvolutionExpressions.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="57" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Analysis/CFGPrinter.h&quot; not found." verbose="Include file: &quot;llvm/Analysis/CFGPrinter.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="58" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Analysis/LoopPass.h&quot; not found." verbose="Include file: &quot;llvm/Analysis/LoopPass.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="59" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Analysis/TargetTransformInfo.h&quot; not found." verbose="Include file: &quot;llvm/Analysis/TargetTransformInfo.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="60" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Analysis/LoopInfo.h&quot; not found." verbose="Include file: &quot;llvm/Analysis/LoopInfo.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="61" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Analysis/ValueTracking.h&quot; not found." verbose="Include file: &quot;llvm/Analysis/ValueTracking.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="62" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Analysis/Passes.h&quot; not found." verbose="Include file: &quot;llvm/Analysis/Passes.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="63" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/raw_ostream.h&quot; not found." verbose="Include file: &quot;llvm/Support/raw_ostream.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="65" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/Debug.h&quot; not found." verbose="Include file: &quot;llvm/Support/Debug.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="66" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/MathExtras.h&quot; not found." verbose="Include file: &quot;llvm/Support/MathExtras.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="67" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/FileSystem.h&quot; not found." verbose="Include file: &quot;llvm/Support/FileSystem.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="68" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/MemoryBuffer.h&quot; not found." verbose="Include file: &quot;llvm/Support/MemoryBuffer.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="69" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/SourceMgr.h&quot; not found." verbose="Include file: &quot;llvm/Support/SourceMgr.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="70" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/ErrorHandling.h&quot; not found." verbose="Include file: &quot;llvm/Support/ErrorHandling.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="71" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/FormattedStream.h&quot; not found." verbose="Include file: &quot;llvm/Support/FormattedStream.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="72" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/TargetRegistry.h&quot; not found." verbose="Include file: &quot;llvm/Support/TargetRegistry.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="73" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/Host.h&quot; not found." verbose="Include file: &quot;llvm/Support/Host.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="74" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/ToolOutputFile.h&quot; not found." verbose="Include file: &quot;llvm/Support/ToolOutputFile.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="75" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm-c/Linker.h&quot; not found." verbose="Include file: &quot;llvm-c/Linker.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="77" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IRReader/IRReader.h&quot; not found." verbose="Include file: &quot;llvm/IRReader/IRReader.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="78" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Bitcode/ReaderWriter.h&quot; not found." verbose="Include file: &quot;llvm/Bitcode/ReaderWriter.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="83" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Transforms/IPO.h&quot; not found." verbose="Include file: &quot;llvm/Transforms/IPO.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="85" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Transforms/Utils/Cloning.h&quot; not found." verbose="Include file: &quot;llvm/Transforms/Utils/Cloning.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="86" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/CodeGen/Passes.h&quot; not found." verbose="Include file: &quot;llvm/CodeGen/Passes.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="88" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/CodeGen/IntrinsicLowering.h&quot; not found." verbose="Include file: &quot;llvm/CodeGen/IntrinsicLowering.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="89" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Transforms/Scalar.h&quot; not found." verbose="Include file: &quot;llvm/Transforms/Scalar.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="91" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/MC/MCAsmInfo.h&quot; not found." verbose="Include file: &quot;llvm/MC/MCAsmInfo.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="96" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/MC/MCContext.h&quot; not found." verbose="Include file: &quot;llvm/MC/MCContext.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="97" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/MC/MCInstrInfo.h&quot; not found." verbose="Include file: &quot;llvm/MC/MCInstrInfo.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="98" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/MC/MCObjectFileInfo.h&quot; not found." verbose="Include file: &quot;llvm/MC/MCObjectFileInfo.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="99" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/MC/MCRegisterInfo.h&quot; not found." verbose="Include file: &quot;llvm/MC/MCRegisterInfo.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="100" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/MC/MCSubtargetInfo.h&quot; not found." verbose="Include file: &quot;llvm/MC/MCSubtargetInfo.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="101" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/MC/MCSymbol.h&quot; not found." verbose="Include file: &quot;llvm/MC/MCSymbol.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="102" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/CallSite.h&quot; not found." verbose="Include file: &quot;llvm/Support/CallSite.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="114" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/CFG.h&quot; not found." verbose="Include file: &quot;llvm/Support/CFG.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="115" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/InstIterator.h&quot; not found." verbose="Include file: &quot;llvm/Support/InstIterator.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="116" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/InstVisitor.h&quot; not found." verbose="Include file: &quot;llvm/InstVisitor.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="117" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Analysis/Verifier.h&quot; not found." verbose="Include file: &quot;llvm/Analysis/Verifier.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="118" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Analysis/Dominators.h&quot; not found." verbose="Include file: &quot;llvm/Analysis/Dominators.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="119" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Assembly/PrintModulePass.h&quot; not found." verbose="Include file: &quot;llvm/Assembly/PrintModulePass.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="120" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Target/Mangler.h&quot; not found." verbose="Include file: &quot;llvm/Target/Mangler.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="121" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Target/TargetLibraryInfo.h&quot; not found." verbose="Include file: &quot;llvm/Target/TargetLibraryInfo.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="128" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/PassManager.h&quot; not found." verbose="Include file: &quot;llvm/PassManager.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="129" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/ADT/Triple.h&quot; not found." verbose="Include file: &quot;llvm/ADT/Triple.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_includes.hpp" line="131" column="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: vec" verbose="Possible null pointer dereference: vec" cwe="476" file0="../backend/src/llvm/ExpandLargeIntegers.cpp">
            <location file="../backend/src/llvm/ExpandLargeIntegers.cpp" line="469" column="11" info="Null pointer dereference"/>
            <location file="../backend/src/llvm/ExpandLargeIntegers.cpp" line="464" column="30" info="Assuming condition is false"/>
            <location file="../backend/src/llvm/ExpandLargeIntegers.cpp" line="461" column="20" info="Assignment &apos;vec=NULL&apos;, assigned value is 0"/>
            <symbol>vec</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;BB&apos; can be declared as pointer to const" verbose="Variable &apos;BB&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/llvm/ExpandUtils.cpp">
            <location file="../backend/src/llvm/ExpandUtils.cpp" line="91" column="19" info="Variable &apos;BB&apos; can be declared as pointer to const"/>
            <symbol>BB</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StripAttributes&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StripAttributes&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/llvm/StripAttributes.cpp">
            <location file="../backend/src/llvm/StripAttributes.cpp" line="82" column="5"/>
            <symbol>StripAttributes</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found." verbose="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_barrier_nodup.cpp" line="33" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/map.hpp&quot; not found." verbose="Include file: &quot;sys/map.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_barrier_nodup.cpp" line="34" column="0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BarrierNodup&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BarrierNodup&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/llvm/llvm_barrier_nodup.cpp">
            <location file="../backend/src/llvm/llvm_barrier_nodup.cpp" line="44" column="7"/>
            <symbol>BarrierNodup</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_bitcode_link.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;src/GBEConfig.h&quot; not found." verbose="Include file: &quot;src/GBEConfig.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_bitcode_link.cpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found." verbose="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_bitcode_link.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_bitcode_link.cpp" line="29" column="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_bitcode_link.cpp">
            <location file="../backend/src/llvm/llvm_bitcode_link.cpp" line="241" column="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_bitcode_link.cpp">
            <location file="../backend/src/llvm/llvm_bitcode_link.cpp" line="294" column="21"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/llvm/llvm_bitcode_link.cpp">
            <location file="../backend/src/llvm/llvm_bitcode_link.cpp" line="85" column="75"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="21" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_common_defines.h&quot; not found." verbose="Include file: &quot;ocl_common_defines.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="23" column="0"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on &apos;I&apos; - it&apos;s already a pointer." verbose="Redundant pointer operation on &apos;I&apos; - it&apos;s already a pointer." cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="176" column="48"/>
            <symbol>I</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;f&apos; shadows outer variable" verbose="Local variable &apos;f&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="264" column="25" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="192" column="17" info="Shadowed declaration"/>
            <symbol>f</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;bt&apos; shadows outer variable" verbose="Local variable &apos;bt&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="275" column="28" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="245" column="26" info="Shadowed declaration"/>
            <symbol>bt</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;f&apos; shadows outer variable" verbose="Local variable &apos;f&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="276" column="25" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="192" column="17" info="Shadowed declaration"/>
            <symbol>f</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;bt&apos; shadows outer variable" verbose="Local variable &apos;bt&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="289" column="28" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="245" column="26" info="Shadowed declaration"/>
            <symbol>bt</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;v&apos; shadows outer variable" verbose="Local variable &apos;v&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="291" column="25" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="244" column="20" info="Shadowed declaration"/>
            <symbol>v</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;f&apos; shadows outer variable" verbose="Local variable &apos;f&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="294" column="25" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="192" column="17" info="Shadowed declaration"/>
            <symbol>f</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;v&apos; shadows outer variable" verbose="Local variable &apos;v&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="302" column="22" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="244" column="20" info="Shadowed declaration"/>
            <symbol>v</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;f&apos; shadows outer variable" verbose="Local variable &apos;f&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="324" column="25" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="192" column="17" info="Shadowed declaration"/>
            <symbol>f</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;bt&apos; shadows outer variable" verbose="Local variable &apos;bt&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="317" column="32" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="245" column="26" info="Shadowed declaration"/>
            <symbol>bt</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;f&apos; shadows outer variable" verbose="Local variable &apos;f&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="318" column="29" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="192" column="17" info="Shadowed declaration"/>
            <symbol>f</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;f&apos; shadows outer variable" verbose="Local variable &apos;f&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="371" column="23" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="192" column="17" info="Shadowed declaration"/>
            <symbol>f</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;block&apos; shadows outer variable" verbose="Local variable &apos;block&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="347" column="22" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="343" column="20" info="Shadowed declaration"/>
            <symbol>block</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;f&apos; shadows outer variable" verbose="Local variable &apos;f&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="363" column="29" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="192" column="17" info="Shadowed declaration"/>
            <symbol>f</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;int64Ty&apos; can be declared as pointer to const" verbose="Variable &apos;int64Ty&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/llvm/llvm_device_enqueue.cpp">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="381" column="21" info="Variable &apos;int64Ty&apos; can be declared as pointer to const"/>
            <symbol>int64Ty</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found." verbose="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.cpp" line="76" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/context.hpp&quot; not found." verbose="Include file: &quot;ir/context.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.cpp" line="77" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.cpp" line="78" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/half.hpp&quot; not found." verbose="Include file: &quot;ir/half.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.cpp" line="79" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/liveness.hpp&quot; not found." verbose="Include file: &quot;ir/liveness.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.cpp" line="80" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/value.hpp&quot; not found." verbose="Include file: &quot;ir/value.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.cpp" line="81" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/set.hpp&quot; not found." verbose="Include file: &quot;sys/set.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.cpp" line="82" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.cpp" line="83" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;backend/program.h&quot; not found." verbose="Include file: &quot;backend/program.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.cpp" line="84" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/DebugLoc.h&quot; not found." verbose="Include file: &quot;llvm/IR/DebugLoc.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.cpp" line="86" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/DebugInfo.h&quot; not found." verbose="Include file: &quot;llvm/IR/DebugInfo.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_gen_backend.cpp" line="87" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="#error &quot;Only LLVM 3.3 and newer are supported&quot;" verbose="#error &quot;Only LLVM 3.3 and newer are supported&quot;" file0="../backend/src/llvm/llvm_gen_backend.cpp">
            <location file="../backend/src/llvm/llvm_gen_backend.cpp" line="99" column="2"/>
        </error>
        <error id="noValidConfiguration" severity="information" msg="This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details." verbose="This file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:\012&apos;&apos; : [../backend/src/llvm/llvm_gen_backend.cpp:99] #error &quot;Only LLVM 3.3 and newer are supported&quot;\012GBE_COMPILER_AVAILABLE : [../backend/src/llvm/llvm_gen_backend.cpp:99] #error &quot;Only LLVM 3.3 and newer are supported&quot;\012GBE_DEBUG : [../backend/src/llvm/llvm_gen_backend.cpp:99] #error &quot;Only LLVM 3.3 and newer are supported&quot;\012GEN7_SAMPLER_CLAMP_BORDER_WORKAROUND : [../backend/src/llvm/llvm_gen_backend.cpp:99] #error &quot;Only LLVM 3.3 and newer are supported&quot;\012LLVM_VERSION_MAJOR : [../backend/src/llvm/llvm_gen_backend.cpp:99] #error &quot;Only LLVM 3.3 and newer are supported&quot;\012LLVM_VERSION_MINOR : [../backend/src/llvm/llvm_gen_backend.cpp:99] #error &quot;Only LLVM 3.3 and newer are supported&quot;" file0="../backend/src/llvm/llvm_gen_backend.cpp">
            <location file="../backend/src/llvm/llvm_gen_backend.cpp" line="0" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found." verbose="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_intrinsic_lowering.cpp" line="25" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/map.hpp&quot; not found." verbose="Include file: &quot;sys/map.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_intrinsic_lowering.cpp" line="26" column="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GenLoadStoreOptimization::SE&apos; is not initialized in the constructor." verbose="Member variable &apos;GenLoadStoreOptimization::SE&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/llvm/llvm_loadstore_optimization.cpp">
            <location file="../backend/src/llvm/llvm_loadstore_optimization.cpp" line="35" column="5"/>
            <symbol>GenLoadStoreOptimization::SE</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GenLoadStoreOptimization::TD&apos; is not initialized in the constructor." verbose="Member variable &apos;GenLoadStoreOptimization::TD&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/llvm/llvm_loadstore_optimization.cpp">
            <location file="../backend/src/llvm/llvm_loadstore_optimization.cpp" line="35" column="5"/>
            <symbol>GenLoadStoreOptimization::TD</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ready&apos; can be reduced." verbose="The scope of the variable &apos;ready&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="../backend/src/llvm/llvm_loadstore_optimization.cpp">
            <location file="../backend/src/llvm/llvm_loadstore_optimization.cpp" line="237" column="10"/>
            <symbol>ready</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;m0&apos; can be declared as pointer to const" verbose="Parameter &apos;m0&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/llvm/llvm_loadstore_optimization.cpp">
            <location file="../backend/src/llvm/llvm_loadstore_optimization.cpp" line="204" column="33" info="Parameter &apos;m0&apos; can be declared as pointer to const"/>
            <symbol>m0</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;m1&apos; can be declared as pointer to const" verbose="Parameter &apos;m1&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/llvm/llvm_loadstore_optimization.cpp">
            <location file="../backend/src/llvm/llvm_loadstore_optimization.cpp" line="204" column="49" info="Parameter &apos;m1&apos; can be declared as pointer to const"/>
            <symbol>m1</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found." verbose="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_passes.cpp" line="35" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_passes.cpp" line="36" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/map.hpp&quot; not found." verbose="Include file: &quot;sys/map.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_passes.cpp" line="37" column="0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GenRemoveGEPPasss&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GenRemoveGEPPasss&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/llvm/llvm_passes.cpp">
            <location file="../backend/src/llvm/llvm_passes.cpp" line="227" column="5"/>
            <symbol>GenRemoveGEPPasss</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;I&apos; shadows outer variable" verbose="Local variable &apos;I&apos; shadows outer variable" cwe="398" file0="../backend/src/llvm/llvm_passes.cpp">
            <location file="../backend/src/llvm/llvm_passes.cpp" line="250" column="39" info="Shadow variable"/>
            <location file="../backend/src/llvm/llvm_passes.cpp" line="248" column="37" info="Shadowed declaration"/>
            <symbol>I</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;op&apos; can be declared as pointer to const" verbose="Variable &apos;op&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/llvm/llvm_passes.cpp">
            <location file="../backend/src/llvm/llvm_passes.cpp" line="57" column="17" info="Variable &apos;op&apos; can be declared as pointer to const"/>
            <symbol>op</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found." verbose="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="38" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/map.hpp&quot; not found." verbose="Include file: &quot;sys/map.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="39" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/printf.hpp&quot; not found." verbose="Include file: &quot;ir/printf.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="40" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="41" column="0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PrintfParser&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PrintfParser&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="301" column="5"/>
            <symbol>PrintfParser</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="182" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="183" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="184" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="185" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="186" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="187" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="188" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="189" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="190" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="191" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="192" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="193" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="194" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="195" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="196" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="197" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="198" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="350" column="42"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="388" column="66"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;end&apos; can be declared as pointer to const" verbose="Parameter &apos;end&apos; can be declared as pointer to const" cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="50" column="55" info="Parameter &apos;end&apos; can be declared as pointer to const"/>
            <symbol>end</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="217" column="7"/>
            <symbol>p</symbol>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/llvm/llvm_printf_parser.cpp">
            <location file="../backend/src/llvm/llvm_printf_parser.cpp" line="423" column="73"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Config/llvm-config.h&quot; not found." verbose="Include file: &quot;llvm/Config/llvm-config.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/Function.h&quot; not found." verbose="Include file: &quot;llvm/IR/Function.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="29" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/InstrTypes.h&quot; not found." verbose="Include file: &quot;llvm/IR/InstrTypes.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="30" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/Instructions.h&quot; not found." verbose="Include file: &quot;llvm/IR/Instructions.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="31" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/IntrinsicInst.h&quot; not found." verbose="Include file: &quot;llvm/IR/IntrinsicInst.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="32" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/Module.h&quot; not found." verbose="Include file: &quot;llvm/IR/Module.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="33" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Pass.h&quot; not found." verbose="Include file: &quot;llvm/Pass.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="34" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/IRBuilder.h&quot; not found." verbose="Include file: &quot;llvm/IR/IRBuilder.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="35" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/CallSite.h&quot; not found." verbose="Include file: &quot;llvm/Support/CallSite.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="41" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/CFG.h&quot; not found." verbose="Include file: &quot;llvm/Support/CFG.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="42" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Support/raw_ostream.h&quot; not found." verbose="Include file: &quot;llvm/Support/raw_ostream.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="45" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/IR/Attributes.h&quot; not found." verbose="Include file: &quot;llvm/IR/Attributes.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="46" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found." verbose="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="48" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/map.hpp&quot; not found." verbose="Include file: &quot;sys/map.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="49" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="50" column="0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ProfilingInserter&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ProfilingInserter&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/llvm/llvm_profiling.cpp">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="74" column="5"/>
            <symbol>ProfilingInserter</symbol>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/llvm/llvm_profiling.cpp">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="132" column="73"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/llvm/llvm_profiling.cpp">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="138" column="34"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/llvm/llvm_profiling.cpp">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="142" column="11"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/llvm/llvm_profiling.cpp">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="147" column="11"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/llvm/llvm_profiling.cpp">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="181" column="5"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/llvm/llvm_profiling.cpp">
            <location file="../backend/src/llvm/llvm_profiling.cpp" line="183" column="5"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ocl_common_defines.h&quot; not found." verbose="Include file: &quot;ocl_common_defines.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_sampler_fix.cpp" line="27" column="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;needFix&apos; is assigned a value that is never used." verbose="Variable &apos;needFix&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/llvm/llvm_sampler_fix.cpp">
            <location file="../backend/src/llvm/llvm_sampler_fix.cpp" line="56" column="22"/>
            <symbol>needFix</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;needFix&apos; is assigned a value that is never used." verbose="Variable &apos;needFix&apos; is assigned a value that is never used." cwe="563" file0="../backend/src/llvm/llvm_sampler_fix.cpp">
            <location file="../backend/src/llvm/llvm_sampler_fix.cpp" line="106" column="22"/>
            <symbol>needFix</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found." verbose="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_scalarize.cpp" line="64" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/map.hpp&quot; not found." verbose="Include file: &quot;sys/map.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_scalarize.cpp" line="65" column="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Scalarize::module&apos; is not initialized in the constructor." verbose="Member variable &apos;Scalarize::module&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/llvm/llvm_scalarize.cpp">
            <location file="../backend/src/llvm/llvm_scalarize.cpp" line="97" column="5"/>
            <symbol>Scalarize::module</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Scalarize::builder&apos; is not initialized in the constructor." verbose="Member variable &apos;Scalarize::builder&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/llvm/llvm_scalarize.cpp">
            <location file="../backend/src/llvm/llvm_scalarize.cpp" line="97" column="5"/>
            <symbol>Scalarize::builder</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Scalarize::intTy&apos; is not initialized in the constructor." verbose="Member variable &apos;Scalarize::intTy&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/llvm/llvm_scalarize.cpp">
            <location file="../backend/src/llvm/llvm_scalarize.cpp" line="97" column="5"/>
            <symbol>Scalarize::intTy</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Scalarize::floatTy&apos; is not initialized in the constructor." verbose="Member variable &apos;Scalarize::floatTy&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="../backend/src/llvm/llvm_scalarize.cpp">
            <location file="../backend/src/llvm/llvm_scalarize.cpp" line="97" column="5"/>
            <symbol>Scalarize::floatTy</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;instVal==nullptr&apos; is always false" verbose="Condition &apos;instVal==nullptr&apos; is always false" cwe="570" file0="../backend/src/llvm/llvm_scalarize.cpp">
            <location file="../backend/src/llvm/llvm_scalarize.cpp" line="870" column="16" info="Condition &apos;instVal==nullptr&apos; is always false"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found." verbose="Include file: &quot;llvm/llvm_gen_backend.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_to_gen.cpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/llvm_to_gen.hpp&quot; not found." verbose="Include file: &quot;llvm/llvm_to_gen.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_to_gen.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_to_gen.cpp" line="31" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/platform.hpp&quot; not found." verbose="Include file: &quot;sys/platform.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_to_gen.cpp" line="32" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/unit.hpp&quot; not found." verbose="Include file: &quot;ir/unit.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_to_gen.cpp" line="33" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/function.hpp&quot; not found." verbose="Include file: &quot;ir/function.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_to_gen.cpp" line="34" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;ir/structurizer.hpp&quot; not found." verbose="Include file: &quot;ir/structurizer.hpp&quot; not found.">
            <location file="../backend/src/llvm/llvm_to_gen.cpp" line="35" column="0"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: errInfo" verbose="Unused variable: errInfo" cwe="563" file0="../backend/src/llvm/llvm_to_gen.cpp">
            <location file="../backend/src/llvm/llvm_to_gen.cpp" line="287" column="17"/>
            <symbol>errInfo</symbol>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="../backend/src/llvm/llvm_to_gen.cpp">
            <location file="../backend/src/llvm/llvm_to_gen.cpp" line="419" column="7"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;llvm/Config/llvm-config.h&quot; not found." verbose="Include file: &quot;llvm/Config/llvm-config.h&quot; not found.">
            <location file="../backend/src/llvm/llvm_unroll.cpp" line="18" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/assert.hpp&quot; not found." verbose="Include file: &quot;sys/assert.hpp&quot; not found.">
            <location file="../backend/src/sys/assert.cpp" line="26" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/exception.hpp&quot; not found." verbose="Include file: &quot;sys/exception.hpp&quot; not found.">
            <location file="../backend/src/sys/assert.cpp" line="27" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/cvar.hpp&quot; not found." verbose="Include file: &quot;sys/cvar.hpp&quot; not found.">
            <location file="../backend/src/sys/assert.cpp" line="28" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/platform.hpp&quot; not found." verbose="Include file: &quot;sys/platform.hpp&quot; not found.">
            <location file="../backend/src/sys/intrusive_list.hpp" line="26" column="0"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;intrusive_list_iterator&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;intrusive_list_iterator&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="../backend/src/sys/intrusive_list.cpp">
            <location file="../backend/src/sys/intrusive_list.hpp" line="56" column="12"/>
            <symbol>intrusive_list_iterator</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;sys/mutex.hpp&quot; not found." verbose="Include file: &quot;sys/mutex.hpp&quot; not found.">
            <location file="../backend/src/sys/mutex.cpp" line="19" column="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/sys/mutex.cpp">
            <location file="../backend/src/sys/mutex.cpp" line="42" column="80"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/sys/mutex.cpp">
            <location file="../backend/src/sys/mutex.cpp" line="43" column="55"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/sys/mutex.cpp">
            <location file="../backend/src/sys/mutex.cpp" line="44" column="52"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/sys/mutex.cpp">
            <location file="../backend/src/sys/mutex.cpp" line="45" column="56"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/sys/mutex.cpp">
            <location file="../backend/src/sys/mutex.cpp" line="29" column="88"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/sys/mutex.cpp">
            <location file="../backend/src/sys/mutex.cpp" line="30" column="55"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/sys/mutex.cpp">
            <location file="../backend/src/sys/mutex.cpp" line="31" column="54"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="../backend/src/sys/mutex.cpp">
            <location file="../backend/src/sys/mutex.cpp" line="32" column="56"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dumpFreeList&apos; is never used." verbose="The function &apos;dumpFreeList&apos; is never used." cwe="561">
            <location file="../backend/src/backend/context.cpp" line="128" column="0"/>
            <symbol>dumpFreeList</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;doZeroAddedOptimization&apos; is never used." verbose="The function &apos;doZeroAddedOptimization&apos; is never used." cwe="561">
            <location file="../backend/src/backend/gen_insn_selection_optimize.cpp" line="307" column="0"/>
            <symbol>doZeroAddedOptimization</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getPrintfBufBTI&apos; is never used." verbose="The function &apos;getPrintfBufBTI&apos; is never used." cwe="561">
            <location file="../backend/src/backend/program.hpp" line="168" column="0"/>
            <symbol>getPrintfBufBTI</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getProfilingBufBTI&apos; is never used." verbose="The function &apos;getProfilingBufBTI&apos; is never used." cwe="561">
            <location file="../backend/src/backend/program.hpp" line="173" column="0"/>
            <symbol>getProfilingBufBTI</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_code&apos; is never used." verbose="The function &apos;get_code&apos; is never used." cwe="561">
            <location file="../backend/src/gbe_bin_generater.cpp" line="113" column="0"/>
            <symbol>get_code</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_size&apos; is never used." verbose="The function &apos;get_size&apos; is never used." cwe="561">
            <location file="../backend/src/gbe_bin_generater.cpp" line="121" column="0"/>
            <symbol>get_size</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dump&apos; is never used." verbose="The function &apos;dump&apos; is never used." cwe="561">
            <location file="../backend/src/gbe_bin_generater.cpp" line="129" column="0"/>
            <symbol>dump</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getConstantNum&apos; is never used." verbose="The function &apos;getConstantNum&apos; is never used." cwe="561">
            <location file="../backend/src/ir/constant.hpp" line="74" column="0"/>
            <symbol>getConstantNum</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getConstant&apos; is never used." verbose="The function &apos;getConstant&apos; is never used." cwe="561">
            <location file="../backend/src/ir/constant.hpp" line="76" column="0"/>
            <symbol>getConstant</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;setData&apos; is never used." verbose="The function &apos;setData&apos; is never used." cwe="561">
            <location file="../backend/src/ir/constant.hpp" line="94" column="0"/>
            <symbol>setData</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;newIntegerImmediate&apos; is never used." verbose="The function &apos;newIntegerImmediate&apos; is never used." cwe="561">
            <location file="../backend/src/ir/context.hpp" line="86" column="0"/>
            <symbol>newIntegerImmediate</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;newFloatImmediate&apos; is never used." verbose="The function &apos;newFloatImmediate&apos; is never used." cwe="561">
            <location file="../backend/src/ir/context.hpp" line="100" column="0"/>
            <symbol>newFloatImmediate</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;newDoubleImmediate&apos; is never used." verbose="The function &apos;newDoubleImmediate&apos; is never used." cwe="561">
            <location file="../backend/src/ir/context.hpp" line="103" column="0"/>
            <symbol>newDoubleImmediate</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;processImm&apos; is never used." verbose="The function &apos;processImm&apos; is never used." cwe="561">
            <location file="../backend/src/ir/context.hpp" line="107" column="0"/>
            <symbol>processImm</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;immReg&apos; is never used." verbose="The function &apos;immReg&apos; is never used." cwe="561">
            <location file="../backend/src/ir/context.hpp" line="122" column="0"/>
            <symbol>immReg</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;arrayTuple&apos; is never used." verbose="The function &apos;arrayTuple&apos; is never used." cwe="561">
            <location file="../backend/src/ir/context.hpp" line="148" column="0"/>
            <symbol>arrayTuple</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;arrayTypeTuple&apos; is never used." verbose="The function &apos;arrayTypeTuple&apos; is never used." cwe="561">
            <location file="../backend/src/ir/context.hpp" line="153" column="0"/>
            <symbol>arrayTypeTuple</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getVal&apos; is never used." verbose="The function &apos;getVal&apos; is never used." cwe="561">
            <location file="../backend/src/ir/half.hpp" line="43" column="0"/>
            <symbol>getVal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getInfoOffset&apos; is never used." verbose="The function &apos;getInfoOffset&apos; is never used." cwe="561">
            <location file="../backend/src/ir/image.cpp" line="79" column="0"/>
            <symbol>getInfoOffset</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getIdx&apos; is never used." verbose="The function &apos;getIdx&apos; is never used." cwe="561">
            <location file="../backend/src/ir/image.cpp" line="88" column="0"/>
            <symbol>getIdx</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;asFloatValue&apos; is never used." verbose="The function &apos;asFloatValue&apos; is never used." cwe="561">
            <location file="../backend/src/ir/immediate.hpp" line="216" column="0"/>
            <symbol>asFloatValue</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;asHalfValue&apos; is never used." verbose="The function &apos;asHalfValue&apos; is never used." cwe="561">
            <location file="../backend/src/ir/immediate.hpp" line="226" column="0"/>
            <symbol>asHalfValue</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SIMD_SIZE&apos; is never used." verbose="The function &apos;SIMD_SIZE&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2522" column="0"/>
            <symbol>SIMD_SIZE</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SIMD_ID&apos; is never used." verbose="The function &apos;SIMD_ID&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2523" column="0"/>
            <symbol>SIMD_ID</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;COS&apos; is never used." verbose="The function &apos;COS&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2543" column="0"/>
            <symbol>COS</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SIN&apos; is never used." verbose="The function &apos;SIN&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2544" column="0"/>
            <symbol>SIN</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;LOG&apos; is never used." verbose="The function &apos;LOG&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2545" column="0"/>
            <symbol>LOG</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SQR&apos; is never used." verbose="The function &apos;SQR&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2546" column="0"/>
            <symbol>SQR</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;RSQ&apos; is never used." verbose="The function &apos;RSQ&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2547" column="0"/>
            <symbol>RSQ</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;POW&apos; is never used." verbose="The function &apos;POW&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2562" column="0"/>
            <symbol>POW</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ADDSAT&apos; is never used." verbose="The function &apos;ADDSAT&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2565" column="0"/>
            <symbol>ADDSAT</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SUB&apos; is never used." verbose="The function &apos;SUB&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2566" column="0"/>
            <symbol>SUB</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SUBSAT&apos; is never used." verbose="The function &apos;SUBSAT&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2567" column="0"/>
            <symbol>SUBSAT</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;MUL_HI&apos; is never used." verbose="The function &apos;MUL_HI&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2568" column="0"/>
            <symbol>MUL_HI</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;I64_MUL_HI&apos; is never used." verbose="The function &apos;I64_MUL_HI&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2569" column="0"/>
            <symbol>I64_MUL_HI</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;UPSAMPLE_SHORT&apos; is never used." verbose="The function &apos;UPSAMPLE_SHORT&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2570" column="0"/>
            <symbol>UPSAMPLE_SHORT</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;UPSAMPLE_INT&apos; is never used." verbose="The function &apos;UPSAMPLE_INT&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2571" column="0"/>
            <symbol>UPSAMPLE_INT</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;UPSAMPLE_LONG&apos; is never used." verbose="The function &apos;UPSAMPLE_LONG&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2572" column="0"/>
            <symbol>UPSAMPLE_LONG</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;DIV&apos; is never used." verbose="The function &apos;DIV&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2573" column="0"/>
            <symbol>DIV</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;REM&apos; is never used." verbose="The function &apos;REM&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2574" column="0"/>
            <symbol>REM</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;BSF&apos; is never used." verbose="The function &apos;BSF&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2578" column="0"/>
            <symbol>BSF</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;BSB&apos; is never used." verbose="The function &apos;BSB&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2579" column="0"/>
            <symbol>BSB</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;HADD&apos; is never used." verbose="The function &apos;HADD&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2583" column="0"/>
            <symbol>HADD</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;RHADD&apos; is never used." verbose="The function &apos;RHADD&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2584" column="0"/>
            <symbol>RHADD</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;I64HADD&apos; is never used." verbose="The function &apos;I64HADD&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2585" column="0"/>
            <symbol>I64HADD</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;I64RHADD&apos; is never used." verbose="The function &apos;I64RHADD&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2586" column="0"/>
            <symbol>I64RHADD</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;EQ&apos; is never used." verbose="The function &apos;EQ&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2613" column="0"/>
            <symbol>EQ</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;NE&apos; is never used." verbose="The function &apos;NE&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2614" column="0"/>
            <symbol>NE</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;LE&apos; is never used." verbose="The function &apos;LE&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2615" column="0"/>
            <symbol>LE</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;LT&apos; is never used." verbose="The function &apos;LT&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2616" column="0"/>
            <symbol>LT</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;GE&apos; is never used." verbose="The function &apos;GE&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2617" column="0"/>
            <symbol>GE</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;GT&apos; is never used." verbose="The function &apos;GT&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2618" column="0"/>
            <symbol>GT</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ORD&apos; is never used." verbose="The function &apos;ORD&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2619" column="0"/>
            <symbol>ORD</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;BITCAST&apos; is never used." verbose="The function &apos;BITCAST&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2624" column="0"/>
            <symbol>BITCAST</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SAT_CVT&apos; is never used." verbose="The function &apos;SAT_CVT&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2634" column="0"/>
            <symbol>SAT_CVT</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;LOAD&apos; is never used." verbose="The function &apos;LOAD&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2728" column="0"/>
            <symbol>LOAD</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;STORE&apos; is never used." verbose="The function &apos;STORE&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2729" column="0"/>
            <symbol>STORE</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SYNC&apos; is never used." verbose="The function &apos;SYNC&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2734" column="0"/>
            <symbol>SYNC</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;READ_ARF&apos; is never used." verbose="The function &apos;READ_ARF&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2738" column="0"/>
            <symbol>READ_ARF</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;REGION&apos; is never used." verbose="The function &apos;REGION&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2741" column="0"/>
            <symbol>REGION</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SIMD_SHUFFLE&apos; is never used." verbose="The function &apos;SIMD_SHUFFLE&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2744" column="0"/>
            <symbol>SIMD_SHUFFLE</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;GET_IMAGE_INFO&apos; is never used." verbose="The function &apos;GET_IMAGE_INFO&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2773" column="0"/>
            <symbol>GET_IMAGE_INFO</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;CALC_TIMESTAMP&apos; is never used." verbose="The function &apos;CALC_TIMESTAMP&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2777" column="0"/>
            <symbol>CALC_TIMESTAMP</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;WORKGROUP&apos; is never used." verbose="The function &apos;WORKGROUP&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2790" column="0"/>
            <symbol>WORKGROUP</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SUBGROUP&apos; is never used." verbose="The function &apos;SUBGROUP&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2794" column="0"/>
            <symbol>SUBGROUP</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;PRINTF&apos; is never used." verbose="The function &apos;PRINTF&apos; is never used." cwe="561">
            <location file="../backend/src/ir/instruction.cpp" line="2798" column="0"/>
            <symbol>PRINTF</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;setBufBTI&apos; is never used." verbose="The function &apos;setBufBTI&apos; is never used." cwe="561">
            <location file="../backend/src/ir/printf.hpp" line="205" column="0"/>
            <symbol>setBufBTI</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getPrintfBufferElementSize&apos; is never used." verbose="The function &apos;getPrintfBufferElementSize&apos; is never used." cwe="561">
            <location file="../backend/src/ir/printf.hpp" line="208" column="0"/>
            <symbol>getPrintfBufferElementSize</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getFirstBB&apos; is never used." verbose="The function &apos;getFirstBB&apos; is never used." cwe="561">
            <location file="../backend/src/ir/structurizer.hpp" line="120" column="0"/>
            <symbol>getFirstBB</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;async_work_group_copy&apos; is never used." verbose="The function &apos;async_work_group_copy&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_async.cl" line="55" column="0"/>
            <symbol>async_work_group_copy</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;async_work_group_strided_copy&apos; is never used." verbose="The function &apos;async_work_group_strided_copy&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_async.cl" line="55" column="0"/>
            <symbol>async_work_group_strided_copy</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;wait_group_events&apos; is never used." verbose="The function &apos;wait_group_events&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_async.cl" line="69" column="0"/>
            <symbol>wait_group_events</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;prefetch&apos; is never used." verbose="The function &apos;prefetch&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_async.cl" line="77" column="0"/>
            <symbol>prefetch</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_and&apos; is never used." verbose="The function &apos;atomic_and&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom.cl" line="63" column="0"/>
            <symbol>atomic_and</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_or&apos; is never used." verbose="The function &apos;atomic_or&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom.cl" line="64" column="0"/>
            <symbol>atomic_or</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_xor&apos; is never used." verbose="The function &apos;atomic_xor&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom.cl" line="65" column="0"/>
            <symbol>atomic_xor</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_xchg&apos; is never used." verbose="The function &apos;atomic_xchg&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom.cl" line="66" column="0"/>
            <symbol>atomic_xchg</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_min&apos; is never used." verbose="The function &apos;atomic_min&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom.cl" line="67" column="0"/>
            <symbol>atomic_min</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_max&apos; is never used." verbose="The function &apos;atomic_max&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom.cl" line="68" column="0"/>
            <symbol>atomic_max</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_cmpxchg&apos; is never used." verbose="The function &apos;atomic_cmpxchg&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom.cl" line="118" column="0"/>
            <symbol>atomic_cmpxchg</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_exchange&apos; is never used." verbose="The function &apos;atomic_exchange&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="188" column="0"/>
            <symbol>atomic_exchange</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_add&apos; is never used." verbose="The function &apos;atomic_fetch_add&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="189" column="0"/>
            <symbol>atomic_fetch_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_sub&apos; is never used." verbose="The function &apos;atomic_fetch_sub&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="190" column="0"/>
            <symbol>atomic_fetch_sub</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_and&apos; is never used." verbose="The function &apos;atomic_fetch_and&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="191" column="0"/>
            <symbol>atomic_fetch_and</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_or&apos; is never used." verbose="The function &apos;atomic_fetch_or&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="192" column="0"/>
            <symbol>atomic_fetch_or</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_xor&apos; is never used." verbose="The function &apos;atomic_fetch_xor&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="193" column="0"/>
            <symbol>atomic_fetch_xor</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_load&apos; is never used." verbose="The function &apos;atomic_load&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="194" column="0"/>
            <symbol>atomic_load</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_init&apos; is never used." verbose="The function &apos;atomic_init&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="195" column="0"/>
            <symbol>atomic_init</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_store&apos; is never used." verbose="The function &apos;atomic_store&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="196" column="0"/>
            <symbol>atomic_store</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_compare_exchange_strong&apos; is never used." verbose="The function &apos;atomic_compare_exchange_strong&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="197" column="0"/>
            <symbol>atomic_compare_exchange_strong</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_compare_exchange_weak&apos; is never used." verbose="The function &apos;atomic_compare_exchange_weak&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="198" column="0"/>
            <symbol>atomic_compare_exchange_weak</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_min&apos; is never used." verbose="The function &apos;atomic_fetch_min&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="199" column="0"/>
            <symbol>atomic_fetch_min</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_max&apos; is never used." verbose="The function &apos;atomic_fetch_max&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="201" column="0"/>
            <symbol>atomic_fetch_max</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_exchange_explicit&apos; is never used." verbose="The function &apos;atomic_exchange_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="244" column="0"/>
            <symbol>atomic_exchange_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_add_explicit&apos; is never used." verbose="The function &apos;atomic_fetch_add_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="245" column="0"/>
            <symbol>atomic_fetch_add_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_sub_explicit&apos; is never used." verbose="The function &apos;atomic_fetch_sub_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="246" column="0"/>
            <symbol>atomic_fetch_sub_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_and_explicit&apos; is never used." verbose="The function &apos;atomic_fetch_and_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="247" column="0"/>
            <symbol>atomic_fetch_and_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_or_explicit&apos; is never used." verbose="The function &apos;atomic_fetch_or_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="248" column="0"/>
            <symbol>atomic_fetch_or_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_xor_explicit&apos; is never used." verbose="The function &apos;atomic_fetch_xor_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="249" column="0"/>
            <symbol>atomic_fetch_xor_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_load_explicit&apos; is never used." verbose="The function &apos;atomic_load_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="250" column="0"/>
            <symbol>atomic_load_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_store_explicit&apos; is never used." verbose="The function &apos;atomic_store_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="251" column="0"/>
            <symbol>atomic_store_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_compare_exchange_strong_explicit&apos; is never used." verbose="The function &apos;atomic_compare_exchange_strong_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="252" column="0"/>
            <symbol>atomic_compare_exchange_strong_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_compare_exchange_weak_explicit&apos; is never used." verbose="The function &apos;atomic_compare_exchange_weak_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="253" column="0"/>
            <symbol>atomic_compare_exchange_weak_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_min_explicit&apos; is never used." verbose="The function &apos;atomic_fetch_min_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="254" column="0"/>
            <symbol>atomic_fetch_min_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_fetch_max_explicit&apos; is never used." verbose="The function &apos;atomic_fetch_max_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="256" column="0"/>
            <symbol>atomic_fetch_max_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_init_explicit&apos; is never used." verbose="The function &apos;atomic_init_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="265" column="0"/>
            <symbol>atomic_init_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_flag_test_and_set&apos; is never used." verbose="The function &apos;atomic_flag_test_and_set&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="332" column="0"/>
            <symbol>atomic_flag_test_and_set</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_flag_test_and_set_explicit&apos; is never used." verbose="The function &apos;atomic_flag_test_and_set_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="343" column="0"/>
            <symbol>atomic_flag_test_and_set_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_flag_clear&apos; is never used." verbose="The function &apos;atomic_flag_clear&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="365" column="0"/>
            <symbol>atomic_flag_clear</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_flag_clear_explicit&apos; is never used." verbose="The function &apos;atomic_flag_clear_explicit&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="370" column="0"/>
            <symbol>atomic_flag_clear_explicit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;atomic_work_item_fence&apos; is never used." verbose="The function &apos;atomic_work_item_fence&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_atom_20.cl" line="380" column="0"/>
            <symbol>atomic_work_item_fence</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_default_queue&apos; is never used." verbose="The function &apos;get_default_queue&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="23" column="0"/>
            <symbol>get_default_queue</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__enqueue_kernel_basic_events&apos; is never used." verbose="The function &apos;__enqueue_kernel_basic_events&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="57" column="0"/>
            <symbol>__enqueue_kernel_basic_events</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_enqueue_kernel_slm&apos; is never used." verbose="The function &apos;__gen_enqueue_kernel_slm&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="64" column="0"/>
            <symbol>__gen_enqueue_kernel_slm</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;create_user_event&apos; is never used." verbose="The function &apos;create_user_event&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="95" column="0"/>
            <symbol>create_user_event</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;retain_event&apos; is never used." verbose="The function &apos;retain_event&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="101" column="0"/>
            <symbol>retain_event</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;release_event&apos; is never used." verbose="The function &apos;release_event&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="106" column="0"/>
            <symbol>release_event</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;set_user_event_status&apos; is never used." verbose="The function &apos;set_user_event_status&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="111" column="0"/>
            <symbol>set_user_event_status</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;is_valid_event&apos; is never used." verbose="The function &apos;is_valid_event&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="116" column="0"/>
            <symbol>is_valid_event</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__get_kernel_work_group_size_impl&apos; is never used." verbose="The function &apos;__get_kernel_work_group_size_impl&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="121" column="0"/>
            <symbol>__get_kernel_work_group_size_impl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__get_kernel_preferred_work_group_multiple_impl&apos; is never used." verbose="The function &apos;__get_kernel_preferred_work_group_multiple_impl&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="126" column="0"/>
            <symbol>__get_kernel_preferred_work_group_multiple_impl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;capture_event_profiling_info&apos; is never used." verbose="The function &apos;capture_event_profiling_info&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="131" column="0"/>
            <symbol>capture_event_profiling_info</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ndrange_1D&apos; is never used." verbose="The function &apos;ndrange_1D&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="144" column="0"/>
            <symbol>ndrange_1D</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ndrange_2D&apos; is never used." verbose="The function &apos;ndrange_2D&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="172" column="0"/>
            <symbol>ndrange_2D</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ndrange_3D&apos; is never used." verbose="The function &apos;ndrange_3D&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="206" column="0"/>
            <symbol>ndrange_3D</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;enqueue_marker&apos; is never used." verbose="The function &apos;enqueue_marker&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_enqueue.cl" line="245" column="0"/>
            <symbol>enqueue_marker</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;normalize&apos; is never used." verbose="The function &apos;normalize&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_geometric.cl" line="80" column="0"/>
            <symbol>normalize</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;fast_distance&apos; is never used." verbose="The function &apos;fast_distance&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_geometric.cl" line="111" column="0"/>
            <symbol>fast_distance</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;fast_normalize&apos; is never used." verbose="The function &apos;fast_normalize&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_geometric.cl" line="115" column="0"/>
            <symbol>fast_normalize</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cross&apos; is never used." verbose="The function &apos;cross&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_geometric.cl" line="120" column="0"/>
            <symbol>cross</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;read_imagef&apos; is never used." verbose="The function &apos;read_imagef&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="538" column="0"/>
            <symbol>read_imagef</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_image_channel_data_type&apos; is never used." verbose="The function &apos;get_image_channel_data_type&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="696" column="0"/>
            <symbol>get_image_channel_data_type</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_image_channel_order&apos; is never used." verbose="The function &apos;get_image_channel_order&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="696" column="0"/>
            <symbol>get_image_channel_order</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_image_dim&apos; is never used." verbose="The function &apos;get_image_dim&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="726" column="0"/>
            <symbol>get_image_dim</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_image_array_size&apos; is never used." verbose="The function &apos;get_image_array_size&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_image.cl" line="813" column="0"/>
            <symbol>get_image_array_size</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_gc&apos; is never used." verbose="The function &apos;__gen_memcpy_gc&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="60" column="0"/>
            <symbol>__gen_memcpy_gc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_gc_align&apos; is never used." verbose="The function &apos;__gen_memcpy_gc_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="60" column="0"/>
            <symbol>__gen_memcpy_gc_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_gg&apos; is never used." verbose="The function &apos;__gen_memcpy_gg&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="60" column="0"/>
            <symbol>__gen_memcpy_gg</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_gg_align&apos; is never used." verbose="The function &apos;__gen_memcpy_gg_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="60" column="0"/>
            <symbol>__gen_memcpy_gg_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_gl&apos; is never used." verbose="The function &apos;__gen_memcpy_gl&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="60" column="0"/>
            <symbol>__gen_memcpy_gl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_gl_align&apos; is never used." verbose="The function &apos;__gen_memcpy_gl_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="60" column="0"/>
            <symbol>__gen_memcpy_gl_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_gp&apos; is never used." verbose="The function &apos;__gen_memcpy_gp&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="60" column="0"/>
            <symbol>__gen_memcpy_gp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_gp_align&apos; is never used." verbose="The function &apos;__gen_memcpy_gp_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="60" column="0"/>
            <symbol>__gen_memcpy_gp_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_lc&apos; is never used." verbose="The function &apos;__gen_memcpy_lc&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="61" column="0"/>
            <symbol>__gen_memcpy_lc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_lc_align&apos; is never used." verbose="The function &apos;__gen_memcpy_lc_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="61" column="0"/>
            <symbol>__gen_memcpy_lc_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_lg&apos; is never used." verbose="The function &apos;__gen_memcpy_lg&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="61" column="0"/>
            <symbol>__gen_memcpy_lg</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_lg_align&apos; is never used." verbose="The function &apos;__gen_memcpy_lg_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="61" column="0"/>
            <symbol>__gen_memcpy_lg_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_ll&apos; is never used." verbose="The function &apos;__gen_memcpy_ll&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="61" column="0"/>
            <symbol>__gen_memcpy_ll</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_ll_align&apos; is never used." verbose="The function &apos;__gen_memcpy_ll_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="61" column="0"/>
            <symbol>__gen_memcpy_ll_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_lp&apos; is never used." verbose="The function &apos;__gen_memcpy_lp&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="61" column="0"/>
            <symbol>__gen_memcpy_lp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_lp_align&apos; is never used." verbose="The function &apos;__gen_memcpy_lp_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="61" column="0"/>
            <symbol>__gen_memcpy_lp_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_pc&apos; is never used." verbose="The function &apos;__gen_memcpy_pc&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="62" column="0"/>
            <symbol>__gen_memcpy_pc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_pc_align&apos; is never used." verbose="The function &apos;__gen_memcpy_pc_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="62" column="0"/>
            <symbol>__gen_memcpy_pc_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_pg&apos; is never used." verbose="The function &apos;__gen_memcpy_pg&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="62" column="0"/>
            <symbol>__gen_memcpy_pg</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_pg_align&apos; is never used." verbose="The function &apos;__gen_memcpy_pg_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="62" column="0"/>
            <symbol>__gen_memcpy_pg_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_pl&apos; is never used." verbose="The function &apos;__gen_memcpy_pl&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="62" column="0"/>
            <symbol>__gen_memcpy_pl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_pl_align&apos; is never used." verbose="The function &apos;__gen_memcpy_pl_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="62" column="0"/>
            <symbol>__gen_memcpy_pl_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_pp&apos; is never used." verbose="The function &apos;__gen_memcpy_pp&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="62" column="0"/>
            <symbol>__gen_memcpy_pp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memcpy_pp_align&apos; is never used." verbose="The function &apos;__gen_memcpy_pp_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memcpy.cl" line="62" column="0"/>
            <symbol>__gen_memcpy_pp_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memset_g&apos; is never used." verbose="The function &apos;__gen_memset_g&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memset.cl" line="41" column="0"/>
            <symbol>__gen_memset_g</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memset_g_align&apos; is never used." verbose="The function &apos;__gen_memset_g_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memset.cl" line="41" column="0"/>
            <symbol>__gen_memset_g_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memset_l&apos; is never used." verbose="The function &apos;__gen_memset_l&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memset.cl" line="42" column="0"/>
            <symbol>__gen_memset_l</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memset_l_align&apos; is never used." verbose="The function &apos;__gen_memset_l_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memset.cl" line="42" column="0"/>
            <symbol>__gen_memset_l_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memset_p&apos; is never used." verbose="The function &apos;__gen_memset_p&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memset.cl" line="43" column="0"/>
            <symbol>__gen_memset_p</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_memset_p_align&apos; is never used." verbose="The function &apos;__gen_memset_p_align&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_memset.cl" line="43" column="0"/>
            <symbol>__gen_memset_p_align</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;shuffle2&apos; is never used." verbose="The function &apos;shuffle2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="202" column="0"/>
            <symbol>shuffle2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_ocl_get_timestamp&apos; is never used." verbose="The function &apos;__gen_ocl_get_timestamp&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="227" column="0"/>
            <symbol>__gen_ocl_get_timestamp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ime_initialize&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ime_initialize&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="238" column="0"/>
            <symbol>intel_sub_group_avc_ime_initialize</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ime_set_single_reference&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ime_set_single_reference&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="258" column="0"/>
            <symbol>intel_sub_group_avc_ime_set_single_reference</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ime_evaluate_with_single_reference&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ime_evaluate_with_single_reference&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="268" column="0"/>
            <symbol>intel_sub_group_avc_ime_evaluate_with_single_reference</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ime_get_motion_vectors&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ime_get_motion_vectors&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="474" column="0"/>
            <symbol>intel_sub_group_avc_ime_get_motion_vectors</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ime_get_inter_distortions&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ime_get_inter_distortions&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="494" column="0"/>
            <symbol>intel_sub_group_avc_ime_get_inter_distortions</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ime_get_inter_major_shape&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ime_get_inter_major_shape&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="502" column="0"/>
            <symbol>intel_sub_group_avc_ime_get_inter_major_shape</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ime_get_inter_minor_shapes&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ime_get_inter_minor_shapes&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="508" column="0"/>
            <symbol>intel_sub_group_avc_ime_get_inter_minor_shapes</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ime_get_inter_directions&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ime_get_inter_directions&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="514" column="0"/>
            <symbol>intel_sub_group_avc_ime_get_inter_directions</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_fme_initialize&apos; is never used." verbose="The function &apos;intel_sub_group_avc_fme_initialize&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="521" column="0"/>
            <symbol>intel_sub_group_avc_fme_initialize</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ref_evaluate_with_single_reference&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ref_evaluate_with_single_reference&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="549" column="0"/>
            <symbol>intel_sub_group_avc_ref_evaluate_with_single_reference</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ref_get_motion_vectors&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ref_get_motion_vectors&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="802" column="0"/>
            <symbol>intel_sub_group_avc_ref_get_motion_vectors</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ref_get_inter_distortions&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ref_get_inter_distortions&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="822" column="0"/>
            <symbol>intel_sub_group_avc_ref_get_inter_distortions</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_mce_get_default_medium_penalty_cost_table&apos; is never used." verbose="The function &apos;intel_sub_group_avc_mce_get_default_medium_penalty_cost_table&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="830" column="0"/>
            <symbol>intel_sub_group_avc_mce_get_default_medium_penalty_cost_table</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ime_set_motion_vector_cost_function&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ime_set_motion_vector_cost_function&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="849" column="0"/>
            <symbol>intel_sub_group_avc_ime_set_motion_vector_cost_function</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ref_set_motion_vector_cost_function&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ref_set_motion_vector_cost_function&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="873" column="0"/>
            <symbol>intel_sub_group_avc_ref_set_motion_vector_cost_function</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_ime_set_inter_shape_penalty&apos; is never used." verbose="The function &apos;intel_sub_group_avc_ime_set_inter_shape_penalty&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="898" column="0"/>
            <symbol>intel_sub_group_avc_ime_set_inter_shape_penalty</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_sic_evaluate_ipe&apos; is never used." verbose="The function &apos;intel_sub_group_avc_sic_evaluate_ipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="906" column="0"/>
            <symbol>intel_sub_group_avc_sic_evaluate_ipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_sic_initialize&apos; is never used." verbose="The function &apos;intel_sub_group_avc_sic_initialize&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1165" column="0"/>
            <symbol>intel_sub_group_avc_sic_initialize</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_sic_configure_ipe&apos; is never used." verbose="The function &apos;intel_sub_group_avc_sic_configure_ipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1173" column="0"/>
            <symbol>intel_sub_group_avc_sic_configure_ipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_sic_set_intra_luma_shape_penalty&apos; is never used." verbose="The function &apos;intel_sub_group_avc_sic_set_intra_luma_shape_penalty&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1211" column="0"/>
            <symbol>intel_sub_group_avc_sic_set_intra_luma_shape_penalty</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_sic_evaluate_with_single_reference&apos; is never used." verbose="The function &apos;intel_sub_group_avc_sic_evaluate_with_single_reference&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1219" column="0"/>
            <symbol>intel_sub_group_avc_sic_evaluate_with_single_reference</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_sic_configure_skc&apos; is never used." verbose="The function &apos;intel_sub_group_avc_sic_configure_skc&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1505" column="0"/>
            <symbol>intel_sub_group_avc_sic_configure_skc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_sic_get_inter_distortions&apos; is never used." verbose="The function &apos;intel_sub_group_avc_sic_get_inter_distortions&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1521" column="0"/>
            <symbol>intel_sub_group_avc_sic_get_inter_distortions</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_sic_get_ipe_luma_shape&apos; is never used." verbose="The function &apos;intel_sub_group_avc_sic_get_ipe_luma_shape&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1530" column="0"/>
            <symbol>intel_sub_group_avc_sic_get_ipe_luma_shape</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_sic_get_best_ipe_luma_distortion&apos; is never used." verbose="The function &apos;intel_sub_group_avc_sic_get_best_ipe_luma_distortion&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1537" column="0"/>
            <symbol>intel_sub_group_avc_sic_get_best_ipe_luma_distortion</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_avc_sic_get_packed_ipe_luma_modes&apos; is never used." verbose="The function &apos;intel_sub_group_avc_sic_get_packed_ipe_luma_modes&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_misc.cl" line="1543" column="0"/>
            <symbol>intel_sub_group_avc_sic_get_packed_ipe_luma_modes</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__read_pipe_2&apos; is never used." verbose="The function &apos;__read_pipe_2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="36" column="0"/>
            <symbol>__read_pipe_2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__read_pipe_4&apos; is never used." verbose="The function &apos;__read_pipe_4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="57" column="0"/>
            <symbol>__read_pipe_4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__write_pipe_2&apos; is never used." verbose="The function &apos;__write_pipe_2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="76" column="0"/>
            <symbol>__write_pipe_2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__write_pipe_4&apos; is never used." verbose="The function &apos;__write_pipe_4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="97" column="0"/>
            <symbol>__write_pipe_4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__reserve_read_pipe&apos; is never used." verbose="The function &apos;__reserve_read_pipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="115" column="0"/>
            <symbol>__reserve_read_pipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__commit_read_pipe&apos; is never used." verbose="The function &apos;__commit_read_pipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="137" column="0"/>
            <symbol>__commit_read_pipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__work_group_reserve_read_pipe&apos; is never used." verbose="The function &apos;__work_group_reserve_read_pipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="139" column="0"/>
            <symbol>__work_group_reserve_read_pipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__work_group_commit_read_pipe&apos; is never used." verbose="The function &apos;__work_group_commit_read_pipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="170" column="0"/>
            <symbol>__work_group_commit_read_pipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__sub_group_reserve_read_pipe&apos; is never used." verbose="The function &apos;__sub_group_reserve_read_pipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="172" column="0"/>
            <symbol>__sub_group_reserve_read_pipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__sub_group_commit_read_pipe&apos; is never used." verbose="The function &apos;__sub_group_commit_read_pipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="194" column="0"/>
            <symbol>__sub_group_commit_read_pipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__reserve_write_pipe&apos; is never used." verbose="The function &apos;__reserve_write_pipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="196" column="0"/>
            <symbol>__reserve_write_pipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__commit_write_pipe&apos; is never used." verbose="The function &apos;__commit_write_pipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="217" column="0"/>
            <symbol>__commit_write_pipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__work_group_reserve_write_pipe&apos; is never used." verbose="The function &apos;__work_group_reserve_write_pipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="219" column="0"/>
            <symbol>__work_group_reserve_write_pipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__work_group_commit_write_pipe&apos; is never used." verbose="The function &apos;__work_group_commit_write_pipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="249" column="0"/>
            <symbol>__work_group_commit_write_pipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__sub_group_reserve_write_pipe&apos; is never used." verbose="The function &apos;__sub_group_reserve_write_pipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="252" column="0"/>
            <symbol>__sub_group_reserve_write_pipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__sub_group_commit_write_pipe&apos; is never used." verbose="The function &apos;__sub_group_commit_write_pipe&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="274" column="0"/>
            <symbol>__sub_group_commit_write_pipe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;is_valid_reserve_id&apos; is never used." verbose="The function &apos;is_valid_reserve_id&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="276" column="0"/>
            <symbol>is_valid_reserve_id</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__get_pipe_max_packets&apos; is never used." verbose="The function &apos;__get_pipe_max_packets&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="286" column="0"/>
            <symbol>__get_pipe_max_packets</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__get_pipe_num_packets&apos; is never used." verbose="The function &apos;__get_pipe_num_packets&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_pipe.cl" line="292" column="0"/>
            <symbol>__get_pipe_num_packets</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mem_fence&apos; is never used." verbose="The function &apos;mem_fence&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_sync.cl" line="25" column="0"/>
            <symbol>mem_fence</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;read_mem_fence&apos; is never used." verbose="The function &apos;read_mem_fence&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_sync.cl" line="28" column="0"/>
            <symbol>read_mem_fence</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;write_mem_fence&apos; is never used." verbose="The function &apos;write_mem_fence&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_sync.cl" line="31" column="0"/>
            <symbol>write_mem_fence</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_fence&apos; is never used." verbose="The function &apos;get_fence&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_sync.cl" line="33" column="0"/>
            <symbol>get_fence</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vload16&apos; is never used." verbose="The function &apos;vload16&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="122" column="0"/>
            <symbol>vload16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vload3&apos; is never used." verbose="The function &apos;vload3&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="122" column="0"/>
            <symbol>vload3</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstore16&apos; is never used." verbose="The function &apos;vstore16&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="122" column="0"/>
            <symbol>vstore16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstore3&apos; is never used." verbose="The function &apos;vstore3&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="122" column="0"/>
            <symbol>vstore3</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vload_half16&apos; is never used." verbose="The function &apos;vload_half16&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="282" column="0"/>
            <symbol>vload_half16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vload_half3&apos; is never used." verbose="The function &apos;vload_half3&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="282" column="0"/>
            <symbol>vload_half3</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vloada_half16&apos; is never used." verbose="The function &apos;vloada_half16&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="282" column="0"/>
            <symbol>vloada_half16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vloada_half3&apos; is never used." verbose="The function &apos;vloada_half3&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="282" column="0"/>
            <symbol>vloada_half3</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstore_half3&apos; is never used." verbose="The function &apos;vstore_half3&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstore_half3</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstore_half3_rte&apos; is never used." verbose="The function &apos;vstore_half3_rte&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstore_half3_rte</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstore_half3_rtn&apos; is never used." verbose="The function &apos;vstore_half3_rtn&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstore_half3_rtn</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstore_half3_rtp&apos; is never used." verbose="The function &apos;vstore_half3_rtp&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstore_half3_rtp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstore_half3_rtz&apos; is never used." verbose="The function &apos;vstore_half3_rtz&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstore_half3_rtz</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half&apos; is never used." verbose="The function &apos;vstorea_half&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half16&apos; is never used." verbose="The function &apos;vstorea_half16&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half16_rte&apos; is never used." verbose="The function &apos;vstorea_half16_rte&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half16_rte</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half16_rtn&apos; is never used." verbose="The function &apos;vstorea_half16_rtn&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half16_rtn</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half16_rtp&apos; is never used." verbose="The function &apos;vstorea_half16_rtp&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half16_rtp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half16_rtz&apos; is never used." verbose="The function &apos;vstorea_half16_rtz&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half16_rtz</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half2&apos; is never used." verbose="The function &apos;vstorea_half2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half2_rte&apos; is never used." verbose="The function &apos;vstorea_half2_rte&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half2_rte</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half2_rtn&apos; is never used." verbose="The function &apos;vstorea_half2_rtn&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half2_rtn</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half2_rtp&apos; is never used." verbose="The function &apos;vstorea_half2_rtp&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half2_rtp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half2_rtz&apos; is never used." verbose="The function &apos;vstorea_half2_rtz&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half2_rtz</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half3&apos; is never used." verbose="The function &apos;vstorea_half3&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half3</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half3_rte&apos; is never used." verbose="The function &apos;vstorea_half3_rte&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half3_rte</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half3_rtn&apos; is never used." verbose="The function &apos;vstorea_half3_rtn&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half3_rtn</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half3_rtp&apos; is never used." verbose="The function &apos;vstorea_half3_rtp&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half3_rtp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half3_rtz&apos; is never used." verbose="The function &apos;vstorea_half3_rtz&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half3_rtz</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half4&apos; is never used." verbose="The function &apos;vstorea_half4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half4_rte&apos; is never used." verbose="The function &apos;vstorea_half4_rte&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half4_rte</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half4_rtn&apos; is never used." verbose="The function &apos;vstorea_half4_rtn&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half4_rtn</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half4_rtp&apos; is never used." verbose="The function &apos;vstorea_half4_rtp&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half4_rtp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half4_rtz&apos; is never used." verbose="The function &apos;vstorea_half4_rtz&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half4_rtz</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half8&apos; is never used." verbose="The function &apos;vstorea_half8&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half8_rte&apos; is never used." verbose="The function &apos;vstorea_half8_rte&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half8_rte</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half8_rtn&apos; is never used." verbose="The function &apos;vstorea_half8_rtn&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half8_rtn</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half8_rtp&apos; is never used." verbose="The function &apos;vstorea_half8_rtp&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half8_rtp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half8_rtz&apos; is never used." verbose="The function &apos;vstorea_half8_rtz&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half8_rtz</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half_rte&apos; is never used." verbose="The function &apos;vstorea_half_rte&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half_rte</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half_rtn&apos; is never used." verbose="The function &apos;vstorea_half_rtn&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half_rtn</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half_rtp&apos; is never used." verbose="The function &apos;vstorea_half_rtp&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half_rtp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vstorea_half_rtz&apos; is never used." verbose="The function &apos;vstorea_half_rtz&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_vload.cl" line="287" column="0"/>
            <symbol>vstorea_half_rtz</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;work_group_all&apos; is never used." verbose="The function &apos;work_group_all&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_work_group.cl" line="21" column="0"/>
            <symbol>work_group_all</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;work_group_any&apos; is never used." verbose="The function &apos;work_group_any&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_work_group.cl" line="26" column="0"/>
            <symbol>work_group_any</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;work_group_reduce_add&apos; is never used." verbose="The function &apos;work_group_reduce_add&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_work_group.cl" line="61" column="0"/>
            <symbol>work_group_reduce_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;work_group_reduce_min&apos; is never used." verbose="The function &apos;work_group_reduce_min&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_work_group.cl" line="68" column="0"/>
            <symbol>work_group_reduce_min</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;work_group_reduce_max&apos; is never used." verbose="The function &apos;work_group_reduce_max&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_work_group.cl" line="75" column="0"/>
            <symbol>work_group_reduce_max</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;work_group_scan_inclusive_add&apos; is never used." verbose="The function &apos;work_group_scan_inclusive_add&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_work_group.cl" line="83" column="0"/>
            <symbol>work_group_scan_inclusive_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;work_group_scan_inclusive_min&apos; is never used." verbose="The function &apos;work_group_scan_inclusive_min&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_work_group.cl" line="90" column="0"/>
            <symbol>work_group_scan_inclusive_min</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;work_group_scan_inclusive_max&apos; is never used." verbose="The function &apos;work_group_scan_inclusive_max&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_work_group.cl" line="97" column="0"/>
            <symbol>work_group_scan_inclusive_max</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;work_group_scan_exclusive_add&apos; is never used." verbose="The function &apos;work_group_scan_exclusive_add&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_work_group.cl" line="105" column="0"/>
            <symbol>work_group_scan_exclusive_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;work_group_scan_exclusive_min&apos; is never used." verbose="The function &apos;work_group_scan_exclusive_min&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_work_group.cl" line="112" column="0"/>
            <symbol>work_group_scan_exclusive_min</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;work_group_scan_exclusive_max&apos; is never used." verbose="The function &apos;work_group_scan_exclusive_max&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_work_group.cl" line="119" column="0"/>
            <symbol>work_group_scan_exclusive_max</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_work_dim&apos; is never used." verbose="The function &apos;get_work_dim&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_workitem.cl" line="21" column="0"/>
            <symbol>get_work_dim</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_global_linear_id&apos; is never used." verbose="The function &apos;get_global_linear_id&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/src/ocl_workitem.cl" line="61" column="0"/>
            <symbol>get_global_linear_id</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;step&apos; is never used." verbose="The function &apos;step&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_common.tmpl.cl" line="32" column="0"/>
            <symbol>step</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mix&apos; is never used." verbose="The function &apos;mix&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_common.tmpl.cl" line="42" column="0"/>
            <symbol>mix</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;degrees&apos; is never used." verbose="The function &apos;degrees&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_common.tmpl.cl" line="50" column="0"/>
            <symbol>degrees</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;radians&apos; is never used." verbose="The function &apos;radians&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_common.tmpl.cl" line="53" column="0"/>
            <symbol>radians</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;smoothstep&apos; is never used." verbose="The function &apos;smoothstep&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_common.tmpl.cl" line="57" column="0"/>
            <symbol>smoothstep</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sign&apos; is never used." verbose="The function &apos;sign&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_common.tmpl.cl" line="62" column="0"/>
            <symbol>sign</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ctz&apos; is never used." verbose="The function &apos;ctz&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_integer.tmpl.cl" line="45" column="0"/>
            <symbol>ctz</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;add_sat&apos; is never used." verbose="The function &apos;add_sat&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_integer.tmpl.cl" line="87" column="0"/>
            <symbol>add_sat</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sub_sat&apos; is never used." verbose="The function &apos;sub_sat&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_integer.tmpl.cl" line="87" column="0"/>
            <symbol>sub_sat</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mad_hi&apos; is never used." verbose="The function &apos;mad_hi&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_integer.tmpl.cl" line="144" column="0"/>
            <symbol>mad_hi</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mad24&apos; is never used." verbose="The function &apos;mad24&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_integer.tmpl.cl" line="157" column="0"/>
            <symbol>mad24</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mad_sat&apos; is never used." verbose="The function &apos;mad_sat&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_integer.tmpl.cl" line="160" column="0"/>
            <symbol>mad_sat</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;rotate&apos; is never used." verbose="The function &apos;rotate&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_integer.tmpl.cl" line="228" column="0"/>
            <symbol>rotate</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;upsample&apos; is never used." verbose="The function &apos;upsample&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_integer.tmpl.cl" line="241" column="0"/>
            <symbol>upsample</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;hadd&apos; is never used." verbose="The function &apos;hadd&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_integer.tmpl.cl" line="256" column="0"/>
            <symbol>hadd</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;rhadd&apos; is never used." verbose="The function &apos;rhadd&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_integer.tmpl.cl" line="259" column="0"/>
            <symbol>rhadd</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;abs_diff&apos; is never used." verbose="The function &apos;abs_diff&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_integer.tmpl.cl" line="314" column="0"/>
            <symbol>abs_diff</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;native_powr&apos; is never used." verbose="The function &apos;native_powr&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="65" column="0"/>
            <symbol>native_powr</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_ocl_internal_fastpath_rootn&apos; is never used." verbose="The function &apos;__gen_ocl_internal_fastpath_rootn&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="136" column="0"/>
            <symbol>__gen_ocl_internal_fastpath_rootn</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__gen_ocl_internal_frexp&apos; is never used." verbose="The function &apos;__gen_ocl_internal_frexp&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="2921" column="0"/>
            <symbol>__gen_ocl_internal_frexp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_cos&apos; is never used." verbose="The function &apos;half_cos&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3279" column="0"/>
            <symbol>half_cos</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_divide&apos; is never used." verbose="The function &apos;half_divide&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3282" column="0"/>
            <symbol>half_divide</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_exp&apos; is never used." verbose="The function &apos;half_exp&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3285" column="0"/>
            <symbol>half_exp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_exp2&apos; is never used." verbose="The function &apos;half_exp2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3288" column="0"/>
            <symbol>half_exp2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_exp10&apos; is never used." verbose="The function &apos;half_exp10&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3291" column="0"/>
            <symbol>half_exp10</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_log&apos; is never used." verbose="The function &apos;half_log&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3294" column="0"/>
            <symbol>half_log</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_log2&apos; is never used." verbose="The function &apos;half_log2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3297" column="0"/>
            <symbol>half_log2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_log10&apos; is never used." verbose="The function &apos;half_log10&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3300" column="0"/>
            <symbol>half_log10</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_powr&apos; is never used." verbose="The function &apos;half_powr&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3303" column="0"/>
            <symbol>half_powr</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_recip&apos; is never used." verbose="The function &apos;half_recip&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3306" column="0"/>
            <symbol>half_recip</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_rsqrt&apos; is never used." verbose="The function &apos;half_rsqrt&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3309" column="0"/>
            <symbol>half_rsqrt</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_sin&apos; is never used." verbose="The function &apos;half_sin&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3312" column="0"/>
            <symbol>half_sin</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_sqrt&apos; is never used." verbose="The function &apos;half_sqrt&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3315" column="0"/>
            <symbol>half_sqrt</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;half_tan&apos; is never used." verbose="The function &apos;half_tan&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_math_common.tmpl.cl" line="3318" column="0"/>
            <symbol>half_tan</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;isnotequal&apos; is never used." verbose="The function &apos;isnotequal&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_relational.tmpl.cl" line="25" column="0"/>
            <symbol>isnotequal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;isgreaterequal&apos; is never used." verbose="The function &apos;isgreaterequal&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_relational.tmpl.cl" line="33" column="0"/>
            <symbol>isgreaterequal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;islessequal&apos; is never used." verbose="The function &apos;islessequal&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_relational.tmpl.cl" line="41" column="0"/>
            <symbol>islessequal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;islessgreater&apos; is never used." verbose="The function &apos;islessgreater&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_relational.tmpl.cl" line="45" column="0"/>
            <symbol>islessgreater</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;isnormal&apos; is never used." verbose="The function &apos;isnormal&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_relational.tmpl.cl" line="65" column="0"/>
            <symbol>isnormal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;isordered&apos; is never used." verbose="The function &apos;isordered&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_relational.tmpl.cl" line="72" column="0"/>
            <symbol>isordered</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;isunordered&apos; is never used." verbose="The function &apos;isunordered&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_relational.tmpl.cl" line="75" column="0"/>
            <symbol>isunordered</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;any&apos; is never used." verbose="The function &apos;any&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_relational.tmpl.cl" line="221" column="0"/>
            <symbol>any</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;all&apos; is never used." verbose="The function &apos;all&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_relational.tmpl.cl" line="246" column="0"/>
            <symbol>all</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_sub_group_size&apos; is never used." verbose="The function &apos;get_sub_group_size&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="29" column="0"/>
            <symbol>get_sub_group_size</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sub_group_broadcast&apos; is never used." verbose="The function &apos;sub_group_broadcast&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="46" column="0"/>
            <symbol>sub_group_broadcast</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_broadcast&apos; is never used." verbose="The function &apos;intel_sub_group_broadcast&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="57" column="0"/>
            <symbol>intel_sub_group_broadcast</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sub_group_reduce_add&apos; is never used." verbose="The function &apos;sub_group_reduce_add&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="72" column="0"/>
            <symbol>sub_group_reduce_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sub_group_reduce_min&apos; is never used." verbose="The function &apos;sub_group_reduce_min&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="82" column="0"/>
            <symbol>sub_group_reduce_min</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sub_group_reduce_max&apos; is never used." verbose="The function &apos;sub_group_reduce_max&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="92" column="0"/>
            <symbol>sub_group_reduce_max</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sub_group_scan_inclusive_add&apos; is never used." verbose="The function &apos;sub_group_scan_inclusive_add&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="103" column="0"/>
            <symbol>sub_group_scan_inclusive_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sub_group_scan_inclusive_min&apos; is never used." verbose="The function &apos;sub_group_scan_inclusive_min&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="113" column="0"/>
            <symbol>sub_group_scan_inclusive_min</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sub_group_scan_inclusive_max&apos; is never used." verbose="The function &apos;sub_group_scan_inclusive_max&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="123" column="0"/>
            <symbol>sub_group_scan_inclusive_max</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sub_group_scan_exclusive_add&apos; is never used." verbose="The function &apos;sub_group_scan_exclusive_add&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="134" column="0"/>
            <symbol>sub_group_scan_exclusive_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sub_group_scan_exclusive_min&apos; is never used." verbose="The function &apos;sub_group_scan_exclusive_min&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="144" column="0"/>
            <symbol>sub_group_scan_exclusive_min</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sub_group_scan_exclusive_max&apos; is never used." verbose="The function &apos;sub_group_scan_exclusive_max&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="154" column="0"/>
            <symbol>sub_group_scan_exclusive_max</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_reduce_add&apos; is never used." verbose="The function &apos;intel_sub_group_reduce_add&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="171" column="0"/>
            <symbol>intel_sub_group_reduce_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_reduce_min&apos; is never used." verbose="The function &apos;intel_sub_group_reduce_min&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="173" column="0"/>
            <symbol>intel_sub_group_reduce_min</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_reduce_max&apos; is never used." verbose="The function &apos;intel_sub_group_reduce_max&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="175" column="0"/>
            <symbol>intel_sub_group_reduce_max</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_scan_inclusive_add&apos; is never used." verbose="The function &apos;intel_sub_group_scan_inclusive_add&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="177" column="0"/>
            <symbol>intel_sub_group_scan_inclusive_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_scan_inclusive_min&apos; is never used." verbose="The function &apos;intel_sub_group_scan_inclusive_min&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="179" column="0"/>
            <symbol>intel_sub_group_scan_inclusive_min</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_scan_inclusive_max&apos; is never used." verbose="The function &apos;intel_sub_group_scan_inclusive_max&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="181" column="0"/>
            <symbol>intel_sub_group_scan_inclusive_max</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_scan_exclusive_add&apos; is never used." verbose="The function &apos;intel_sub_group_scan_exclusive_add&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="183" column="0"/>
            <symbol>intel_sub_group_scan_exclusive_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_scan_exclusive_min&apos; is never used." verbose="The function &apos;intel_sub_group_scan_exclusive_min&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="185" column="0"/>
            <symbol>intel_sub_group_scan_exclusive_min</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_scan_exclusive_max&apos; is never used." verbose="The function &apos;intel_sub_group_scan_exclusive_max&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="187" column="0"/>
            <symbol>intel_sub_group_scan_exclusive_max</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_read&apos; is never used." verbose="The function &apos;intel_sub_group_block_read&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="195" column="0"/>
            <symbol>intel_sub_group_block_read</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_read2&apos; is never used." verbose="The function &apos;intel_sub_group_block_read2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="199" column="0"/>
            <symbol>intel_sub_group_block_read2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_read4&apos; is never used." verbose="The function &apos;intel_sub_group_block_read4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="203" column="0"/>
            <symbol>intel_sub_group_block_read4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_read8&apos; is never used." verbose="The function &apos;intel_sub_group_block_read8&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="207" column="0"/>
            <symbol>intel_sub_group_block_read8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_read_ui&apos; is never used." verbose="The function &apos;intel_sub_group_block_read_ui&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="211" column="0"/>
            <symbol>intel_sub_group_block_read_ui</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_read_ui2&apos; is never used." verbose="The function &apos;intel_sub_group_block_read_ui2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="215" column="0"/>
            <symbol>intel_sub_group_block_read_ui2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_read_ui4&apos; is never used." verbose="The function &apos;intel_sub_group_block_read_ui4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="219" column="0"/>
            <symbol>intel_sub_group_block_read_ui4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_read_ui8&apos; is never used." verbose="The function &apos;intel_sub_group_block_read_ui8&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="223" column="0"/>
            <symbol>intel_sub_group_block_read_ui8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_write&apos; is never used." verbose="The function &apos;intel_sub_group_block_write&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="232" column="0"/>
            <symbol>intel_sub_group_block_write</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_write2&apos; is never used." verbose="The function &apos;intel_sub_group_block_write2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="236" column="0"/>
            <symbol>intel_sub_group_block_write2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_write4&apos; is never used." verbose="The function &apos;intel_sub_group_block_write4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="240" column="0"/>
            <symbol>intel_sub_group_block_write4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_write8&apos; is never used." verbose="The function &apos;intel_sub_group_block_write8&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="244" column="0"/>
            <symbol>intel_sub_group_block_write8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_write_ui&apos; is never used." verbose="The function &apos;intel_sub_group_block_write_ui&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="248" column="0"/>
            <symbol>intel_sub_group_block_write_ui</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_write_ui2&apos; is never used." verbose="The function &apos;intel_sub_group_block_write_ui2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="252" column="0"/>
            <symbol>intel_sub_group_block_write_ui2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_write_ui4&apos; is never used." verbose="The function &apos;intel_sub_group_block_write_ui4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="256" column="0"/>
            <symbol>intel_sub_group_block_write_ui4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_write_ui8&apos; is never used." verbose="The function &apos;intel_sub_group_block_write_ui8&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="260" column="0"/>
            <symbol>intel_sub_group_block_write_ui8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_ui&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_ui&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="302" column="0"/>
            <symbol>intel_sub_group_media_block_read_ui</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_ui2&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_ui2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="307" column="0"/>
            <symbol>intel_sub_group_media_block_read_ui2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_ui4&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_ui4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="312" column="0"/>
            <symbol>intel_sub_group_media_block_read_ui4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_ui8&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_ui8&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="317" column="0"/>
            <symbol>intel_sub_group_media_block_read_ui8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_ui&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_ui&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="359" column="0"/>
            <symbol>intel_sub_group_media_block_write_ui</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_ui2&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_ui2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="364" column="0"/>
            <symbol>intel_sub_group_media_block_write_ui2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_ui4&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_ui4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="369" column="0"/>
            <symbol>intel_sub_group_media_block_write_ui4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_ui8&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_ui8&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="374" column="0"/>
            <symbol>intel_sub_group_media_block_write_ui8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_read_us&apos; is never used." verbose="The function &apos;intel_sub_group_block_read_us&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="383" column="0"/>
            <symbol>intel_sub_group_block_read_us</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_read_us2&apos; is never used." verbose="The function &apos;intel_sub_group_block_read_us2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="387" column="0"/>
            <symbol>intel_sub_group_block_read_us2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_read_us4&apos; is never used." verbose="The function &apos;intel_sub_group_block_read_us4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="391" column="0"/>
            <symbol>intel_sub_group_block_read_us4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_read_us8&apos; is never used." verbose="The function &apos;intel_sub_group_block_read_us8&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="395" column="0"/>
            <symbol>intel_sub_group_block_read_us8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_write_us&apos; is never used." verbose="The function &apos;intel_sub_group_block_write_us&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="404" column="0"/>
            <symbol>intel_sub_group_block_write_us</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_write_us2&apos; is never used." verbose="The function &apos;intel_sub_group_block_write_us2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="408" column="0"/>
            <symbol>intel_sub_group_block_write_us2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_write_us4&apos; is never used." verbose="The function &apos;intel_sub_group_block_write_us4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="412" column="0"/>
            <symbol>intel_sub_group_block_write_us4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_block_write_us8&apos; is never used." verbose="The function &apos;intel_sub_group_block_write_us8&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="416" column="0"/>
            <symbol>intel_sub_group_block_write_us8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_us&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_us&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="443" column="0"/>
            <symbol>intel_sub_group_media_block_read_us</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_us2&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_us2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="448" column="0"/>
            <symbol>intel_sub_group_media_block_read_us2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_us4&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_us4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="453" column="0"/>
            <symbol>intel_sub_group_media_block_read_us4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_us8&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_us8&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="458" column="0"/>
            <symbol>intel_sub_group_media_block_read_us8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_us16&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_us16&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="463" column="0"/>
            <symbol>intel_sub_group_media_block_read_us16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_us&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_us&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="490" column="0"/>
            <symbol>intel_sub_group_media_block_write_us</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_us2&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_us2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="495" column="0"/>
            <symbol>intel_sub_group_media_block_write_us2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_us4&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_us4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="500" column="0"/>
            <symbol>intel_sub_group_media_block_write_us4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_us8&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_us8&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="505" column="0"/>
            <symbol>intel_sub_group_media_block_write_us8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_us16&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_us16&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="510" column="0"/>
            <symbol>intel_sub_group_media_block_write_us16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_uc&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_uc&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="520" column="0"/>
            <symbol>intel_sub_group_media_block_read_uc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_uc2&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_uc2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="525" column="0"/>
            <symbol>intel_sub_group_media_block_read_uc2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_uc4&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_uc4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="530" column="0"/>
            <symbol>intel_sub_group_media_block_read_uc4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_uc8&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_uc8&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="535" column="0"/>
            <symbol>intel_sub_group_media_block_read_uc8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_read_uc16&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_read_uc16&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="540" column="0"/>
            <symbol>intel_sub_group_media_block_read_uc16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_uc&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_uc&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="550" column="0"/>
            <symbol>intel_sub_group_media_block_write_uc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_uc2&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_uc2&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="555" column="0"/>
            <symbol>intel_sub_group_media_block_write_uc2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_uc4&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_uc4&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="560" column="0"/>
            <symbol>intel_sub_group_media_block_write_uc4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_uc8&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_uc8&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="565" column="0"/>
            <symbol>intel_sub_group_media_block_write_uc8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_media_block_write_uc16&apos; is never used." verbose="The function &apos;intel_sub_group_media_block_write_uc16&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="570" column="0"/>
            <symbol>intel_sub_group_media_block_write_uc16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_shuffle_down&apos; is never used." verbose="The function &apos;intel_sub_group_shuffle_down&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="583" column="0"/>
            <symbol>intel_sub_group_shuffle_down</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_shuffle_up&apos; is never used." verbose="The function &apos;intel_sub_group_shuffle_up&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="598" column="0"/>
            <symbol>intel_sub_group_shuffle_up</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_sub_group_shuffle_xor&apos; is never used." verbose="The function &apos;intel_sub_group_shuffle_xor&apos; is never used." cwe="561">
            <location file="../backend/src/libocl/tmpl/ocl_simd.tmpl.cl" line="608" column="0"/>
            <symbol>intel_sub_group_shuffle_xor</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;runOnFunction&apos; is never used." verbose="The function &apos;runOnFunction&apos; is never used." cwe="561">
            <location file="../backend/src/llvm/ExpandConstantExpr.cpp" line="172" column="0"/>
            <symbol>runOnFunction</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;RecreateFunction&apos; is never used." verbose="The function &apos;RecreateFunction&apos; is never used." cwe="561">
            <location file="../backend/src/llvm/ExpandUtils.cpp" line="101" column="0"/>
            <symbol>RecreateFunction</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getAnalysisUsage&apos; is never used." verbose="The function &apos;getAnalysisUsage&apos; is never used." cwe="561">
            <location file="../backend/src/llvm/llvm_barrier_nodup.cpp" line="47" column="0"/>
            <symbol>getAnalysisUsage</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getPassName&apos; is never used." verbose="The function &apos;getPassName&apos; is never used." cwe="561">
            <location file="../backend/src/llvm/llvm_barrier_nodup.cpp" line="54" column="0"/>
            <symbol>getPassName</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;runOnModule&apos; is never used." verbose="The function &apos;runOnModule&apos; is never used." cwe="561">
            <location file="../backend/src/llvm/llvm_barrier_nodup.cpp" line="60" column="0"/>
            <symbol>runOnModule</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mutateArgAddressSpace&apos; is never used." verbose="The function &apos;mutateArgAddressSpace&apos; is never used." cwe="561">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="55" column="0"/>
            <symbol>mutateArgAddressSpace</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;replaceInst&apos; is never used." verbose="The function &apos;replaceInst&apos; is never used." cwe="561">
            <location file="../backend/src/llvm/llvm_device_enqueue.cpp" line="173" column="0"/>
            <symbol>replaceInst</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;runOnBasicBlock&apos; is never used." verbose="The function &apos;runOnBasicBlock&apos; is never used." cwe="561">
            <location file="../backend/src/llvm/llvm_intrinsic_lowering.cpp" line="92" column="0"/>
            <symbol>runOnBasicBlock</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;makeScalarizedCalls&apos; is never used." verbose="The function &apos;makeScalarizedCalls&apos; is never used." cwe="561">
            <location file="../backend/src/llvm/llvm_scalarize.cpp" line="442" column="0"/>
            <symbol>makeScalarizedCalls</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;MemDebuggerInsertAlloc&apos; is never used." verbose="The function &apos;MemDebuggerInsertAlloc&apos; is never used." cwe="561">
            <location file="../backend/src/sys/alloc.cpp" line="180" column="0"/>
            <symbol>MemDebuggerInsertAlloc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;MemDebuggerRemoveAlloc&apos; is never used." verbose="The function &apos;MemDebuggerRemoveAlloc&apos; is never used." cwe="561">
            <location file="../backend/src/sys/alloc.cpp" line="184" column="0"/>
            <symbol>MemDebuggerRemoveAlloc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;MemDebuggerDumpAlloc&apos; is never used." verbose="The function &apos;MemDebuggerDumpAlloc&apos; is never used." cwe="561">
            <location file="../backend/src/sys/alloc.cpp" line="188" column="0"/>
            <symbol>MemDebuggerDumpAlloc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;MemDebuggerEnableMemoryInitialization&apos; is never used." verbose="The function &apos;MemDebuggerEnableMemoryInitialization&apos; is never used." cwe="561">
            <location file="../backend/src/sys/alloc.cpp" line="192" column="0"/>
            <symbol>MemDebuggerEnableMemoryInitialization</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;memAlloc&apos; is never used." verbose="The function &apos;memAlloc&apos; is never used." cwe="561">
            <location file="../backend/src/sys/alloc.cpp" line="205" column="0"/>
            <symbol>memAlloc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;memFree&apos; is never used." verbose="The function &apos;memFree&apos; is never used." cwe="561">
            <location file="../backend/src/sys/alloc.cpp" line="216" column="0"/>
            <symbol>memFree</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;onFailedAssertion&apos; is never used." verbose="The function &apos;onFailedAssertion&apos; is never used." cwe="561">
            <location file="../backend/src/sys/assert.cpp" line="68" column="0"/>
            <symbol>onFailedAssertion</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getSeconds&apos; is never used." verbose="The function &apos;getSeconds&apos; is never used." cwe="561">
            <location file="../backend/src/sys/platform.cpp" line="34" column="0"/>
            <symbol>getSeconds</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cl_report_set_all_freed&apos; is never used." verbose="The function &apos;cl_report_set_all_freed&apos; is never used." cwe="561">
            <location file="../src/cl_alloc.c" line="84" column="0"/>
            <symbol>cl_report_set_all_freed</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;clCreateFromGLTexture3D&apos; is never used." verbose="The function &apos;clCreateFromGLTexture3D&apos; is never used." cwe="561">
            <location file="../src/cl_gl_api.c" line="93" column="0"/>
            <symbol>clCreateFromGLTexture3D</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;clCreateFromGLTexture&apos; is never used." verbose="The function &apos;clCreateFromGLTexture&apos; is never used." cwe="561">
            <location file="../src/cl_gl_api.c" line="104" column="0"/>
            <symbol>clCreateFromGLTexture</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cl_mem_copy_image_to_image&apos; is never used." verbose="The function &apos;cl_mem_copy_image_to_image&apos; is never used." cwe="561">
            <location file="../src/cl_mem.c" line="687" column="0"/>
            <symbol>cl_mem_copy_image_to_image</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;intel_batchbuffer_emit_reloc&apos; is never used." verbose="The function &apos;intel_batchbuffer_emit_reloc&apos; is never used." cwe="561">
            <location file="../src/intel/intel_batchbuffer.c" line="148" column="0"/>
            <symbol>intel_batchbuffer_emit_reloc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;block_motion_estimate_intel&apos; is never used." verbose="The function &apos;block_motion_estimate_intel&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_block_motion_estimate_intel.cl" line="9" column="0"/>
            <symbol>block_motion_estimate_intel</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_region_align16&apos; is never used." verbose="The function &apos;__cl_copy_region_align16&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_buf_align16.cl" line="1" column="0"/>
            <symbol>__cl_copy_region_align16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_region_align4&apos; is never used." verbose="The function &apos;__cl_copy_region_align4&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_buf_align4.cl" line="1" column="0"/>
            <symbol>__cl_copy_region_align4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_buffer_rect&apos; is never used." verbose="The function &apos;__cl_copy_buffer_rect&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_buf_rect.cl" line="1" column="0"/>
            <symbol>__cl_copy_buffer_rect</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_buffer_rect_align4&apos; is never used." verbose="The function &apos;__cl_copy_buffer_rect_align4&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_buf_rect_align4.cl" line="1" column="0"/>
            <symbol>__cl_copy_buffer_rect_align4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_region_unalign_dst_offset&apos; is never used." verbose="The function &apos;__cl_copy_region_unalign_dst_offset&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_buf_unalign_dst_offset.cl" line="1" column="0"/>
            <symbol>__cl_copy_region_unalign_dst_offset</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_region_unalign_same_offset&apos; is never used." verbose="The function &apos;__cl_copy_region_unalign_same_offset&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_buf_unalign_same_offset.cl" line="1" column="0"/>
            <symbol>__cl_copy_region_unalign_same_offset</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_region_unalign_src_offset&apos; is never used." verbose="The function &apos;__cl_copy_region_unalign_src_offset&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_buf_unalign_src_offset.cl" line="1" column="0"/>
            <symbol>__cl_copy_region_unalign_src_offset</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_buffer_to_image_2d&apos; is never used." verbose="The function &apos;__cl_copy_buffer_to_image_2d&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_buffer_to_image_2d.cl" line="1" column="0"/>
            <symbol>__cl_copy_buffer_to_image_2d</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_buffer_to_image_2d_align16&apos; is never used." verbose="The function &apos;__cl_copy_buffer_to_image_2d_align16&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_buffer_to_image_2d_align16.cl" line="1" column="0"/>
            <symbol>__cl_copy_buffer_to_image_2d_align16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_buffer_to_image_2d_align4&apos; is never used." verbose="The function &apos;__cl_copy_buffer_to_image_2d_align4&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_buffer_to_image_2d_align4.cl" line="1" column="0"/>
            <symbol>__cl_copy_buffer_to_image_2d_align4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_buffer_to_image_3d&apos; is never used." verbose="The function &apos;__cl_copy_buffer_to_image_3d&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_buffer_to_image_3d.cl" line="1" column="0"/>
            <symbol>__cl_copy_buffer_to_image_3d</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_buffer_to_image_3d_align16&apos; is never used." verbose="The function &apos;__cl_copy_buffer_to_image_3d_align16&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_buffer_to_image_3d_align16.cl" line="1" column="0"/>
            <symbol>__cl_copy_buffer_to_image_3d_align16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_buffer_to_image_3d_align4&apos; is never used." verbose="The function &apos;__cl_copy_buffer_to_image_3d_align4&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_buffer_to_image_3d_align4.cl" line="1" column="0"/>
            <symbol>__cl_copy_buffer_to_image_3d_align4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_1d_array_to_1d_array&apos; is never used." verbose="The function &apos;__cl_copy_image_1d_array_to_1d_array&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_1d_array_to_1d_array.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_1d_array_to_1d_array</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_1d_to_1d&apos; is never used." verbose="The function &apos;__cl_copy_image_1d_to_1d&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_1d_to_1d.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_1d_to_1d</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_2d_array_to_2d&apos; is never used." verbose="The function &apos;__cl_copy_image_2d_array_to_2d&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_2d_array_to_2d.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_2d_array_to_2d</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_2d_array_to_2d_array&apos; is never used." verbose="The function &apos;__cl_copy_image_2d_array_to_2d_array&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_2d_array_to_2d_array.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_2d_array_to_2d_array</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_2d_array_to_3d&apos; is never used." verbose="The function &apos;__cl_copy_image_2d_array_to_3d&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_2d_array_to_3d.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_2d_array_to_3d</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_2d_to_2d&apos; is never used." verbose="The function &apos;__cl_copy_image_2d_to_2d&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_2d_to_2d.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_2d_to_2d</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_2d_to_2d_array&apos; is never used." verbose="The function &apos;__cl_copy_image_2d_to_2d_array&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_2d_to_2d_array.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_2d_to_2d_array</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_2d_to_3d&apos; is never used." verbose="The function &apos;__cl_copy_image_2d_to_3d&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_2d_to_3d.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_2d_to_3d</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_2d_to_buffer&apos; is never used." verbose="The function &apos;__cl_copy_image_2d_to_buffer&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_2d_to_buffer.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_2d_to_buffer</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_2d_to_buffer_align16&apos; is never used." verbose="The function &apos;__cl_copy_image_2d_to_buffer_align16&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_2d_to_buffer_align16.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_2d_to_buffer_align16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_2d_to_buffer_align4&apos; is never used." verbose="The function &apos;__cl_copy_image_2d_to_buffer_align4&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_2d_to_buffer_align4.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_2d_to_buffer_align4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_3d_to_2d&apos; is never used." verbose="The function &apos;__cl_copy_image_3d_to_2d&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_3d_to_2d.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_3d_to_2d</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_3d_to_2d_array&apos; is never used." verbose="The function &apos;__cl_copy_image_3d_to_2d_array&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_3d_to_2d_array.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_3d_to_2d_array</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_3d_to_3d&apos; is never used." verbose="The function &apos;__cl_copy_image_3d_to_3d&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_3d_to_3d.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_3d_to_3d</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_3d_to_buffer&apos; is never used." verbose="The function &apos;__cl_copy_image_3d_to_buffer&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_3d_to_buffer.cl" line="3" column="0"/>
            <symbol>__cl_copy_image_3d_to_buffer</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_3d_to_buffer_align16&apos; is never used." verbose="The function &apos;__cl_copy_image_3d_to_buffer_align16&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_3d_to_buffer_align16.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_3d_to_buffer_align16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_copy_image_3d_to_buffer_align4&apos; is never used." verbose="The function &apos;__cl_copy_image_3d_to_buffer_align4&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_copy_image_3d_to_buffer_align4.cl" line="1" column="0"/>
            <symbol>__cl_copy_image_3d_to_buffer_align4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_fill_region_align128&apos; is never used." verbose="The function &apos;__cl_fill_region_align128&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_fill_buf_align128.cl" line="1" column="0"/>
            <symbol>__cl_fill_region_align128</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_fill_region_align2&apos; is never used." verbose="The function &apos;__cl_fill_region_align2&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_fill_buf_align2.cl" line="1" column="0"/>
            <symbol>__cl_fill_region_align2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_fill_region_align4&apos; is never used." verbose="The function &apos;__cl_fill_region_align4&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_fill_buf_align4.cl" line="1" column="0"/>
            <symbol>__cl_fill_region_align4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_fill_region_align8_2&apos; is never used." verbose="The function &apos;__cl_fill_region_align8_2&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_fill_buf_align8.cl" line="11" column="0"/>
            <symbol>__cl_fill_region_align8_2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_fill_region_align8_4&apos; is never used." verbose="The function &apos;__cl_fill_region_align8_4&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_fill_buf_align8.cl" line="12" column="0"/>
            <symbol>__cl_fill_region_align8_4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_fill_region_align8_8&apos; is never used." verbose="The function &apos;__cl_fill_region_align8_8&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_fill_buf_align8.cl" line="13" column="0"/>
            <symbol>__cl_fill_region_align8_8</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_fill_region_align8_16&apos; is never used." verbose="The function &apos;__cl_fill_region_align8_16&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_fill_buf_align8.cl" line="14" column="0"/>
            <symbol>__cl_fill_region_align8_16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_fill_region_unalign&apos; is never used." verbose="The function &apos;__cl_fill_region_unalign&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_fill_buf_unalign.cl" line="1" column="0"/>
            <symbol>__cl_fill_region_unalign</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_fill_image_1d&apos; is never used." verbose="The function &apos;__cl_fill_image_1d&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_fill_image_1d.cl" line="1" column="0"/>
            <symbol>__cl_fill_image_1d</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_fill_image_1d_array&apos; is never used." verbose="The function &apos;__cl_fill_image_1d_array&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_fill_image_1d_array.cl" line="1" column="0"/>
            <symbol>__cl_fill_image_1d_array</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_fill_image_2d&apos; is never used." verbose="The function &apos;__cl_fill_image_2d&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_fill_image_2d.cl" line="1" column="0"/>
            <symbol>__cl_fill_image_2d</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_fill_image_2d_array&apos; is never used." verbose="The function &apos;__cl_fill_image_2d_array&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_fill_image_2d_array.cl" line="1" column="0"/>
            <symbol>__cl_fill_image_2d_array</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;__cl_fill_image_3d&apos; is never used." verbose="The function &apos;__cl_fill_image_3d&apos; is never used." cwe="561">
            <location file="../src/kernels/cl_internal_fill_image_3d.cl" line="1" column="0"/>
            <symbol>__cl_fill_image_3d</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;initialize_env_var&apos; is never used." verbose="The function &apos;initialize_env_var&apos; is never used." cwe="561">
            <location file="../src/performance.c" line="309" column="0"/>
            <symbol>initialize_env_var</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;time_end&apos; is never used." verbose="The function &apos;time_end&apos; is never used." cwe="561">
            <location file="../src/performance.c" line="326" column="0"/>
            <symbol>time_end</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dri_state_get_drawable&apos; is never used." verbose="The function &apos;dri_state_get_drawable&apos; is never used." cwe="561">
            <location file="../src/x11/dricommon.c" line="99" column="0"/>
            <symbol>dri_state_get_drawable</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dri_state_swap_buffer&apos; is never used." verbose="The function &apos;dri_state_swap_buffer&apos; is never used." cwe="561">
            <location file="../src/x11/dricommon.c" line="184" column="0"/>
            <symbol>dri_state_swap_buffer</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dri_state_get_rendering_buffer&apos; is never used." verbose="The function &apos;dri_state_get_rendering_buffer&apos; is never used." cwe="561">
            <location file="../src/x11/dricommon.c" line="204" column="0"/>
            <symbol>dri_state_get_rendering_buffer</symbol>
        </error>
        <error id="checkersReport" severity="information" msg="Active checkers: There was critical errors (use --checkers-report=&lt;filename&gt; to see details)" verbose="Active checkers: There was critical errors (use --checkers-report=&lt;filename&gt; to see details)"/>
    </errors>
</results>
